{
  "version": 3,
  "sources": ["../../../../../../../../packages/router/src/shared.ts", "../../../../../../../../packages/router/src/utils/collection.ts", "../../../../../../../../packages/router/src/url_tree.ts", "../../../../../../../../packages/router/src/create_url_tree.ts", "../../../../../../../../packages/router/src/events.ts", "../../../../../../../../packages/router/src/utils/config.ts", "../../../../../../../../packages/router/src/router_outlet_context.ts", "../../../../../../../../packages/router/src/utils/tree.ts", "../../../../../../../../packages/router/src/router_state.ts", "../../../../../../../../packages/router/src/directives/router_outlet.ts", "../../../../../../../../packages/router/src/create_router_state.ts", "../../../../../../../../packages/router/src/models.ts", "../../../../../../../../packages/router/src/navigation_canceling_error.ts", "../../../../../../../../packages/router/src/operators/activate_routes.ts", "../../../../../../../../packages/router/src/utils/preactivation.ts", "../../../../../../../../packages/router/src/utils/type_guards.ts", "../../../../../../../../packages/router/src/operators/prioritized_guard_value.ts", "../../../../../../../../packages/router/src/operators/check_guards.ts", "../../../../../../../../packages/router/src/apply_redirects.ts", "../../../../../../../../packages/router/src/utils/config_matching.ts", "../../../../../../../../packages/router/src/recognize.ts", "../../../../../../../../packages/router/src/operators/recognize.ts", "../../../../../../../../packages/router/src/operators/resolve_data.ts", "../../../../../../../../packages/router/src/operators/switch_tap.ts", "../../../../../../../../packages/router/src/page_title_strategy.ts", "../../../../../../../../packages/router/src/router_config.ts", "../../../../../../../../packages/router/src/components/empty_outlet.ts", "../../../../../../../../packages/router/src/router_config_loader.ts", "../../../../../../../../packages/router/src/url_handling_strategy.ts", "../../../../../../../../packages/router/src/utils/view_transition.ts", "../../../../../../../../packages/router/src/navigation_transition.ts", "../../../../../../../../packages/router/src/route_reuse_strategy.ts", "../../../../../../../../packages/router/src/statemanager/state_manager.ts", "../../../../../../../../packages/router/src/utils/navigations.ts", "../../../../../../../../packages/router/src/router.ts", "../../../../../../../../packages/router/src/directives/router_link.ts", "../../../../../../../../packages/router/src/directives/router_link_active.ts", "../../../../../../../../packages/router/src/router_preloader.ts", "../../../../../../../../packages/router/src/router_scroller.ts", "../../../../../../../../packages/router/src/provide_router.ts", "../../../../../../../../packages/router/src/router_module.ts", "../../../../../../../../packages/router/src/utils/functional_guards.ts", "../../../../../../../../packages/router/src/version.ts", "../../../../../../../../packages/router/public_api.ts", "../../../../../../../../packages/router/index.ts", "../../../../../../../../packages/router/router.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Route, UrlMatchResult} from './models';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * A private symbol used to store the value of `Route.title` inside the `Route.data` if it is a\n * static string or `Route.resolve` if anything else. This allows us to reuse the existing route\n * data/resolvers to support the title feature without new instrumentation in the `Router` pipeline.\n */\nexport const RouteTitleKey = /* @__PURE__ */ Symbol('RouteTitle');\n\n/**\n * A collection of matrix and query URL parameters.\n * @see {@link convertToParamMap}\n * @see {@link ParamMap}\n *\n * @publicApi\n */\nexport type Params = {\n  [key: string]: any;\n};\n\n/**\n * A map that provides access to the required and optional parameters\n * specific to a route.\n * The map supports retrieving a single value with `get()`\n * or multiple values with `getAll()`.\n *\n * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n *\n * @publicApi\n */\nexport interface ParamMap {\n  /**\n   * Reports whether the map contains a given parameter.\n   * @param name The parameter name.\n   * @returns True if the map contains the given parameter, false otherwise.\n   */\n  has(name: string): boolean;\n  /**\n   * Retrieves a single value for a parameter.\n   * @param name The parameter name.\n   * @return The parameter's single value,\n   * or the first value if the parameter has multiple values,\n   * or `null` when there is no such parameter.\n   */\n  get(name: string): string | null;\n  /**\n   * Retrieves multiple values for a parameter.\n   * @param name The parameter name.\n   * @return An array containing one or more values,\n   * or an empty array if there is no such parameter.\n   *\n   */\n  getAll(name: string): string[];\n\n  /** Names of the parameters in the map. */\n  readonly keys: string[];\n}\n\nclass ParamsAsMap implements ParamMap {\n  private params: Params;\n\n  constructor(params: Params) {\n    this.params = params || {};\n  }\n\n  has(name: string): boolean {\n    return Object.prototype.hasOwnProperty.call(this.params, name);\n  }\n\n  get(name: string): string | null {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n\n    return null;\n  }\n\n  getAll(name: string): string[] {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n\n    return [];\n  }\n\n  get keys(): string[] {\n    return Object.keys(this.params);\n  }\n}\n\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nexport function convertToParamMap(params: Params): ParamMap {\n  return new ParamsAsMap(params);\n}\n\n/**\n * Matches the route configuration (`route`) against the actual URL (`segments`).\n *\n * When no matcher is defined on a `Route`, this is the matcher used by the Router by default.\n *\n * @param segments The remaining unmatched segments in the current navigation\n * @param segmentGroup The current segment group being matched\n * @param route The `Route` to match against.\n *\n * @see {@link UrlMatchResult}\n * @see {@link Route}\n *\n * @returns The resulting match information or `null` if the `route` should not match.\n * @publicApi\n */\nexport function defaultUrlMatcher(\n  segments: UrlSegment[],\n  segmentGroup: UrlSegmentGroup,\n  route: Route,\n): UrlMatchResult | null {\n  const parts = route.path!.split('/');\n\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n\n  if (\n    route.pathMatch === 'full' &&\n    (segmentGroup.hasChildren() || parts.length < segments.length)\n  ) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n\n  const posParams: {[key: string]: UrlSegment} = {};\n\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part[0] === ':';\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n\n  return {consumed: segments.slice(0, parts.length), posParams};\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ÉµisPromise as isPromise} from '@angular/core';\nimport {from, isObservable, Observable, of} from 'rxjs';\n\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n\nexport function shallowEqual(\n  a: {[key: string | symbol]: any},\n  b: {[key: string | symbol]: any},\n): boolean {\n  // While `undefined` should never be possible, it would sometimes be the case in IE 11\n  // and pre-chromium Edge. The check below accounts for this edge case.\n  const k1 = a ? getDataKeys(a) : undefined;\n  const k2 = b ? getDataKeys(b) : undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key: string | symbol;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Gets the keys of an object, including `symbol` keys.\n */\nexport function getDataKeys(obj: Object): Array<string | symbol> {\n  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];\n}\n\n/**\n * Test equality for arrays of strings or a string.\n */\nexport function equalArraysOrString(a: string | string[], b: string | string[]) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    const aSorted = [...a].sort();\n    const bSorted = [...b].sort();\n    return aSorted.every((val, index) => bSorted[index] === val);\n  } else {\n    return a === b;\n  }\n}\n\n/**\n * Return the last element of an array.\n */\nexport function last<T>(a: T[]): T | null {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n\nexport function wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, ÉµRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\nimport {convertToParamMap, ParamMap, Params, PRIMARY_OUTLET} from './shared';\nimport {equalArraysOrString, shallowEqual} from './utils/collection';\n\n/**\n * A set of options which specify how to determine if a `UrlTree` is active, given the `UrlTree`\n * for the current router state.\n *\n * @publicApi\n * @see {@link Router#isActive}\n */\nexport interface IsActiveMatchOptions {\n  /**\n   * Defines the strategy for comparing the matrix parameters of two `UrlTree`s.\n   *\n   * The matrix parameter matching is dependent on the strategy for matching the\n   * segments. That is, if the `paths` option is set to `'subset'`, only\n   * the matrix parameters of the matching segments will be compared.\n   *\n   * - `'exact'`: Requires that matching segments also have exact matrix parameter\n   * matches.\n   * - `'subset'`: The matching segments in the router's active `UrlTree` may contain\n   * extra matrix parameters, but those that exist in the `UrlTree` in question must match.\n   * - `'ignored'`: When comparing `UrlTree`s, matrix params will be ignored.\n   */\n  matrixParams: 'exact' | 'subset' | 'ignored';\n  /**\n   * Defines the strategy for comparing the query parameters of two `UrlTree`s.\n   *\n   * - `'exact'`: the query parameters must match exactly.\n   * - `'subset'`: the active `UrlTree` may contain extra parameters,\n   * but must match the key and value of any that exist in the `UrlTree` in question.\n   * - `'ignored'`: When comparing `UrlTree`s, query params will be ignored.\n   */\n  queryParams: 'exact' | 'subset' | 'ignored';\n  /**\n   * Defines the strategy for comparing the `UrlSegment`s of the `UrlTree`s.\n   *\n   * - `'exact'`: all segments in each `UrlTree` must match.\n   * - `'subset'`: a `UrlTree` will be determined to be active if it\n   * is a subtree of the active route. That is, the active route may contain extra\n   * segments, but must at least have all the segments of the `UrlTree` in question.\n   */\n  paths: 'exact' | 'subset';\n  /**\n   * - `'exact'`: indicates that the `UrlTree` fragments must be equal.\n   * - `'ignored'`: the fragments will not be compared when determining if a\n   * `UrlTree` is active.\n   */\n  fragment: 'exact' | 'ignored';\n}\n\ntype ParamMatchOptions = 'exact' | 'subset' | 'ignored';\n\ntype PathCompareFn = (\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  matrixParams: ParamMatchOptions,\n) => boolean;\ntype ParamCompareFn = (container: Params, containee: Params) => boolean;\n\nconst pathCompareMap: Record<IsActiveMatchOptions['paths'], PathCompareFn> = {\n  'exact': equalSegmentGroups,\n  'subset': containsSegmentGroup,\n};\nconst paramCompareMap: Record<ParamMatchOptions, ParamCompareFn> = {\n  'exact': equalParams,\n  'subset': containsParams,\n  'ignored': () => true,\n};\n\nexport function containsTree(\n  container: UrlTree,\n  containee: UrlTree,\n  options: IsActiveMatchOptions,\n): boolean {\n  return (\n    pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) &&\n    paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) &&\n    !(options.fragment === 'exact' && container.fragment !== containee.fragment)\n  );\n}\n\nfunction equalParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\n\nfunction equalSegmentGroups(\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  matrixParams: ParamMatchOptions,\n): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {\n    return false;\n  }\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams))\n      return false;\n  }\n  return true;\n}\n\nfunction containsParams(container: Params, containee: Params): boolean {\n  return (\n    Object.keys(containee).length <= Object.keys(container).length &&\n    Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key]))\n  );\n}\n\nfunction containsSegmentGroup(\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  matrixParams: ParamMatchOptions,\n): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);\n}\n\nfunction containsSegmentGroupHelper(\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  containeePaths: UrlSegment[],\n  matrixParams: ParamMatchOptions,\n): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(\n      container.children[PRIMARY_OUTLET],\n      containee,\n      next,\n      matrixParams,\n    );\n  }\n}\n\nfunction matrixParamsMatch(\n  containerPaths: UrlSegment[],\n  containeePaths: UrlSegment[],\n  options: ParamMatchOptions,\n) {\n  return containeePaths.every((containeeSegment, i) => {\n    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);\n  });\n}\n\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlTree {\n  /** @internal */\n  _queryParamMap?: ParamMap;\n\n  constructor(\n    /** The root segment group of the URL tree */\n    public root: UrlSegmentGroup = new UrlSegmentGroup([], {}),\n    /** The query params of the URL */\n    public queryParams: Params = {},\n    /** The fragment of the URL */\n    public fragment: string | null = null,\n  ) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (root.segments.length > 0) {\n        throw new RuntimeError(\n          RuntimeErrorCode.INVALID_ROOT_URL_SEGMENT,\n          'The root `UrlSegmentGroup` should not contain `segments`. ' +\n            'Instead, these segments belong in the `children` so they can be associated with a named outlet.',\n        );\n      }\n    }\n  }\n\n  get queryParamMap(): ParamMap {\n    this._queryParamMap ??= convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nexport class UrlSegmentGroup {\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup | null = null;\n\n  constructor(\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    public segments: UrlSegment[],\n    /** The list of children of this group */\n    public children: {[key: string]: UrlSegmentGroup},\n  ) {\n    Object.values(children).forEach((v) => (v.parent = this));\n  }\n\n  /** Whether the segment has child segments */\n  hasChildren(): boolean {\n    return this.numberOfChildren > 0;\n  }\n\n  /** Number of child segments */\n  get numberOfChildren(): number {\n    return Object.keys(this.children).length;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return serializePaths(this);\n  }\n}\n\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n *Â ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlSegment {\n  /** @internal */\n  _parameterMap?: ParamMap;\n\n  constructor(\n    /** The path part of a URL segment */\n    public path: string,\n\n    /** The matrix parameters associated with a segment */\n    public parameters: {[name: string]: string},\n  ) {}\n\n  get parameterMap(): ParamMap {\n    this._parameterMap ??= convertToParamMap(this.parameters);\n    return this._parameterMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return serializePath(this);\n  }\n}\n\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n\nexport function mapChildrenIntoArray<T>(\n  segment: UrlSegmentGroup,\n  fn: (v: UrlSegmentGroup, k: string) => T[],\n): T[] {\n  let res: T[] = [];\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  Object.entries(segment.children).forEach(([childOutlet, child]) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: () => new DefaultUrlSerializer()})\nexport abstract class UrlSerializer {\n  /** Parse a url into a `UrlTree` */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a `UrlTree` into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url: string): UrlTree {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n\n  /** Converts a `UrlTree` into a url */\n  serialize(tree: UrlTree): string {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment =\n      typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map((p) => serializePath(p)).join('/');\n}\n\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET]\n      ? serializeSegment(segment.children[PRIMARY_OUTLET], false)\n      : '';\n    const children: string[] = [];\n\n    Object.entries(segment.children).forEach(([k, v]) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n  } else {\n    const children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n\n    // use no parenthesis if the only child is a primary outlet route\n    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n      return `${serializePaths(segment)}/${children[0]}`;\n    }\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s: string): string {\n  return encodeURIComponent(s)\n    .replace(/%40/g, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',');\n}\n\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriQuery(s: string): string {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriFragment(s: string): string {\n  return encodeURI(s);\n}\n\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriSegment(s: string): string {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nexport function decodeQuery(s: string): string {\n  return decode(s.replace(/\\+/g, '%20'));\n}\n\nexport function serializePath(path: UrlSegment): string {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n\nfunction serializeMatrixParams(params: {[key: string]: string}): string {\n  return Object.entries(params)\n    .map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`)\n    .join('');\n}\n\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const strParams: string[] = Object.entries(params)\n    .map(([name, value]) => {\n      return Array.isArray(value)\n        ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&')\n        : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n    })\n    .filter((s) => s);\n\n  return strParams.length ? `?${strParams.join('&')}` : '';\n}\n\nconst SEGMENT_RE = /^[^\\/()?;#]+/;\nfunction matchSegments(str: string): string {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst MATRIX_PARAM_SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchMatrixKeySegments(str: string): string {\n  const match = str.match(MATRIX_PARAM_SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str: string): string {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_VALUE_RE = /^[^&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str: string): string {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\n\nclass UrlParser {\n  private remaining: string;\n\n  constructor(private url: string) {\n    this.remaining = url;\n  }\n\n  parseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n\n  parseQueryParams(): Params {\n    const params: Params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n\n  parseFragment(): string | null {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n\n  private parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  private parseSegment(): UrlSegment {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new RuntimeError(\n        RuntimeErrorCode.EMPTY_PATH_WITH_PARAMS,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Empty path url segment cannot have parameters: '${this.remaining}'.`,\n      );\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n\n  private parseMatrixParams(): {[key: string]: string} {\n    const params: {[key: string]: string} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n\n  private parseParam(params: {[key: string]: string}): void {\n    const key = matchMatrixKeySegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n\n  // Parse a single query parameter `name[=value]`\n  private parseQueryParam(params: Params): void {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n\n  // parse `(a/b//outlet_name:c/d)`\n  private parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n\n      const next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new RuntimeError(\n          RuntimeErrorCode.UNPARSABLE_URL,\n          (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot parse url '${this.url}'`,\n        );\n      }\n\n      let outletName: string = undefined!;\n      if (path.indexOf(':') > -1) {\n        outletName = path.slice(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const children = this.parseChildren();\n      segments[outletName] =\n        Object.keys(children).length === 1\n          ? children[PRIMARY_OUTLET]\n          : new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n\n  private peekStartsWith(str: string): boolean {\n    return this.remaining.startsWith(str);\n  }\n\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  private consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n\n  private capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_VALUE_IN_URL,\n        (typeof ngDevMode === 'undefined' || ngDevMode) && `Expected \"${str}\".`,\n      );\n    }\n  }\n}\n\nexport function createRoot(rootCandidate: UrlSegmentGroup) {\n  return rootCandidate.segments.length > 0\n    ? new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate})\n    : rootCandidate;\n}\n\n/**\n * Recursively\n * - merges primary segment children into their parents\n * - drops empty children (those which have no segments and no children themselves). This latter\n * prevents serializing a group into something like `/a(aux:)`, where `aux` is an empty child\n * segment.\n * - merges named outlets without a primary segment sibling into the children. This prevents\n * serializing a URL like `//(a:a)(b:b) instead of `/(a:a//b:b)` when the aux b route lives on the\n * root but the `a` route lives under an empty path primary route.\n */\nexport function squashSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  const newChildren: Record<string, UrlSegmentGroup> = {};\n  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {\n    const childCandidate = squashSegmentGroup(child);\n    // moves named children in an empty path primary child into this group\n    if (\n      childOutlet === PRIMARY_OUTLET &&\n      childCandidate.segments.length === 0 &&\n      childCandidate.hasChildren()\n    ) {\n      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {\n        newChildren[grandChildOutlet] = grandChild;\n      }\n    } // don't add empty children\n    else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n      newChildren[childOutlet] = childCandidate;\n    }\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n  return mergeTrivialChildren(s);\n}\n\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n\nexport function isUrlTree(v: any): v is UrlTree {\n  return v instanceof UrlTree;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ÉµRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\nimport {ActivatedRouteSnapshot} from './router_state';\nimport {Params, PRIMARY_OUTLET} from './shared';\nimport {createRoot, squashSegmentGroup, UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {last, shallowEqual} from './utils/collection';\n\n/**\n * Creates a `UrlTree` relative to an `ActivatedRouteSnapshot`.\n *\n * @publicApi\n *\n *\n * @param relativeTo The `ActivatedRouteSnapshot` to apply the commands to\n * @param commands An array of URL fragments with which to construct the new URL tree.\n * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n * segments, followed by the parameters for each segment.\n * The fragments are applied to the one provided in the `relativeTo` parameter.\n * @param queryParams The query parameters for the `UrlTree`. `null` if the `UrlTree` does not have\n *     any query parameters.\n * @param fragment The fragment for the `UrlTree`. `null` if the `UrlTree` does not have a fragment.\n *\n * @usageNotes\n *\n * ```\n * // create /team/33/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, 'user', 11]);\n *\n * // create /team/33;expand=true/user/11\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {expand: true}, 'user', 11]);\n *\n * // you can collapse static segments like this (this works only with the first passed-in value):\n * createUrlTreeFromSnapshot(snapshot, ['/team/33/user', userId]);\n *\n * // If the first segment can contain slashes, and you do not want the router to split it,\n * // you can do the following:\n * createUrlTreeFromSnapshot(snapshot, [{segmentPath: '/one/two'}]);\n *\n * // create /team/33/(user/11//right:chat)\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right:\n * 'chat'}}], null, null);\n *\n * // remove the right secondary node\n * createUrlTreeFromSnapshot(snapshot, ['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n *\n * // For the examples below, assume the current URL is for the `/team/33/user/11` and the\n * `ActivatedRouteSnapshot` points to `user/11`:\n *\n * // navigate to /team/33/user/11/details\n * createUrlTreeFromSnapshot(snapshot, ['details']);\n *\n * // navigate to /team/33/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../22']);\n *\n * // navigate to /team/44/user/22\n * createUrlTreeFromSnapshot(snapshot, ['../../team/44/user/22']);\n * ```\n */\nexport function createUrlTreeFromSnapshot(\n  relativeTo: ActivatedRouteSnapshot,\n  commands: any[],\n  queryParams: Params | null = null,\n  fragment: string | null = null,\n): UrlTree {\n  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);\n  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);\n}\n\nexport function createSegmentGroupFromRoute(route: ActivatedRouteSnapshot): UrlSegmentGroup {\n  let targetGroup: UrlSegmentGroup | undefined;\n\n  function createSegmentGroupFromRouteRecursive(\n    currentRoute: ActivatedRouteSnapshot,\n  ): UrlSegmentGroup {\n    const childOutlets: {[outlet: string]: UrlSegmentGroup} = {};\n    for (const childSnapshot of currentRoute.children) {\n      const root = createSegmentGroupFromRouteRecursive(childSnapshot);\n      childOutlets[childSnapshot.outlet] = root;\n    }\n    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);\n    if (currentRoute === route) {\n      targetGroup = segmentGroup;\n    }\n    return segmentGroup;\n  }\n  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);\n  const rootSegmentGroup = createRoot(rootCandidate);\n\n  return targetGroup ?? rootSegmentGroup;\n}\n\nexport function createUrlTreeFromSegmentGroup(\n  relativeTo: UrlSegmentGroup,\n  commands: any[],\n  queryParams: Params | null,\n  fragment: string | null,\n): UrlTree {\n  let root = relativeTo;\n  while (root.parent) {\n    root = root.parent;\n  }\n  // There are no commands so the `UrlTree` goes to the same path as the one created from the\n  // `UrlSegmentGroup`. All we need to do is update the `queryParams` and `fragment` without\n  // applying any other logic.\n  if (commands.length === 0) {\n    return tree(root, root, root, queryParams, fragment);\n  }\n\n  const nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);\n  }\n\n  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);\n  const newSegmentGroup = position.processChildren\n    ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands)\n    : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);\n  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);\n}\n\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command: any): command is {outlets: {[key: string]: any}} {\n  return typeof command === 'object' && command != null && command.outlets;\n}\n\nfunction tree(\n  oldRoot: UrlSegmentGroup,\n  oldSegmentGroup: UrlSegmentGroup,\n  newSegmentGroup: UrlSegmentGroup,\n  queryParams: Params | null,\n  fragment: string | null,\n): UrlTree {\n  let qp: any = {};\n  if (queryParams) {\n    Object.entries(queryParams).forEach(([name, value]) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  let rootCandidate: UrlSegmentGroup;\n  if (oldRoot === oldSegmentGroup) {\n    rootCandidate = newSegmentGroup;\n  } else {\n    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);\n  }\n\n  const newRoot = createRoot(squashSegmentGroup(rootCandidate));\n  return new UrlTree(newRoot, qp, fragment);\n}\n\n/**\n * Replaces the `oldSegment` which is located in some child of the `current` with the `newSegment`.\n * This also has the effect of creating new `UrlSegmentGroup` copies to update references. This\n * shouldn't be necessary but the fallback logic for an invalid ActivatedRoute in the creation uses\n * the Router's current url tree. If we don't create new segment groups, we end up modifying that\n * value.\n */\nfunction replaceSegment(\n  current: UrlSegmentGroup,\n  oldSegment: UrlSegmentGroup,\n  newSegment: UrlSegmentGroup,\n): UrlSegmentGroup {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  Object.entries(current.children).forEach(([outletName, c]) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\n\nclass Navigation {\n  constructor(\n    public isAbsolute: boolean,\n    public numberOfDoubleDots: number,\n    public commands: any[],\n  ) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new RuntimeError(\n        RuntimeErrorCode.ROOT_SEGMENT_MATRIX_PARAMS,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          'Root segment cannot have matrix parameters',\n      );\n    }\n\n    const cmdWithOutlet = commands.find(isCommandWithOutlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISPLACED_OUTLETS_COMMAND,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          '{outlets:{}} has to be the last command',\n      );\n    }\n  }\n\n  public toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands: any[]): Navigation {\n  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n\n  const res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets: {[k: string]: any} = {};\n        Object.entries(cmd.outlets).forEach(([name, commands]) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {\n          //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {\n          //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  constructor(\n    public segmentGroup: UrlSegmentGroup,\n    public processChildren: boolean,\n    public index: number,\n  ) {}\n}\n\nfunction findStartingPositionForTargetGroup(\n  nav: Navigation,\n  root: UrlSegmentGroup,\n  target: UrlSegmentGroup,\n): Position {\n  if (nav.isAbsolute) {\n    return new Position(root, true, 0);\n  }\n\n  if (!target) {\n    // `NaN` is used only to maintain backwards compatibility with incorrectly mocked\n    // `ActivatedRouteSnapshot` in tests. In prior versions of this code, the position here was\n    // determined based on an internal property that was rarely mocked, resulting in `NaN`. In\n    // reality, this code path should _never_ be touched since `target` is not allowed to be falsey.\n    return new Position(root, false, NaN);\n  }\n  if (target.parent === null) {\n    return new Position(target, true, 0);\n  }\n\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = target.segments.length - 1 + modifier;\n  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);\n}\n\nfunction createPositionApplyingDoubleDots(\n  group: UrlSegmentGroup,\n  index: number,\n  numberOfDoubleDots: number,\n): Position {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent!;\n    if (!g) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_DOUBLE_DOTS,\n        (typeof ngDevMode === 'undefined' || ngDevMode) && \"Invalid number of '../'\",\n      );\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n\nfunction getOutlets(commands: unknown[]): {[k: string]: unknown[] | string} {\n  if (isCommandWithOutlets(commands[0])) {\n    return commands[0].outlets;\n  }\n\n  return {[PRIMARY_OUTLET]: commands};\n}\n\nfunction updateSegmentGroup(\n  segmentGroup: UrlSegmentGroup | undefined,\n  startIndex: number,\n  commands: any[],\n): UrlSegmentGroup {\n  segmentGroup ??= new UrlSegmentGroup([], {});\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(\n      segmentGroup.segments.slice(m.pathIndex),\n      segmentGroup.children,\n    );\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n\nfunction updateSegmentGroupChildren(\n  segmentGroup: UrlSegmentGroup,\n  startIndex: number,\n  commands: any[],\n): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children: {[key: string]: UrlSegmentGroup} = {};\n    // If the set of commands applies to anything other than the primary outlet and the child\n    // segment is an empty path primary segment on its own, we want to apply the commands to the\n    // empty child path rather than here. The outcome is that the empty primary child is effectively\n    // removed from the final output UrlTree. Imagine the following config:\n    //\n    // {path: '', children: [{path: '**', outlet: 'popup'}]}.\n    //\n    // Navigation to /(popup:a) will activate the child outlet correctly Given a follow-up\n    // navigation with commands\n    // ['/', {outlets: {'popup': 'b'}}], we _would not_ want to apply the outlet commands to the\n    // root segment because that would result in\n    // //(popup:a)(popup:b) since the outlet command got applied one level above where it appears in\n    // the `ActivatedRoute` rather than updating the existing one.\n    //\n    // Because empty paths do not appear in the URL segments and the fact that the segments used in\n    // the output `UrlTree` are squashed to eliminate these empty paths where possible\n    // https://github.com/angular/angular/blob/13f10de40e25c6900ca55bd83b36bd533dacfa9e/packages/router/src/url_tree.ts#L755\n    // it can be hard to determine what is the right thing to do when applying commands to a\n    // `UrlSegmentGroup` that is created from an \"unsquashed\"/expanded `ActivatedRoute` tree.\n    // This code effectively \"squashes\" empty path primary routes when they have no siblings on\n    // the same level of the tree.\n    if (\n      Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) &&\n      segmentGroup.children[PRIMARY_OUTLET] &&\n      segmentGroup.numberOfChildren === 1 &&\n      segmentGroup.children[PRIMARY_OUTLET].segments.length === 0\n    ) {\n      const childrenOfEmptyChild = updateSegmentGroupChildren(\n        segmentGroup.children[PRIMARY_OUTLET],\n        startIndex,\n        commands,\n      );\n      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);\n    }\n\n    Object.entries(outlets).forEach(([outlet, commands]) => {\n      if (typeof commands === 'string') {\n        commands = [commands];\n      }\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n\n  const noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const command = commands[currentCommandIndex];\n    // Do not try to consume command as part of the prefixing if it has outlets because it can\n    // contain outlets other than the one being processed. Consuming the outlets command would\n    // result in other outlets being ignored.\n    if (isCommandWithOutlets(command)) {\n      break;\n    }\n    const curr = `${command}`;\n    const next =\n      currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && typeof next === 'object' && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n\nfunction createNewSegmentGroup(\n  segmentGroup: UrlSegmentGroup,\n  startIndex: number,\n  commands: any[],\n): UrlSegmentGroup {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n\n  let i = 0;\n  while (i < commands.length) {\n    const command = commands[i];\n    if (isCommandWithOutlets(command)) {\n      const children = createNewSegmentChildren(command.outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, stringify(commands[0])));\n      i++;\n      continue;\n    }\n\n    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n    const next = i < commands.length - 1 ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n\nfunction createNewSegmentChildren(outlets: {[name: string]: unknown[] | string}): {\n  [outlet: string]: UrlSegmentGroup;\n} {\n  const children: {[outlet: string]: UrlSegmentGroup} = {};\n  Object.entries(outlets).forEach(([outlet, commands]) => {\n    if (typeof commands === 'string') {\n      commands = [commands];\n    }\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const res: {[key: string]: string} = {};\n  Object.entries(params).forEach(([k, v]) => (res[k] = `${v}`));\n  return res;\n}\n\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NavigationBehaviorOptions, Route} from './models';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {UrlTree} from './url_tree';\n\n/**\n * Identifies the call or event that triggered a navigation.\n *\n * * 'imperative': Triggered by `router.navigateByUrl()` or `router.navigate()`.\n * * 'popstate' : Triggered by a `popstate` event.\n * * 'hashchange'-: Triggered by a `hashchange` event.\n *\n * @publicApi\n */\nexport type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\nexport const IMPERATIVE_NAVIGATION = 'imperative';\n\n/**\n * Identifies the type of a router event.\n *\n * @publicApi\n */\nexport enum EventType {\n  NavigationStart,\n  NavigationEnd,\n  NavigationCancel,\n  NavigationError,\n  RoutesRecognized,\n  ResolveStart,\n  ResolveEnd,\n  GuardsCheckStart,\n  GuardsCheckEnd,\n  RouteConfigLoadStart,\n  RouteConfigLoadEnd,\n  ChildActivationStart,\n  ChildActivationEnd,\n  ActivationStart,\n  ActivationEnd,\n  Scroll,\n  NavigationSkipped,\n}\n\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event | RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see {@link Event}\n * @see [Router events summary](guide/routing/router-reference#router-events)\n * @publicApi\n */\nexport class RouterEvent {\n  constructor(\n    /** A unique ID that the router assigns to every router navigation. */\n    public id: number,\n    /** The URL that is the destination for this navigation. */\n    public url: string,\n  ) {}\n}\n\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nexport class NavigationStart extends RouterEvent {\n  readonly type = EventType.NavigationStart;\n\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   * @see {@link NavigationEnd}\n   * @see {@link NavigationCancel}\n   * @see {@link NavigationError}\n   */\n  navigationTrigger?: NavigationTrigger;\n\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   */\n  restoredState?: {[k: string]: any; navigationId: number} | null;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    navigationTrigger: NavigationTrigger = 'imperative',\n    /** @docsNotRequired */\n    restoredState: {[k: string]: any; navigationId: number} | null = null,\n  ) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationCancel}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nexport class NavigationEnd extends RouterEvent {\n  readonly type = EventType.NavigationEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * A code for the `NavigationCancel` event of the `Router` to indicate the\n * reason a navigation failed.\n *\n * @publicApi\n */\nexport enum NavigationCancellationCode {\n  /**\n   * A navigation failed because a guard returned a `UrlTree` to redirect.\n   */\n  Redirect,\n  /**\n   * A navigation failed because a more recent navigation started.\n   */\n  SupersededByNewNavigation,\n  /**\n   * A navigation failed because one of the resolvers completed without emitting a value.\n   */\n  NoDataFromResolver,\n  /**\n   * A navigation failed because a guard returned `false`.\n   */\n  GuardRejected,\n}\n\n/**\n * A code for the `NavigationSkipped` event of the `Router` to indicate the\n * reason a navigation was skipped.\n *\n * @publicApi\n */\nexport enum NavigationSkippedCode {\n  /**\n   * A navigation was skipped because the navigation URL was the same as the current Router URL.\n   */\n  IgnoredSameUrlNavigation,\n  /**\n   * A navigation was skipped because the configured `UrlHandlingStrategy` return `false` for both\n   * the current Router URL and the target of the navigation.\n   *\n   * @see {@link UrlHandlingStrategy}\n   */\n  IgnoredByUrlHandlingStrategy,\n}\n\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationError}\n *\n * @publicApi\n */\nexport class NavigationCancel extends RouterEvent {\n  readonly type = EventType.NavigationCancel;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /**\n     * A description of why the navigation was cancelled. For debug purposes only. Use `code`\n     * instead for a stable cancellation reason that can be used in production.\n     */\n    public reason: string,\n    /**\n     * A code to indicate why the navigation was canceled. This cancellation code is stable for\n     * the reason and can be relied on whereas the `reason` string could change and should not be\n     * used in production.\n     */\n    readonly code?: NavigationCancellationCode,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation is skipped.\n * This can happen for a couple reasons including onSameUrlHandling\n * is set to `ignore` and the navigation URL is not different than the\n * current state.\n *\n * @publicApi\n */\nexport class NavigationSkipped extends RouterEvent {\n  readonly type = EventType.NavigationSkipped;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /**\n     * A description of why the navigation was skipped. For debug purposes only. Use `code`\n     * instead for a stable skipped reason that can be used in production.\n     */\n    public reason: string,\n    /**\n     * A code to indicate why the navigation was skipped. This code is stable for\n     * the reason and can be relied on whereas the `reason` string could change and should not be\n     * used in production.\n     */\n    readonly code?: NavigationSkippedCode,\n  ) {\n    super(id, url);\n  }\n}\n\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see {@link NavigationStart}\n * @see {@link NavigationEnd}\n * @see {@link NavigationCancel}\n *\n * @publicApi\n */\nexport class NavigationError extends RouterEvent {\n  readonly type = EventType.NavigationError;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public error: any,\n    /**\n     * The target of the navigation when the error occurred.\n     *\n     * Note that this can be `undefined` because an error could have occurred before the\n     * `RouterStateSnapshot` was created for the navigation.\n     */\n    readonly target?: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nexport class RoutesRecognized extends RouterEvent {\n  readonly type = EventType.RoutesRecognized;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see {@link GuardsCheckEnd}\n *\n * @publicApi\n */\nexport class GuardsCheckStart extends RouterEvent {\n  readonly type = EventType.GuardsCheckStart;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see {@link GuardsCheckStart}\n *\n * @publicApi\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  readonly type = EventType.GuardsCheckEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n    /** @docsNotRequired */\n    public shouldActivate: boolean,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see {@link ResolveEnd}\n *\n * @publicApi\n */\nexport class ResolveStart extends RouterEvent {\n  readonly type = EventType.ResolveStart;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ResolveEnd extends RouterEvent {\n  readonly type = EventType.ResolveEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    id: number,\n    /** @docsNotRequired */\n    url: string,\n    /** @docsNotRequired */\n    public urlAfterRedirects: string,\n    /** @docsNotRequired */\n    public state: RouterStateSnapshot,\n  ) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see {@link RouteConfigLoadEnd}\n *\n * @publicApi\n */\nexport class RouteConfigLoadStart {\n  readonly type = EventType.RouteConfigLoadStart;\n\n  constructor(\n    /** @docsNotRequired */\n    public route: Route,\n  ) {}\n  toString(): string {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see {@link RouteConfigLoadStart}\n *\n * @publicApi\n */\nexport class RouteConfigLoadEnd {\n  readonly type = EventType.RouteConfigLoadEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    public route: Route,\n  ) {}\n  toString(): string {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see {@link ChildActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ChildActivationStart {\n  readonly type = EventType.ChildActivationStart;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see {@link ChildActivationStart}\n * @see {@link ResolveStart}\n * @publicApi\n */\nexport class ChildActivationEnd {\n  readonly type = EventType.ChildActivationEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationEnd}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ActivationStart {\n  readonly type = EventType.ActivationStart;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see {@link ActivationStart}\n * @see {@link ResolveStart}\n *\n * @publicApi\n */\nexport class ActivationEnd {\n  readonly type = EventType.ActivationEnd;\n\n  constructor(\n    /** @docsNotRequired */\n    public snapshot: ActivatedRouteSnapshot,\n  ) {}\n  toString(): string {\n    const path = (this.snapshot.routeConfig && this.snapshot.routeConfig.path) || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nexport class Scroll {\n  readonly type = EventType.Scroll;\n\n  constructor(\n    /** @docsNotRequired */\n    readonly routerEvent: NavigationEnd | NavigationSkipped,\n\n    /** @docsNotRequired */\n    readonly position: [number, number] | null,\n\n    /** @docsNotRequired */\n    readonly anchor: string | null,\n  ) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\nexport class BeforeActivateRoutes {}\nexport class RedirectRequest {\n  constructor(\n    readonly url: UrlTree,\n    readonly navigationBehaviorOptions: NavigationBehaviorOptions | undefined,\n  ) {}\n}\nexport type PrivateRouterEvents = BeforeActivateRoutes | RedirectRequest;\n\n/**\n * Router events that allow you to track the lifecycle of the router.\n *\n * The events occur in the following sequence:\n *\n * * [NavigationStart](api/router/NavigationStart): Navigation starts.\n * * [RouteConfigLoadStart](api/router/RouteConfigLoadStart): Before\n * the router [lazy loads](guide/routing/common-router-tasks#lazy-loading) a route configuration.\n * * [RouteConfigLoadEnd](api/router/RouteConfigLoadEnd): After a route has been lazy loaded.\n * * [RoutesRecognized](api/router/RoutesRecognized): When the router parses the URL\n * and the routes are recognized.\n * * [GuardsCheckStart](api/router/GuardsCheckStart): When the router begins the *guards*\n * phase of routing.\n * * [ChildActivationStart](api/router/ChildActivationStart): When the router\n * begins activating a route's children.\n * * [ActivationStart](api/router/ActivationStart): When the router begins activating a route.\n * * [GuardsCheckEnd](api/router/GuardsCheckEnd): When the router finishes the *guards*\n * phase of routing successfully.\n * * [ResolveStart](api/router/ResolveStart): When the router begins the *resolve*\n * phase of routing.\n * * [ResolveEnd](api/router/ResolveEnd): When the router finishes the *resolve*\n * phase of routing successfully.\n * * [ChildActivationEnd](api/router/ChildActivationEnd): When the router finishes\n * activating a route's children.\n * * [ActivationEnd](api/router/ActivationEnd): When the router finishes activating a route.\n * * [NavigationEnd](api/router/NavigationEnd): When navigation ends successfully.\n * * [NavigationCancel](api/router/NavigationCancel): When navigation is canceled.\n * * [NavigationError](api/router/NavigationError): When navigation fails\n * due to an unexpected error.\n * * [Scroll](api/router/Scroll): When the user scrolls.\n *\n * @publicApi\n */\nexport type Event =\n  | NavigationStart\n  | NavigationEnd\n  | NavigationCancel\n  | NavigationError\n  | RoutesRecognized\n  | GuardsCheckStart\n  | GuardsCheckEnd\n  | RouteConfigLoadStart\n  | RouteConfigLoadEnd\n  | ChildActivationStart\n  | ChildActivationEnd\n  | ActivationStart\n  | ActivationEnd\n  | Scroll\n  | ResolveStart\n  | ResolveEnd\n  | NavigationSkipped;\n\nexport function stringifyEvent(routerEvent: Event): string {\n  switch (routerEvent.type) {\n    case EventType.ActivationEnd:\n      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ActivationStart:\n      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationEnd:\n      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.ChildActivationStart:\n      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ''}')`;\n    case EventType.GuardsCheckEnd:\n      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;\n    case EventType.GuardsCheckStart:\n      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.NavigationCancel:\n      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationSkipped:\n      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.NavigationEnd:\n      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;\n    case EventType.NavigationError:\n      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;\n    case EventType.NavigationStart:\n      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;\n    case EventType.ResolveEnd:\n      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.ResolveStart:\n      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.RouteConfigLoadEnd:\n      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;\n    case EventType.RouteConfigLoadStart:\n      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;\n    case EventType.RoutesRecognized:\n      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;\n    case EventType.Scroll:\n      const pos = routerEvent.position\n        ? `${routerEvent.position[0]}, ${routerEvent.position[1]}`\n        : null;\n      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  createEnvironmentInjector,\n  EnvironmentInjector,\n  isStandalone,\n  Type,\n  ÉµisNgModule as isNgModule,\n  ÉµRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\nimport {Route, Routes} from '../models';\nimport {ActivatedRouteSnapshot} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n\n/**\n * Creates an `EnvironmentInjector` if the `Route` has providers and one does not already exist\n * and returns the injector. Otherwise, if the `Route` does not have `providers`, returns the\n * `currentInjector`.\n *\n * @param route The route that might have providers\n * @param currentInjector The parent injector of the `Route`\n */\nexport function getOrCreateRouteInjectorIfNeeded(\n  route: Route,\n  currentInjector: EnvironmentInjector,\n) {\n  if (route.providers && !route._injector) {\n    route._injector = createEnvironmentInjector(\n      route.providers,\n      currentInjector,\n      `Route: ${route.path}`,\n    );\n  }\n  return route._injector ?? currentInjector;\n}\n\nexport function getLoadedRoutes(route: Route): Route[] | undefined {\n  return route._loadedRoutes;\n}\n\nexport function getLoadedInjector(route: Route): EnvironmentInjector | undefined {\n  return route._loadedInjector;\n}\nexport function getLoadedComponent(route: Route): Type<unknown> | undefined {\n  return route._loadedComponent;\n}\n\nexport function getProvidersInjector(route: Route): EnvironmentInjector | undefined {\n  return route._injector;\n}\n\nexport function validateConfig(\n  config: Routes,\n  parentPath: string = '',\n  requireStandaloneComponents = false,\n): void {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route: Route = config[i];\n    const fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath, requireStandaloneComponents);\n  }\n}\n\nexport function assertStandalone(fullPath: string, component: Type<unknown> | undefined) {\n  if (component && isNgModule(component)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n      `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, ` +\n        `but it must be used with standalone components. Use 'loadChildren' instead.`,\n    );\n  } else if (component && !isStandalone(component)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n      `Invalid configuration of route '${fullPath}'. The component must be standalone.`,\n    );\n  }\n}\n\nfunction validateNode(route: Route, fullPath: string, requireStandaloneComponents: boolean): void {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!route) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `,\n      );\n    }\n    if (Array.isArray(route)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': Array cannot be specified`,\n      );\n    }\n    if (\n      !route.redirectTo &&\n      !route.component &&\n      !route.loadComponent &&\n      !route.children &&\n      !route.loadChildren &&\n      route.outlet &&\n      route.outlet !== PRIMARY_OUTLET\n    ) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`,\n      );\n    }\n    if (route.redirectTo && route.children) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`,\n      );\n    }\n    if (route.redirectTo && route.loadChildren) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`,\n      );\n    }\n    if (route.children && route.loadChildren) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`,\n      );\n    }\n    if (route.redirectTo && (route.component || route.loadComponent)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`,\n      );\n    }\n    if (route.component && route.loadComponent) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`,\n      );\n    }\n    if (route.redirectTo && route.canActivate) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` +\n          `so canActivate will never be executed.`,\n      );\n    }\n    if (route.path && route.matcher) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`,\n      );\n    }\n    if (\n      route.redirectTo === void 0 &&\n      !route.component &&\n      !route.loadComponent &&\n      !route.children &&\n      !route.loadChildren\n    ) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`,\n      );\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`,\n      );\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '${fullPath}': path cannot start with a slash`,\n      );\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTE_CONFIG,\n        `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`,\n      );\n    }\n    if (requireStandaloneComponents) {\n      assertStandalone(fullPath, route.component);\n    }\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath, requireStandaloneComponents);\n  }\n}\n\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nexport function getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nexport function sortByMatchingOutlets(routes: Routes, outletName: string): Routes {\n  const sortedConfig = routes.filter((r) => getOutlet(r) === outletName);\n  sortedConfig.push(...routes.filter((r) => getOutlet(r) !== outletName));\n  return sortedConfig;\n}\n\n/**\n * Gets the first injector in the snapshot's parent tree.\n *\n * If the `Route` has a static list of providers, the returned injector will be the one created from\n * those. If it does not exist, the returned injector may come from the parents, which may be from a\n * loaded config or their static providers.\n *\n * Returns `null` if there is neither this nor any parents have a stored injector.\n *\n * Generally used for retrieving the injector to use for getting tokens for guards/resolvers and\n * also used for getting the correct injector to use for creating components.\n */\nexport function getClosestRouteInjector(\n  snapshot: ActivatedRouteSnapshot | undefined,\n): EnvironmentInjector | null {\n  if (!snapshot) return null;\n\n  // If the current route has its own injector, which is created from the static providers on the\n  // route itself, we should use that. Otherwise, we start at the parent since we do not want to\n  // include the lazy loaded injector from this route.\n  if (snapshot.routeConfig?._injector) {\n    return snapshot.routeConfig._injector;\n  }\n\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    // Note that the order here is important. `_loadedInjector` stored on the route with\n    // `loadChildren: () => NgModule` so it applies to child routes with priority. The `_injector`\n    // is created from the static providers on that parent route, so it applies to the children as\n    // well, but only if there is no lazy loaded NgModuleRef injector.\n    if (route?._loadedInjector) return route._loadedInjector;\n    if (route?._injector) return route._injector;\n  }\n\n  return null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentRef, EnvironmentInjector, Injectable} from '@angular/core';\n\nimport {RouterOutletContract} from './directives/router_outlet';\nimport {ActivatedRoute} from './router_state';\nimport {getClosestRouteInjector} from './utils/config';\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nexport class OutletContext {\n  outlet: RouterOutletContract | null = null;\n  route: ActivatedRoute | null = null;\n  children = new ChildrenOutletContexts(this.rootInjector);\n  attachRef: ComponentRef<any> | null = null;\n  get injector(): EnvironmentInjector {\n    return getClosestRouteInjector(this.route?.snapshot) ?? this.rootInjector;\n  }\n  // TODO(atscott): Only here to avoid a \"breaking\" change in a patch/minor. Remove in v19.\n  set injector(_: EnvironmentInjector) {}\n\n  constructor(private readonly rootInjector: EnvironmentInjector) {}\n}\n\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class ChildrenOutletContexts {\n  // contexts for child outlets, by name.\n  private contexts = new Map<string, OutletContext>();\n\n  /** @nodoc */\n  constructor(private rootInjector: EnvironmentInjector) {}\n\n  /** Called when a `RouterOutlet` directive is instantiated */\n  onChildOutletCreated(childName: string, outlet: RouterOutletContract): void {\n    const context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n\n  /**\n   * Called when a `RouterOutlet` directive is destroyed.\n   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n   * re-created later.\n   */\n  onChildOutletDestroyed(childName: string): void {\n    const context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n      context.attachRef = null;\n    }\n  }\n\n  /**\n   * Called when the corresponding route is deactivated during navigation.\n   * Because the component get destroyed, all children outlet are destroyed.\n   */\n  onOutletDeactivated(): Map<string, OutletContext> {\n    const contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n\n  onOutletReAttached(contexts: Map<string, OutletContext>) {\n    this.contexts = contexts;\n  }\n\n  getOrCreateContext(childName: string): OutletContext {\n    let context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext(this.rootInjector);\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n\n  getContext(childName: string): OutletContext | null {\n    return this.contexts.get(childName) || null;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport class Tree<T> {\n  /** @internal */\n  _root: TreeNode<T>;\n\n  constructor(root: TreeNode<T>) {\n    this._root = root;\n  }\n\n  get root(): T {\n    return this._root.value;\n  }\n\n  /**\n   * @internal\n   */\n  parent(t: T): T | null {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n\n  /**\n   * @internal\n   */\n  children(t: T): T[] {\n    const n = findNode(t, this._root);\n    return n ? n.children.map((t) => t.value) : [];\n  }\n\n  /**\n   * @internal\n   */\n  firstChild(t: T): T | null {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n\n  /**\n   * @internal\n   */\n  siblings(t: T): T[] {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const c = p[p.length - 2].children.map((c) => c.value);\n    return c.filter((cc) => cc !== t);\n  }\n\n  /**\n   * @internal\n   */\n  pathFromRoot(t: T): T[] {\n    return findPath(t, this._root).map((s) => s.value);\n  }\n}\n\n// DFS for the node matching the value\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T> | null {\n  if (value === node.value) return node;\n\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n\n// Return the path to the node with the given value using DFS\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\n\nexport class TreeNode<T> {\n  constructor(\n    public value: T,\n    public children: TreeNode<T>[],\n  ) {}\n\n  toString(): string {\n    return `TreeNode(${this.value})`;\n  }\n}\n\n// Return the list of T indexed by outlet name\nexport function nodeChildrenAsMap<T extends {outlet: string}>(node: TreeNode<T> | null) {\n  const map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach((child) => (map[child.value.outlet] = child));\n  }\n\n  return map;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Data, ResolveData, Route} from './models';\nimport {convertToParamMap, ParamMap, Params, PRIMARY_OUTLET, RouteTitleKey} from './shared';\nimport {equalSegments, UrlSegment} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see {@link ActivatedRoute}\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /** @internal */\n  constructor(\n    root: TreeNode<ActivatedRoute>,\n    /** The current snapshot of the router state */\n    public snapshot: RouterStateSnapshot,\n  ) {\n    super(root);\n    setRouterState(<RouterState>this, root);\n  }\n\n  override toString(): string {\n    return this.snapshot.toString();\n  }\n}\n\nexport function createEmptyState(rootComponent: Type<any> | null): RouterState {\n  const snapshot = createEmptyStateSnapshot(rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject<string | null>('');\n  const activated = new ActivatedRoute(\n    emptyUrl,\n    emptyParams,\n    emptyQueryParams,\n    fragment,\n    emptyData,\n    PRIMARY_OUTLET,\n    rootComponent,\n    snapshot.root,\n  );\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(rootComponent: Type<any> | null): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n    [],\n    emptyParams,\n    emptyQueryParams,\n    fragment,\n    emptyData,\n    PRIMARY_OUTLET,\n    rootComponent,\n    null,\n    {},\n  );\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * Note: the observables in this class only emit when the current and previous values differ based\n * on shallow equality. For example, changing deeply nested properties in resolved `data` will not\n * cause the `ActivatedRoute.data` `Observable` to emit a new value.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @see [Getting route information](guide/routing/common-router-tasks#getting-route-information)\n *\n * @publicApi\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot!: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _routerState!: RouterState;\n  /** @internal */\n  _paramMap?: Observable<ParamMap>;\n  /** @internal */\n  _queryParamMap?: Observable<ParamMap>;\n\n  /** An Observable of the resolved route title */\n  readonly title: Observable<string | undefined>;\n\n  /** An observable of the URL segments matched by this route. */\n  public url: Observable<UrlSegment[]>;\n  /** An observable of the matrix parameters scoped to this route. */\n  public params: Observable<Params>;\n  /** An observable of the query parameters shared by all the routes. */\n  public queryParams: Observable<Params>;\n  /** An observable of the URL fragment shared by all the routes. */\n  public fragment: Observable<string | null>;\n  /** An observable of the static and resolved data of this route. */\n  public data: Observable<Data>;\n\n  /** @internal */\n  constructor(\n    /** @internal */\n    public urlSubject: BehaviorSubject<UrlSegment[]>,\n    /** @internal */\n    public paramsSubject: BehaviorSubject<Params>,\n    /** @internal */\n    public queryParamsSubject: BehaviorSubject<Params>,\n    /** @internal */\n    public fragmentSubject: BehaviorSubject<string | null>,\n    /** @internal */\n    public dataSubject: BehaviorSubject<Data>,\n    /** The outlet name of the route, a constant. */\n    public outlet: string,\n    /** The component of the route, a constant. */\n    public component: Type<any> | null,\n    futureSnapshot: ActivatedRouteSnapshot,\n  ) {\n    this._futureSnapshot = futureSnapshot;\n    this.title = this.dataSubject?.pipe(map((d: Data) => d[RouteTitleKey])) ?? of(undefined);\n    // TODO(atscott): Verify that these can be changed to `.asObservable()` with TGP.\n    this.url = urlSubject;\n    this.params = paramsSubject;\n    this.queryParams = queryParamsSubject;\n    this.fragment = fragmentSubject;\n    this.data = dataSubject;\n  }\n\n  /** The configuration used to match this route. */\n  get routeConfig(): Route | null {\n    return this._futureSnapshot.routeConfig;\n  }\n\n  /** The root of the router state. */\n  get root(): ActivatedRoute {\n    return this._routerState.root;\n  }\n\n  /** The parent of this route in the router state tree. */\n  get parent(): ActivatedRoute | null {\n    return this._routerState.parent(this);\n  }\n\n  /** The first child of this route in the router state tree. */\n  get firstChild(): ActivatedRoute | null {\n    return this._routerState.firstChild(this);\n  }\n\n  /** The children of this route in the router state tree. */\n  get children(): ActivatedRoute[] {\n    return this._routerState.children(this);\n  }\n\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot(): ActivatedRoute[] {\n    return this._routerState.pathFromRoot(this);\n  }\n\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   */\n  get paramMap(): Observable<ParamMap> {\n    this._paramMap ??= this.params.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    return this._paramMap;\n  }\n\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap(): Observable<ParamMap> {\n    this._queryParamMap ??= this.queryParams.pipe(\n      map((p: Params): ParamMap => convertToParamMap(p)),\n    );\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nexport type ParamsInheritanceStrategy = 'emptyOnly' | 'always';\n\n/** @internal */\nexport type Inherited = {\n  params: Params;\n  data: Data;\n  resolve: Data;\n};\n\n/**\n * Returns the inherited params, data, and resolve for a given route.\n *\n * By default, we do not inherit parent data unless the current route is path-less or the parent\n * route is component-less.\n */\nexport function getInherited(\n  route: ActivatedRouteSnapshot,\n  parent: ActivatedRouteSnapshot | null,\n  paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly',\n): Inherited {\n  let inherited: Inherited;\n  const {routeConfig} = route;\n  if (\n    parent !== null &&\n    (paramsInheritanceStrategy === 'always' ||\n      // inherit parent data if route is empty path\n      routeConfig?.path === '' ||\n      // inherit parent data if parent was componentless\n      (!parent.component && !parent.routeConfig?.loadComponent))\n  ) {\n    inherited = {\n      params: {...parent.params, ...route.params},\n      data: {...parent.data, ...route.data},\n      resolve: {\n        // Snapshots are created with data inherited from parent and guards (i.e. canActivate) can\n        // change data because it's not frozen...\n        // This first line could be deleted chose to break/disallow mutating the `data` object in\n        // guards.\n        // Note that data from parents still override this mutated data so anyone relying on this\n        // might be surprised that it doesn't work if parent data is inherited but otherwise does.\n        ...route.data,\n        // Ensure inherited resolved data overrides inherited static data\n        ...parent.data,\n        // static data from the current route overrides any inherited data\n        ...routeConfig?.data,\n        // resolved data from current route overrides everything\n        ...route._resolvedData,\n      },\n    };\n  } else {\n    inherited = {\n      params: {...route.params},\n      data: {...route.data},\n      resolve: {...route.data, ...(route._resolvedData ?? {})},\n    };\n  }\n\n  if (routeConfig && hasStaticTitle(routeConfig)) {\n    inherited.resolve[RouteTitleKey] = routeConfig.title;\n  }\n  return inherited;\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class ActivatedRouteSnapshot {\n  /** The configuration used to match this route **/\n  public readonly routeConfig: Route | null;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  _resolvedData?: Data;\n  /** @internal */\n  _routerState!: RouterStateSnapshot;\n  /** @internal */\n  _paramMap?: ParamMap;\n  /** @internal */\n  _queryParamMap?: ParamMap;\n\n  /** The resolved route title */\n  get title(): string | undefined {\n    // Note: This _must_ be a getter because the data is mutated in the resolvers. Title will not be\n    // available at the time of class instantiation.\n    return this.data?.[RouteTitleKey];\n  }\n\n  /** @internal */\n  constructor(\n    /** The URL segments matched by this route */\n    public url: UrlSegment[],\n    /**\n     *  The matrix parameters scoped to this route.\n     *\n     *  You can compute all params (or data) in the router state or to get params outside\n     *  of an activated component by traversing the `RouterState` tree as in the following\n     *  example:\n     *  ```\n     *  collectRouteParams(router: Router) {\n     *    let params = {};\n     *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n     *    while (stack.length > 0) {\n     *      const route = stack.pop()!;\n     *      params = {...params, ...route.params};\n     *      stack.push(...route.children);\n     *    }\n     *    return params;\n     *  }\n     *  ```\n     */\n    public params: Params,\n    /** The query parameters shared by all the routes */\n    public queryParams: Params,\n    /** The URL fragment shared by all the routes */\n    public fragment: string | null,\n    /** The static and resolved data of this route */\n    public data: Data,\n    /** The outlet name of the route */\n    public outlet: string,\n    /** The component of the route */\n    public component: Type<any> | null,\n    routeConfig: Route | null,\n    resolve: ResolveData,\n  ) {\n    this.routeConfig = routeConfig;\n    this._resolve = resolve;\n  }\n\n  /** The root of the router state */\n  get root(): ActivatedRouteSnapshot {\n    return this._routerState.root;\n  }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRouteSnapshot | null {\n    return this._routerState.parent(this);\n  }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRouteSnapshot | null {\n    return this._routerState.firstChild(this);\n  }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRouteSnapshot[] {\n    return this._routerState.children(this);\n  }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRouteSnapshot[] {\n    return this._routerState.pathFromRoot(this);\n  }\n\n  get paramMap(): ParamMap {\n    this._paramMap ??= convertToParamMap(this.params);\n    return this._paramMap;\n  }\n\n  get queryParamMap(): ParamMap {\n    this._queryParamMap ??= convertToParamMap(this.queryParams);\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    const url = this.url.map((segment) => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /** @internal */\n  constructor(\n    /** The url from which this snapshot was created */\n    public url: string,\n    root: TreeNode<ActivatedRouteSnapshot>,\n  ) {\n    super(root);\n    setRouterState(<RouterStateSnapshot>this, root);\n  }\n\n  override toString(): string {\n    return serializeNode(this._root);\n  }\n}\n\nfunction setRouterState<U, T extends {_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach((c) => setRouterState(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      route.queryParamsSubject.next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      route.fragmentSubject.next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      route.paramsSubject.next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      route.urlSubject.next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      route.dataSubject.next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    route.dataSubject.next(route._futureSnapshot.data);\n  }\n}\n\nexport function equalParamsAndUrlSegments(\n  a: ActivatedRouteSnapshot,\n  b: ActivatedRouteSnapshot,\n): boolean {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n\n  return (\n    equalUrlParams &&\n    !parentsMismatch &&\n    (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent!))\n  );\n}\n\nexport function hasStaticTitle(config: Route) {\n  return typeof config.title === 'string' || config.title === null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  EnvironmentInjector,\n  EventEmitter,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  reflectComponentType,\n  SimpleChanges,\n  ViewContainerRef,\n  ÉµRuntimeError as RuntimeError,\n} from '@angular/core';\nimport {combineLatest, of, Subscription} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport {RuntimeErrorCode} from '../errors';\nimport {Data} from '../models';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n\n/**\n * An interface that defines the contract for developing a component outlet for the `Router`.\n *\n * An outlet acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * A router outlet should register itself with the `Router` via\n * `ChildrenOutletContexts#onChildOutletCreated` and unregister with\n * `ChildrenOutletContexts#onChildOutletDestroyed`. When the `Router` identifies a matched `Route`,\n * it looks for a registered outlet in the `ChildrenOutletContexts` and activates it.\n *\n * @see {@link ChildrenOutletContexts}\n * @publicApi\n */\nexport interface RouterOutletContract {\n  /**\n   * Whether the given outlet is activated.\n   *\n   * An outlet is considered \"activated\" if it has an active component.\n   */\n  isActivated: boolean;\n\n  /** The instance of the activated component or `null` if the outlet is not activated. */\n  component: Object | null;\n\n  /**\n   * The `Data` of the `ActivatedRoute` snapshot.\n   */\n  activatedRouteData: Data;\n\n  /**\n   * The `ActivatedRoute` for the outlet or `null` if the outlet is not activated.\n   */\n  activatedRoute: ActivatedRoute | null;\n\n  /**\n   * Called by the `Router` when the outlet should activate (create a component).\n   */\n  activateWith(activatedRoute: ActivatedRoute, environmentInjector: EnvironmentInjector): void;\n\n  /**\n   * A request to destroy the currently activated component.\n   *\n   * When a `RouteReuseStrategy` indicates that an `ActivatedRoute` should be removed but stored for\n   * later re-use rather than destroyed, the `Router` will call `detach` instead.\n   */\n  deactivate(): void;\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree.\n   *\n   * This is similar to `deactivate`, but the activated component should _not_ be destroyed.\n   * Instead, it is returned so that it can be reattached later via the `attach` method.\n   */\n  detach(): ComponentRef<unknown>;\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree.\n   */\n  attach(ref: ComponentRef<unknown>, activatedRoute: ActivatedRoute): void;\n\n  /**\n   * Emits an activate event when a new component is instantiated\n   **/\n  activateEvents?: EventEmitter<unknown>;\n\n  /**\n   * Emits a deactivate event when a component is destroyed.\n   */\n  deactivateEvents?: EventEmitter<unknown>;\n\n  /**\n   * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n   * previously detached subtree.\n   **/\n  attachEvents?: EventEmitter<unknown>;\n\n  /**\n   * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n   * subtree.\n   */\n  detachEvents?: EventEmitter<unknown>;\n\n  /**\n   * Used to indicate that the outlet is able to bind data from the `Router` to the outlet\n   * component's inputs.\n   *\n   * When this is `undefined` or `false` and the developer has opted in to the\n   * feature using `withComponentInputBinding`, a warning will be logged in dev mode if this outlet\n   * is used in the application.\n   */\n  readonly supportsBindingToComponentInputs?: true;\n}\n\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * deactivate event when a component is destroyed.\n * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the\n * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to\n * detach the subtree.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'\n *   (attach)='onAttach($event)'\n *   (detach)='onDetach($event)'></router-outlet>\n * ```\n *\n * @see {@link RouterLink}\n * @see {@link Route}\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({\n  selector: 'router-outlet',\n  exportAs: 'outlet',\n  standalone: true,\n})\nexport class RouterOutlet implements OnDestroy, OnInit, RouterOutletContract {\n  private activated: ComponentRef<any> | null = null;\n  /** @internal */\n  get activatedComponentRef(): ComponentRef<any> | null {\n    return this.activated;\n  }\n  private _activatedRoute: ActivatedRoute | null = null;\n  /**\n   * The name of the outlet\n   *\n   */\n  @Input() name = PRIMARY_OUTLET;\n\n  @Output('activate') activateEvents = new EventEmitter<any>();\n  @Output('deactivate') deactivateEvents = new EventEmitter<any>();\n  /**\n   * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n   * previously detached subtree.\n   **/\n  @Output('attach') attachEvents = new EventEmitter<unknown>();\n  /**\n   * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n   * subtree.\n   */\n  @Output('detach') detachEvents = new EventEmitter<unknown>();\n\n  private parentContexts = inject(ChildrenOutletContexts);\n  private location = inject(ViewContainerRef);\n  private changeDetector = inject(ChangeDetectorRef);\n  private inputBinder = inject(INPUT_BINDER, {optional: true});\n  /** @nodoc */\n  readonly supportsBindingToComponentInputs = true;\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['name']) {\n      const {firstChange, previousValue} = changes['name'];\n      if (firstChange) {\n        // The first change is handled by ngOnInit. Because ngOnChanges doesn't get called when no\n        // input is set at all, we need to centrally handle the first change there.\n        return;\n      }\n\n      // unregister with the old name\n      if (this.isTrackedInParentContexts(previousValue)) {\n        this.deactivate();\n        this.parentContexts.onChildOutletDestroyed(previousValue);\n      }\n      // register the new name\n      this.initializeOutletWithName();\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    // Ensure that the registered outlet is this one before removing it on the context.\n    if (this.isTrackedInParentContexts(this.name)) {\n      this.parentContexts.onChildOutletDestroyed(this.name);\n    }\n    this.inputBinder?.unsubscribeFromRouteData(this);\n  }\n\n  private isTrackedInParentContexts(outletName: string) {\n    return this.parentContexts.getContext(outletName)?.outlet === this;\n  }\n\n  /** @nodoc */\n  ngOnInit(): void {\n    this.initializeOutletWithName();\n  }\n\n  private initializeOutletWithName() {\n    this.parentContexts.onChildOutletCreated(this.name, this);\n    if (this.activated) {\n      return;\n    }\n\n    // If the outlet was not instantiated at the time the route got activated we need to populate\n    // the outlet when it is initialized (ie inside a NgIf)\n    const context = this.parentContexts.getContext(this.name);\n    if (context?.route) {\n      if (context.attachRef) {\n        // `attachRef` is populated when there is an existing component to mount\n        this.attach(context.attachRef, context.route);\n      } else {\n        // otherwise the component defined in the configuration is created\n        this.activateWith(context.route, context.injector);\n      }\n    }\n  }\n\n  get isActivated(): boolean {\n    return !!this.activated;\n  }\n\n  /**\n   * @returns The currently activated component instance.\n   * @throws An error if the outlet is not activated.\n   */\n  get component(): Object {\n    if (!this.activated)\n      throw new RuntimeError(\n        RuntimeErrorCode.OUTLET_NOT_ACTIVATED,\n        (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated',\n      );\n    return this.activated.instance;\n  }\n\n  get activatedRoute(): ActivatedRoute {\n    if (!this.activated)\n      throw new RuntimeError(\n        RuntimeErrorCode.OUTLET_NOT_ACTIVATED,\n        (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated',\n      );\n    return this._activatedRoute as ActivatedRoute;\n  }\n\n  get activatedRouteData(): Data {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n  detach(): ComponentRef<any> {\n    if (!this.activated)\n      throw new RuntimeError(\n        RuntimeErrorCode.OUTLET_NOT_ACTIVATED,\n        (typeof ngDevMode === 'undefined' || ngDevMode) && 'Outlet is not activated',\n      );\n    this.location.detach();\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    this.detachEvents.emit(cmp.instance);\n    return cmp;\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n    this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n    this.attachEvents.emit(ref.instance);\n  }\n\n  deactivate(): void {\n    if (this.activated) {\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n\n  activateWith(activatedRoute: ActivatedRoute, environmentInjector: EnvironmentInjector) {\n    if (this.isActivated) {\n      throw new RuntimeError(\n        RuntimeErrorCode.OUTLET_ALREADY_ACTIVATED,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          'Cannot activate an already activated outlet',\n      );\n    }\n    this._activatedRoute = activatedRoute;\n    const location = this.location;\n    const snapshot = activatedRoute.snapshot;\n    const component = snapshot.component!;\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const injector = new OutletInjector(activatedRoute, childContexts, location.injector);\n\n    this.activated = location.createComponent(component, {\n      index: location.length,\n      injector,\n      environmentInjector: environmentInjector,\n    });\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    this.inputBinder?.bindActivatedRouteToOutletComponent(this);\n    this.activateEvents.emit(this.activated.instance);\n  }\n}\n\nclass OutletInjector implements Injector {\n  /**\n   * This injector has a special handing for the `ActivatedRoute` and\n   * `ChildrenOutletContexts` tokens: it returns corresponding values for those\n   * tokens dynamically. This behavior is different from the regular injector logic,\n   * when we initialize and store a value, which is later returned for all inject\n   * requests.\n   *\n   * In some cases (e.g. when using `@defer`), this dynamic behavior requires special\n   * handling. This function allows to identify an instance of the `OutletInjector` and\n   * create an instance of it without referring to the class itself (so this logic can\n   * be invoked from the `core` package). This helps to retain dynamic behavior for the\n   * mentioned tokens.\n   *\n   * Note: it's a temporary solution and we should explore how to support this case better.\n   */\n  private __ngOutletInjector(parentInjector: Injector) {\n    return new OutletInjector(this.route, this.childContexts, parentInjector);\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private childContexts: ChildrenOutletContexts,\n    private parent: Injector,\n  ) {}\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n\nexport const INPUT_BINDER = new InjectionToken<RoutedComponentInputBinder>('');\n\n/**\n * Injectable used as a tree-shakable provider for opting in to binding router data to component\n * inputs.\n *\n * The RouterOutlet registers itself with this service when an `ActivatedRoute` is attached or\n * activated. When this happens, the service subscribes to the `ActivatedRoute` observables (params,\n * queryParams, data) and sets the inputs of the component using `ComponentRef.setInput`.\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. If it were not done this way, the previous information would be\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n *\n * The `RouterOutlet` should unregister itself when destroyed via `unsubscribeFromRouteData` so that\n * the subscriptions are cleaned up.\n */\n@Injectable()\nexport class RoutedComponentInputBinder {\n  private outletDataSubscriptions = new Map<RouterOutlet, Subscription>();\n\n  bindActivatedRouteToOutletComponent(outlet: RouterOutlet) {\n    this.unsubscribeFromRouteData(outlet);\n    this.subscribeToRouteData(outlet);\n  }\n\n  unsubscribeFromRouteData(outlet: RouterOutlet) {\n    this.outletDataSubscriptions.get(outlet)?.unsubscribe();\n    this.outletDataSubscriptions.delete(outlet);\n  }\n\n  private subscribeToRouteData(outlet: RouterOutlet) {\n    const {activatedRoute} = outlet;\n    const dataSubscription = combineLatest([\n      activatedRoute.queryParams,\n      activatedRoute.params,\n      activatedRoute.data,\n    ])\n      .pipe(\n        switchMap(([queryParams, params, data], index) => {\n          data = {...queryParams, ...params, ...data};\n          // Get the first result from the data subscription synchronously so it's available to\n          // the component as soon as possible (and doesn't require a second change detection).\n          if (index === 0) {\n            return of(data);\n          }\n          // Promise.resolve is used to avoid synchronously writing the wrong data when\n          // two of the Observables in the `combineLatest` stream emit one after\n          // another.\n          return Promise.resolve(data);\n        }),\n      )\n      .subscribe((data) => {\n        // Outlet may have been deactivated or changed names to be associated with a different\n        // route\n        if (\n          !outlet.isActivated ||\n          !outlet.activatedComponentRef ||\n          outlet.activatedRoute !== activatedRoute ||\n          activatedRoute.component === null\n        ) {\n          this.unsubscribeFromRouteData(outlet);\n          return;\n        }\n\n        const mirror = reflectComponentType(activatedRoute.component);\n        if (!mirror) {\n          this.unsubscribeFromRouteData(outlet);\n          return;\n        }\n\n        for (const {templateName} of mirror.inputs) {\n          outlet.activatedComponentRef.setInput(templateName, data[templateName]);\n        }\n      });\n\n    this.outletDataSubscriptions.set(outlet, dataSubscription);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BehaviorSubject} from 'rxjs';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n  RouterState,\n  RouterStateSnapshot,\n} from './router_state';\nimport {TreeNode} from './utils/tree';\n\nexport function createRouterState(\n  routeReuseStrategy: RouteReuseStrategy,\n  curr: RouterStateSnapshot,\n  prevState: RouterState,\n): RouterState {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n\nfunction createNode(\n  routeReuseStrategy: RouteReuseStrategy,\n  curr: TreeNode<ActivatedRouteSnapshot>,\n  prevState?: TreeNode<ActivatedRoute>,\n): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n  } else {\n    if (routeReuseStrategy.shouldAttach(curr.value)) {\n      // retrieve an activated route that is used to be displayed, but is not currently displayed\n      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n      if (detachedRouteHandle !== null) {\n        const tree = (detachedRouteHandle as DetachedRouteHandleInternal).route;\n        tree.value._futureSnapshot = curr.value;\n        tree.children = curr.children.map((c) => createNode(routeReuseStrategy, c));\n        return tree;\n      }\n    }\n\n    const value = createActivatedRoute(curr.value);\n    const children = curr.children.map((c) => createNode(routeReuseStrategy, c));\n    return new TreeNode<ActivatedRoute>(value, children);\n  }\n}\n\nfunction createOrReuseChildren(\n  routeReuseStrategy: RouteReuseStrategy,\n  curr: TreeNode<ActivatedRouteSnapshot>,\n  prevState: TreeNode<ActivatedRoute>,\n) {\n  return curr.children.map((child) => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n    new BehaviorSubject(c.url),\n    new BehaviorSubject(c.params),\n    new BehaviorSubject(c.queryParams),\n    new BehaviorSubject(c.fragment),\n    new BehaviorSubject(c.data),\n    c.outlet,\n    c.component,\n    c,\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EnvironmentInjector,\n  EnvironmentProviders,\n  NgModuleFactory,\n  Provider,\n  ProviderToken,\n  Type,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\n\n/**\n * How to handle a navigation request to the current URL. One of:\n *\n * - `'ignore'` :  The router ignores the request it is the same as the current state.\n * - `'reload'` : The router processes the URL even if it is not different from the current state.\n * One example of when you might want this option is if a `canMatch` guard depends on\n * application state and initially rejects navigation to a route. After fixing the state, you want\n * to re-navigate to the same URL so the route with the `canMatch` guard can activate.\n *\n * Note that this only configures whether the Route reprocesses the URL and triggers related\n * action and events like redirects, guards, and resolvers. By default, the router re-uses a\n * component instance when it re-navigates to the same component type without visiting a different\n * component first. This behavior is configured by the `RouteReuseStrategy`. In order to reload\n * routed components on same url navigation, you need to set `onSameUrlNavigation` to `'reload'`\n * _and_ provide a `RouteReuseStrategy` which returns `false` for `shouldReuseRoute`. Additionally,\n * resolvers and most guards for routes do not run unless the path or path params changed\n * (configured by `runGuardsAndResolvers`).\n *\n * @publicApi\n * @see {@link RouteReuseStrategy}\n * @see {@link RunGuardsAndResolvers}\n * @see {@link NavigationBehaviorOptions}\n * @see {@link RouterConfigOptions}\n */\nexport type OnSameUrlNavigation = 'reload' | 'ignore';\n\n/**\n * The `InjectionToken` and `@Injectable` classes for guards and resolvers are deprecated in favor\n * of plain JavaScript functions instead.. Dependency injection can still be achieved using the\n * [`inject`](api/core/inject) function from `@angular/core` and an injectable class can be used as\n * a functional guard using [`inject`](api/core/inject): `canActivate: [() =>\n * inject(myGuard).canActivate()]`.\n *\n * @deprecated\n * @see {@link CanMatchFn}\n * @see {@link CanLoadFn}\n * @see {@link CanActivateFn}\n * @see {@link CanActivateChildFn}\n * @see {@link CanDeactivateFn}\n * @see {@link ResolveFn}\n * @see {@link core/inject}\n * @publicApi\n */\nexport type DeprecatedGuard = ProviderToken<any> | any;\n\n/**\n * The supported types that can be returned from a `Router` guard.\n *\n * @see [Routing guide](guide/routing/common-router-tasks#preventing-unauthorized-access)\n * @publicApi\n */\nexport type GuardResult = boolean | UrlTree | RedirectCommand;\n\n/**\n * Can be returned by a `Router` guard to instruct the `Router` to redirect rather than continue\n * processing the path of the in-flight navigation. The `redirectTo` indicates _where_ the new\n * navigation should go to and the optional `navigationBehaviorOptions` can provide more information\n * about _how_ to perform the navigation.\n *\n * ```ts\n * const route: Route = {\n *   path: \"user/:userId\",\n *   component: User,\n *   canActivate: [\n *     () => {\n *       const router = inject(Router);\n *       const authService = inject(AuthenticationService);\n *\n *       if (!authService.isLoggedIn()) {\n *         const loginPath = router.parseUrl(\"/login\");\n *         return new RedirectCommand(loginPath, {\n *           skipLocationChange: \"true\",\n *         });\n *       }\n *\n *       return true;\n *     },\n *   ],\n * };\n * ```\n * @see [Routing guide](guide/routing/common-router-tasks#preventing-unauthorized-access)\n *\n * @publicApi\n */\nexport class RedirectCommand {\n  constructor(\n    readonly redirectTo: UrlTree,\n    readonly navigationBehaviorOptions?: NavigationBehaviorOptions,\n  ) {}\n}\n\n/**\n * Type used to represent a value which may be synchronous or async.\n *\n * @publicApi\n */\nexport type MaybeAsync<T> = T | Observable<T> | Promise<T>;\n\n/**\n * Represents a route configuration for the Router service.\n * An array of `Route` objects, used in `Router.config` and for nested route configurations\n * in `Route.children`.\n *\n * @see {@link Route}\n * @see {@link Router}\n * @see [Router configuration guide](guide/routing/router-reference#configuration)\n * @publicApi\n */\nexport type Routes = Route[];\n\n/**\n * Represents the result of matching URLs with a custom matching function.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @see {@link UrlMatcher}\n * @publicApi\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[];\n  posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * A function for matching a route against URLs. Implement a custom URL matcher\n * for `Route.matcher` when a combination of `path` and `pathMatch`\n * is not expressive enough. Cannot be used together with `path` and `pathMatch`.\n *\n * The function takes the following arguments and returns a `UrlMatchResult` object.\n * * *segments* : An array of URL segments.\n * * *group* : A segment group.\n * * *route* : The route to match against.\n *\n * The following example implementation matches HTML files.\n *\n * ```\n * export function htmlFiles(url: UrlSegment[]) {\n *   return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * export const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n * ```\n *\n * @publicApi\n */\nexport type UrlMatcher = (\n  segments: UrlSegment[],\n  group: UrlSegmentGroup,\n  route: Route,\n) => UrlMatchResult | null;\n\n/**\n *\n * Represents static data associated with a particular route.\n *\n * @see {@link Route#data}\n *\n * @publicApi\n */\nexport type Data = {\n  [key: string | symbol]: any;\n};\n\n/**\n *\n * Represents the resolved data associated with a particular route.\n *\n * Returning a `RedirectCommand` directs the router to cancel the current navigation and redirect to\n * the location provided in the `RedirectCommand`. Note that there are no ordering guarantees when\n * resolvers execute. If multiple resolvers would return a `RedirectCommand`, only the first one\n * returned will be used.\n *\n * @see {@link Route#resolve}\n *\n * @publicApi\n */\nexport type ResolveData = {\n  [key: string | symbol]: ResolveFn<unknown> | DeprecatedGuard;\n};\n\n/**\n * An ES Module object with a default export of the given type.\n *\n * @see {@link Route#loadComponent}\n * @see {@link LoadChildrenCallback}\n *\n * @publicApi\n */\nexport interface DefaultExport<T> {\n  /**\n   * Default exports are bound under the name `\"default\"`, per the ES Module spec:\n   * https://tc39.es/ecma262/#table-export-forms-mapping-to-exportentry-records\n   */\n  default: T;\n}\n\n/**\n *\n * A function that is called to resolve a collection of lazy-loaded routes.\n * Must be an arrow function of the following form:\n * `() => import('...').then(mod => mod.MODULE)`\n * or\n * `() => import('...').then(mod => mod.ROUTES)`\n *\n * For example:\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n * or\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.routes').then(mod => mod.ROUTES),\n * }];\n * ```\n *\n * If the lazy-loaded routes are exported via a `default` export, the `.then` can be omitted:\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.routes'),\n * }];\n * ```\n *\n * @see {@link Route#loadChildren}\n * @publicApi\n */\nexport type LoadChildrenCallback = () =>\n  | Type<any>\n  | NgModuleFactory<any>\n  | Routes\n  | Observable<Type<any> | Routes | DefaultExport<Type<any>> | DefaultExport<Routes>>\n  | Promise<\n      NgModuleFactory<any> | Type<any> | Routes | DefaultExport<Type<any>> | DefaultExport<Routes>\n    >;\n\n/**\n *\n * A function that returns a set of routes to load.\n *\n * @see {@link LoadChildrenCallback}\n * @publicApi\n */\nexport type LoadChildren = LoadChildrenCallback;\n\n/**\n *\n * How to handle query parameters in a router link.\n * One of:\n * - `\"merge\"` : Merge new parameters with current parameters.\n * - `\"preserve\"` : Preserve current parameters.\n * - `\"replace\"` : Replace current parameters with new parameters. This is the default behavior.\n * - `\"\"` : For legacy reasons, the same as `'replace'`.\n *\n * @see {@link UrlCreationOptions#queryParamsHandling}\n * @see {@link RouterLink}\n * @publicApi\n */\nexport type QueryParamsHandling = 'merge' | 'preserve' | 'replace' | '';\n\n/**\n * The type for the function that can be used to handle redirects when the path matches a `Route` config.\n *\n * The `RedirectFunction` does have access to the full\n * `ActivatedRouteSnapshot` interface. Some data are not accurately known\n * at the route matching phase. For example, resolvers are not run until\n * later, so any resolved title would not be populated. The same goes for lazy\n * loaded components. This is also true for all the snapshots up to the\n * root, so properties that include parents (root, parent, pathFromRoot)\n * are also excluded. And naturally, the full route matching hasn't yet\n * happened so firstChild and children are not available either.\n *\n * @see {@link Route#redirectTo}\n * @publicApi\n */\nexport type RedirectFunction = (\n  redirectData: Pick<\n    ActivatedRouteSnapshot,\n    'routeConfig' | 'url' | 'params' | 'queryParams' | 'fragment' | 'data' | 'outlet' | 'title'\n  >,\n) => string | UrlTree;\n\n/**\n * A policy for when to run guards and resolvers on a route.\n *\n * Guards and/or resolvers will always run when a route is activated or deactivated. When a route is\n * unchanged, the default behavior is the same as `paramsChange`.\n *\n * `paramsChange` : Rerun the guards and resolvers when path or\n * path param changes. This does not include query parameters. This option is the default.\n * - `always` : Run on every execution.\n * - `pathParamsChange` : Rerun guards and resolvers when the path params\n * change. This does not compare matrix or query parameters.\n * - `paramsOrQueryParamsChange` : Run when path, matrix, or query parameters change.\n * - `pathParamsOrQueryParamsChange` : Rerun guards and resolvers when the path params\n * change or query params have changed. This does not include matrix parameters.\n *\n * @see {@link Route#runGuardsAndResolvers}\n * @publicApi\n */\nexport type RunGuardsAndResolvers =\n  | 'pathParamsChange'\n  | 'pathParamsOrQueryParamsChange'\n  | 'paramsChange'\n  | 'paramsOrQueryParamsChange'\n  | 'always'\n  | ((from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean);\n\n/**\n * A configuration object that defines a single route.\n * A set of routes are collected in a `Routes` array to define a `Router` configuration.\n * The router attempts to match segments of a given URL against each route,\n * using the configuration options defined in this object.\n *\n * Supports static, parameterized, redirect, and wildcard routes, as well as\n * custom route data and resolve methods.\n *\n * For detailed usage information, see the [Routing Guide](guide/routing/common-router-tasks).\n *\n * @usageNotes\n *\n * ### Simple Configuration\n *\n * The following route specifies that when navigating to, for example,\n * `/team/11/user/bob`, the router creates the 'Team' component\n * with the 'User' child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * ### Multiple Outlets\n *\n * The following route creates sibling components with multiple outlets.\n * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\n * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * ### Wild Cards\n *\n * The following route uses wild-card notation to specify a component\n * that is always instantiated regardless of where you navigate to.\n *\n * ```\n * [{\n *   path: '**',\n *   component: WildcardComponent\n * }]\n * ```\n *\n * ### Redirects\n *\n * The following route uses the `redirectTo` property to ignore a segment of\n * a given URL when looking for a child path.\n *\n * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\n * the Team component with the User child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * The redirect path can be relative, as shown in this example, or absolute.\n * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\n * the result URL is also absolute, '/user/jim'.\n\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any URL segments.\n *\n * In the following configuration, when navigating to\n * `/team/11`, the router instantiates the 'AllUsers' component.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * Empty-path routes can have children. In the following example, when navigating\n * to `/team/11/user/jim`, the router instantiates the wrapper component with\n * the user component in it.\n *\n * Note that an empty path route inherits its parent's parameters and data.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * ### Matching Strategy\n *\n * The default path-match strategy is 'prefix', which means that the router\n * checks URL elements from the left to see if the URL matches a specified path.\n * For example, '/team/11/user' matches 'team/:id'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * You can specify the path-match strategy 'full' to make sure that the path\n * covers the whole unconsumed URL. It is important to do this when redirecting\n * empty-path routes. Otherwise, because an empty path is a prefix of any URL,\n * the router would apply the redirect even when navigating to the redirect destination,\n * creating an endless loop.\n *\n * In the following example, supplying the 'full' `pathMatch` strategy ensures\n * that the router applies the redirect if and only if navigating to '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * You can share parameters between sibling components.\n * For example, suppose that two sibling components should go next to each other,\n * and both of them require an ID parameter. You can accomplish this using a route\n * that does not specify a component at the top level.\n *\n * In the following example, 'MainChild' and 'AuxChild' are siblings.\n * When navigating to 'parent/10/(a//aux:b)', the route instantiates\n * the main child and aux child components next to each other.\n * For this to work, the application component must have the primary and aux outlets defined.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * The router merges the parameters, data, and resolve of the componentless\n * parent into the parameters, data, and resolve of the children.\n *\n * This is especially useful when child components are defined\n * with an empty path string, as in the following example.\n * With this configuration, navigating to '/parent/10' creates\n * the main child and aux components.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up application load time by splitting the application\n * into multiple bundles and loading them on demand.\n * To use lazy loading, provide the `loadChildren` property in the `Route` object,\n * instead of the `children` property.\n *\n * Given the following example route, the router will lazy load\n * the associated module on demand using the browser native import system.\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * @publicApi\n */\nexport interface Route {\n  /**\n   * Used to define a page title for the route. This can be a static string or an `Injectable` that\n   * implements `Resolve`.\n   *\n   * @see {@link TitleStrategy}\n   */\n  title?: string | Type<Resolve<string>> | ResolveFn<string>;\n\n  /**\n   * The path to match against. Cannot be used together with a custom `matcher` function.\n   * A URL string that uses router matching notation.\n   * Can be a wild card (`**`) that matches any URL (see Usage Notes below).\n   * Default is \"/\" (the root path).\n   *\n   */\n  path?: string;\n  /**\n   * The path-matching strategy, one of 'prefix' or 'full'.\n   * Default is 'prefix'.\n   *\n   * By default, the router checks URL elements from the left to see if the URL\n   * matches a given path and stops when there is a config match. Importantly there must still be a\n   * config match for each segment of the URL. For example, '/team/11/user' matches the prefix\n   * 'team/:id' if one of the route's children matches the segment 'user'. That is, the URL\n   * '/team/11/user' matches the config\n   * `{path: 'team/:id', children: [{path: ':user', component: User}]}`\n   * but does not match when there are no children as in `{path: 'team/:id', component: Team}`.\n   *\n   * The path-match strategy 'full' matches against the entire URL.\n   * It is important to do this when redirecting empty-path routes.\n   * Otherwise, because an empty path is a prefix of any URL,\n   * the router would apply the redirect even when navigating\n   * to the redirect destination, creating an endless loop.\n   *\n   */\n  pathMatch?: 'prefix' | 'full';\n  /**\n   * A custom URL-matching function. Cannot be used together with `path`.\n   */\n  matcher?: UrlMatcher;\n  /**\n   * The component to instantiate when the path matches.\n   * Can be empty if child routes specify components.\n   */\n  component?: Type<any>;\n\n  /**\n   * An object specifying a lazy-loaded component.\n   */\n  loadComponent?: () =>\n    | Type<unknown>\n    | Observable<Type<unknown> | DefaultExport<Type<unknown>>>\n    | Promise<Type<unknown> | DefaultExport<Type<unknown>>>;\n  /**\n   * Filled for routes `loadComponent` once the component is loaded.\n   * @internal\n   */\n  _loadedComponent?: Type<unknown>;\n\n  /**\n   * A URL or function that returns a URL to redirect to when the path matches.\n   *\n   * Absolute if the URL begins with a slash (/) or the function returns a `UrlTree`, otherwise\n   * relative to the path URL.\n   *\n   * The `RedirectFunction` is run in an injection context so it can call `inject` to get any\n   * required dependencies.\n   *\n   * When not present, router does not redirect.\n   */\n  redirectTo?: string | RedirectFunction;\n  /**\n   * Name of a `RouterOutlet` object where the component can be placed\n   * when the path matches.\n   */\n  outlet?: string;\n  /**\n   * An array of `CanActivateFn` or DI tokens used to look up `CanActivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * activate the component. By default, any user can activate.\n   *\n   * When using a function rather than DI tokens, the function can call `inject` to get any required\n   * dependencies. This `inject` call must be done in a synchronous context.\n   */\n  canActivate?: Array<CanActivateFn | DeprecatedGuard>;\n  /**\n   * An array of `CanMatchFn` or DI tokens used to look up `CanMatch()`\n   * handlers, in order to determine if the current user is allowed to\n   * match the `Route`. By default, any route can match.\n   *\n   * When using a function rather than DI tokens, the function can call `inject` to get any required\n   * dependencies. This `inject` call must be done in a synchronous context.\n   */\n  canMatch?: Array<CanMatchFn | DeprecatedGuard>;\n  /**\n   * An array of `CanActivateChildFn` or DI tokens used to look up `CanActivateChild()` handlers,\n   * in order to determine if the current user is allowed to activate\n   * a child of the component. By default, any user can activate a child.\n   *\n   * When using a function rather than DI tokens, the function can call `inject` to get any required\n   * dependencies. This `inject` call must be done in a synchronous context.\n   */\n  canActivateChild?: Array<CanActivateChildFn | DeprecatedGuard>;\n  /**\n   * An array of `CanDeactivateFn` or DI tokens used to look up `CanDeactivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * deactivate the component. By default, any user can deactivate.\n   *\n   * When using a function rather than DI tokens, the function can call `inject` to get any required\n   * dependencies. This `inject` call must be done in a synchronous context.\n   */\n  canDeactivate?: Array<CanDeactivateFn<any> | DeprecatedGuard>;\n  /**\n   * An array of `CanLoadFn` or DI tokens used to look up `CanLoad()`\n   * handlers, in order to determine if the current user is allowed to\n   * load the component. By default, any user can load.\n   *\n   * When using a function rather than DI tokens, the function can call `inject` to get any required\n   * dependencies. This `inject` call must be done in a synchronous context.\n   * @deprecated Use `canMatch` instead\n   */\n  canLoad?: Array<CanLoadFn | DeprecatedGuard>;\n  /**\n   * Additional developer-defined data provided to the component via\n   * `ActivatedRoute`. By default, no additional data is passed.\n   */\n  data?: Data;\n  /**\n   * A map of DI tokens used to look up data resolvers. See `Resolve`.\n   */\n  resolve?: ResolveData;\n  /**\n   * An array of child `Route` objects that specifies a nested route\n   * configuration.\n   */\n  children?: Routes;\n  /**\n   * An object specifying lazy-loaded child routes.\n   */\n  loadChildren?: LoadChildren;\n\n  /**\n   * A policy for when to run guards and resolvers on a route.\n   *\n   * Guards and/or resolvers will always run when a route is activated or deactivated. When a route\n   * is unchanged, the default behavior is the same as `paramsChange`.\n   *\n   * `paramsChange` : Rerun the guards and resolvers when path or\n   * path param changes. This does not include query parameters. This option is the default.\n   * - `always` : Run on every execution.\n   * - `pathParamsChange` : Rerun guards and resolvers when the path params\n   * change. This does not compare matrix or query parameters.\n   * - `paramsOrQueryParamsChange` : Run when path, matrix, or query parameters change.\n   * - `pathParamsOrQueryParamsChange` : Rerun guards and resolvers when the path params\n   * change or query params have changed. This does not include matrix parameters.\n   *\n   * @see {@link RunGuardsAndResolvers}\n   */\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n\n  /**\n   * A `Provider` array to use for this `Route` and its `children`.\n   *\n   * The `Router` will create a new `EnvironmentInjector` for this\n   * `Route` and use it for this `Route` and its `children`. If this\n   * route also has a `loadChildren` function which returns an `NgModuleRef`, this injector will be\n   * used as the parent of the lazy loaded module.\n   */\n  providers?: Array<Provider | EnvironmentProviders>;\n\n  /**\n   * Injector created from the static route providers\n   * @internal\n   */\n  _injector?: EnvironmentInjector;\n\n  /**\n   * Filled for routes with `loadChildren` once the routes are loaded.\n   * @internal\n   */\n  _loadedRoutes?: Route[];\n\n  /**\n   * Filled for routes with `loadChildren` once the routes are loaded\n   * @internal\n   */\n  _loadedInjector?: EnvironmentInjector;\n}\n\nexport interface LoadedRouterConfig {\n  routes: Route[];\n  injector: EnvironmentInjector | undefined;\n}\n\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a route can be activated.\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, the current navigation\n * is cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n *\n * The following example implements a `CanActivate` function that checks whether the\n * current user has permission to activate the requested route.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivate {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivate(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): MaybeAsync<GuardResult> {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n * ```\n *\n * Here, the defined guard function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamComponent,\n *         canActivate: [CanActivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): MaybeAsync<GuardResult>;\n}\n\n/**\n * The signature of a function used as a `canActivate` guard on a `Route`.\n *\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, the current navigation\n * is cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n *\n * The following example implements and uses a `CanActivateFn` that checks whether the\n * current user has permission to activate the requested route.\n *\n * ```ts\n * @Injectable()\n * class UserToken {}\n *\n * @Injectable()\n * class PermissionsService {\n *   canActivate(currentUser: UserToken, userId: string): boolean {\n *     return true;\n *   }\n *   canMatch(currentUser: UserToken): boolean {\n *     return true;\n *   }\n * }\n *\n * const canActivateTeam: CanActivateFn = (\n *   route: ActivatedRouteSnapshot,\n *   state: RouterStateSnapshot,\n * ) => {\n *   return inject(PermissionsService).canActivate(inject(UserToken), route.params['id']);\n * };\n * ```\n *\n * Here, the defined guard function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```ts\n * bootstrapApplication(App, {\n *    providers: [\n *      provideRouter([\n *        {\n *          path: 'team/:id',\n *          component: TeamComponent,\n *          canActivate: [canActivateTeam],\n *        },\n *      ]),\n *    ],\n *  });\n * ```\n *\n * @publicApi\n * @see {@link Route}\n */\nexport type CanActivateFn = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => MaybeAsync<GuardResult>;\n\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a child route can be activated.\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, current navigation\n * is cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n *\n * The following example implements a `CanActivateChild` function that checks whether the\n * current user has permission to activate the requested child route.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canActivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanActivateTeam implements CanActivateChild {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canActivateChild(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): MaybeAsync<GuardResult> {\n *     return this.permissions.canActivate(this.currentUser, route.params.id);\n *   }\n * }\n * ```\n *\n * Here, the defined guard function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'root',\n *         canActivateChild: [CanActivateTeam],\n *         children: [\n *           {\n *              path: 'team/:id',\n *              component: TeamComponent\n *           }\n *         ]\n *       }\n *     ])\n *   ],\n *   providers: [CanActivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanActivateChild {\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): MaybeAsync<GuardResult>;\n}\n\n/**\n * The signature of a function used as a `canActivateChild` guard on a `Route`.\n *\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, the current navigation\n * is cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n *\n * The following example implements a `canActivate` function that checks whether the\n * current user has permission to activate the requested route.\n *\n * {@example router/route_functional_guards.ts region=\"CanActivateChildFn\"}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport type CanActivateChildFn = (\n  childRoute: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => MaybeAsync<GuardResult>;\n\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a route can be deactivated.\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, current navigation\n * is cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n *\n * The following example implements a `CanDeactivate` function that checks whether the\n * current user has permission to deactivate the requested route.\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canDeactivate(user: UserToken, id: string): boolean {\n *     return true;\n *   }\n * }\n * ```\n *\n * Here, the defined guard function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```\n *\n * @Injectable()\n * class CanDeactivateTeam implements CanDeactivate<TeamComponent> {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canDeactivate(\n *     component: TeamComponent,\n *     currentRoute: ActivatedRouteSnapshot,\n *     currentState: RouterStateSnapshot,\n *     nextState: RouterStateSnapshot\n *   ): MaybeAsync<GuardResult> {\n *     return this.permissions.canDeactivate(this.currentUser, route.params.id);\n *   }\n * }\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamComponent,\n *         canDeactivate: [CanDeactivateTeam]\n *       }\n *     ])\n *   ],\n *   providers: [CanDeactivateTeam, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport interface CanDeactivate<T> {\n  canDeactivate(\n    component: T,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot,\n  ): MaybeAsync<GuardResult>;\n}\n\n/**\n * The signature of a function used as a `canDeactivate` guard on a `Route`.\n *\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, the current navigation\n * is cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n *\n * The following example implements and uses a `CanDeactivateFn` that checks whether the\n * user component has unsaved changes before navigating away from the route.\n *\n * {@example router/route_functional_guards.ts region=\"CanDeactivateFn\"}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport type CanDeactivateFn<T> = (\n  component: T,\n  currentRoute: ActivatedRouteSnapshot,\n  currentState: RouterStateSnapshot,\n  nextState: RouterStateSnapshot,\n) => MaybeAsync<GuardResult>;\n\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if a `Route` can be matched.\n * If all guards return `true`, navigation continues and the `Router` will use the `Route` during\n * activation. If any guard returns `false`, the `Route` is skipped for matching and other `Route`\n * configurations are processed instead.\n *\n * The following example implements a `CanMatch` function that decides whether the\n * current user has permission to access the users page.\n *\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canAccess(user: UserToken, route: Route, segments: UrlSegment[]): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanMatchTeamSection implements CanMatch {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canMatch(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canAccess(this.currentUser, route, segments);\n *   }\n * }\n * ```\n *\n * Here, the defined guard function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamComponent,\n *         loadChildren: () => import('./team').then(mod => mod.TeamModule),\n *         canMatch: [CanMatchTeamSection]\n *       },\n *       {\n *         path: '**',\n *         component: NotFoundComponent\n *       }\n *     ])\n *   ],\n *   providers: [CanMatchTeamSection, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * If the `CanMatchTeamSection` were to return `false`, the router would continue navigating to the\n * `team/:id` URL, but would load the `NotFoundComponent` because the `Route` for `'team/:id'`\n * could not be used for a URL match but the catch-all `**` `Route` did instead.\n *\n * @publicApi\n */\nexport interface CanMatch {\n  canMatch(route: Route, segments: UrlSegment[]): MaybeAsync<GuardResult>;\n}\n\n/**\n * The signature of a function used as a `canMatch` guard on a `Route`.\n *\n * If all guards return `true`, navigation continues and the `Router` will use the `Route` during\n * activation. If any guard returns `false`, the `Route` is skipped for matching and other `Route`\n * configurations are processed instead.\n *\n * The following example implements and uses a `CanMatchFn` that checks whether the\n * current user has permission to access the team page.\n *\n * {@example router/route_functional_guards.ts region=\"CanMatchFn\"}\n *\n * @param route The route configuration.\n * @param segments The URL segments that have not been consumed by previous parent route evaluations.\n *\n * @publicApi\n * @see {@link Route}\n */\nexport type CanMatchFn = (route: Route, segments: UrlSegment[]) => MaybeAsync<GuardResult>;\n\n/**\n * @description\n *\n * Interface that classes can implement to be a data provider.\n * A data provider class can be used with the router to resolve data during navigation.\n * The interface defines a `resolve()` method that is invoked right after the `ResolveStart`\n * router event. The router waits for the data to be resolved before the route is finally activated.\n *\n * The following example implements a `resolve()` method that retrieves the data\n * needed to activate the requested route.\n *\n * ```\n * @Injectable({ providedIn: 'root' })\n * export class HeroResolver implements Resolve<Hero> {\n *   constructor(private service: HeroService) {}\n *\n *   resolve(\n *     route: ActivatedRouteSnapshot,\n *     state: RouterStateSnapshot\n *   ): Observable<Hero>|Promise<Hero>|Hero {\n *     return this.service.getHero(route.paramMap.get('id'));\n *   }\n * }\n * ```\n *\n * Here, the defined `resolve()` function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```\n\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'detail/:id',\n *         component: HeroDetailComponent,\n *         resolve: {\n *           hero: HeroResolver\n *         }\n *       }\n *     ])\n *   ],\n *   exports: [RouterModule]\n * })\n * export class AppRoutingModule {}\n * ```\n *\n * And you can access to your resolved data from `HeroComponent`:\n *\n * ```\n * @Component({\n *  selector: \"app-hero\",\n *  templateUrl: \"hero.component.html\",\n * })\n * export class HeroComponent {\n *\n *  constructor(private activatedRoute: ActivatedRoute) {}\n *\n *  ngOnInit() {\n *    this.activatedRoute.data.subscribe(({ hero }) => {\n *      // do something with your resolved data ...\n *    })\n *  }\n *\n * }\n * ```\n *\n * @usageNotes\n *\n * When both guard and resolvers are specified, the resolvers are not executed until\n * all guards have run and succeeded.\n * For example, consider the following route configuration:\n *\n * ```\n * {\n *  path: 'base'\n *  canActivate: [BaseGuard],\n *  resolve: {data: BaseDataResolver}\n *  children: [\n *   {\n *     path: 'child',\n *     guards: [ChildGuard],\n *     component: ChildComponent,\n *     resolve: {childData: ChildDataResolver}\n *    }\n *  ]\n * }\n * ```\n * The order of execution is: BaseGuard, ChildGuard, BaseDataResolver, ChildDataResolver.\n *\n * @publicApi\n * @see {@link ResolveFn}\n */\nexport interface Resolve<T> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): MaybeAsync<T>;\n}\n\n/**\n * Function type definition for a data provider.\n *\n * A data provider can be used with the router to resolve data during navigation.\n * The router waits for the data to be resolved before the route is finally activated.\n *\n * A resolver can also redirect a `RedirectCommand` and the Angular router will use\n * it to redirect the current navigation to the new destination.\n *\n * @usageNotes\n *\n * The following example implements a function that retrieves the data\n * needed to activate the requested route.\n *\n * ```ts\n * interface Hero {\n *   name: string;\n * }\n * @Injectable()\n * export class HeroService {\n *   getHero(id: string) {\n *     return {name: `Superman-${id}`};\n *   }\n * }\n *\n * export const heroResolver: ResolveFn<Hero> = (\n *   route: ActivatedRouteSnapshot,\n *   state: RouterStateSnapshot,\n * ) => {\n *   return inject(HeroService).getHero(route.paramMap.get('id')!);\n * };\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideRouter([\n *       {\n *         path: 'detail/:id',\n *         component: HeroDetailComponent,\n *         resolve: {hero: heroResolver},\n *       },\n *     ]),\n *   ],\n * });\n * ```\n *\n * And you can access to your resolved data from `HeroComponent`:\n *\n * ```ts\n * @Component({template: ''})\n * export class HeroDetailComponent {\n *   private activatedRoute = inject(ActivatedRoute);\n *\n *   ngOnInit() {\n *     this.activatedRoute.data.subscribe(({hero}) => {\n *       // do something with your resolved data ...\n *     });\n *   }\n * }\n * ```\n *\n * If resolved data cannot be retrieved, you may want to redirect the user\n * to a new page instead:\n *\n * ```ts\n * export const heroResolver: ResolveFn<Hero> = async (\n *   route: ActivatedRouteSnapshot,\n *   state: RouterStateSnapshot,\n * ) => {\n *   const router = inject(Router);\n *   const heroService = inject(HeroService);\n *   try {\n *     return await heroService.getHero(route.paramMap.get('id')!);\n *   } catch {\n *     return new RedirectCommand(router.parseUrl('/404'));\n *   }\n * };\n * ```\n *\n * When both guard and resolvers are specified, the resolvers are not executed until\n * all guards have run and succeeded.\n * For example, consider the following route configuration:\n *\n * ```\n * {\n *  path: 'base'\n *  canActivate: [baseGuard],\n *  resolve: {data: baseDataResolver}\n *  children: [\n *   {\n *     path: 'child',\n *     canActivate: [childGuard],\n *     component: ChildComponent,\n *     resolve: {childData: childDataResolver}\n *    }\n *  ]\n * }\n * ```\n * The order of execution is: baseGuard, childGuard, baseDataResolver, childDataResolver.\n *\n * @publicApi\n * @see {@link Route}\n */\nexport type ResolveFn<T> = (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => MaybeAsync<T | RedirectCommand>;\n\n/**\n * @description\n *\n * Interface that a class can implement to be a guard deciding if children can be loaded.\n * If all guards return `true`, navigation continues. If any guard returns `false`,\n * navigation is cancelled. If any guard returns a `UrlTree`, current navigation\n * is cancelled and a new navigation starts to the `UrlTree` returned from the guard.\n *\n * The following example implements a `CanLoad` function that decides whether the\n * current user has permission to load requested child routes.\n *\n *\n * ```\n * class UserToken {}\n * class Permissions {\n *   canLoadChildren(user: UserToken, id: string, segments: UrlSegment[]): boolean {\n *     return true;\n *   }\n * }\n *\n * @Injectable()\n * class CanLoadTeamSection implements CanLoad {\n *   constructor(private permissions: Permissions, private currentUser: UserToken) {}\n *\n *   canLoad(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {\n *     return this.permissions.canLoadChildren(this.currentUser, route, segments);\n *   }\n * }\n * ```\n *\n * Here, the defined guard function is provided as part of the `Route` object\n * in the router configuration:\n *\n * ```\n *\n * @NgModule({\n *   imports: [\n *     RouterModule.forRoot([\n *       {\n *         path: 'team/:id',\n *         component: TeamComponent,\n *         loadChildren: () => import('./team').then(mod => mod.TeamModule),\n *         canLoad: [CanLoadTeamSection]\n *       }\n *     ])\n *   ],\n *   providers: [CanLoadTeamSection, UserToken, Permissions]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n * @deprecated Use {@link CanMatch} instead\n */\nexport interface CanLoad {\n  canLoad(route: Route, segments: UrlSegment[]): MaybeAsync<GuardResult>;\n}\n\n/**\n * The signature of a function used as a `canLoad` guard on a `Route`.\n *\n * @publicApi\n * @see {@link CanLoad}\n * @see {@link Route}\n * @see {@link CanMatch}\n * @deprecated Use `Route.canMatch` and `CanMatchFn` instead\n */\nexport type CanLoadFn = (route: Route, segments: UrlSegment[]) => MaybeAsync<GuardResult>;\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the navigation should be handled.\n *\n * @see {@link Router#navigate}\n * @see {@link Router#navigateByUrl}\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n *\n * @publicApi\n */\nexport interface NavigationBehaviorOptions {\n  /**\n   * How to handle a navigation request to the current URL.\n   *\n   * This value is a subset of the options available in `OnSameUrlNavigation` and\n   * will take precedence over the default value set for the `Router`.\n   *\n   * @see {@link OnSameUrlNavigation}\n   * @see {@link RouterConfigOptions}\n   */\n  onSameUrlNavigation?: OnSameUrlNavigation;\n\n  /**\n   * When true, navigates without pushing a new state into history.\n   *\n   * ```\n   * // Navigate silently to /view\n   * this.router.navigate(['/view'], { skipLocationChange: true });\n   * ```\n   */\n  skipLocationChange?: boolean;\n\n  /**\n   * When true, navigates while replacing the current state in history.\n   *\n   * ```\n   * // Navigate to /view\n   * this.router.navigate(['/view'], { replaceUrl: true });\n   * ```\n   */\n  replaceUrl?: boolean;\n\n  /**\n   * Developer-defined state that can be passed to any navigation.\n   * Access this value through the `Navigation.extras` object\n   * returned from the [Router.getCurrentNavigation()\n   * method](api/router/Router#getcurrentnavigation) while a navigation is executing.\n   *\n   * After a navigation completes, the router writes an object containing this\n   * value together with a `navigationId` to `history.state`.\n   * The value is written when `location.go()` or `location.replaceState()`\n   * is called before activating this route.\n   *\n   * Note that `history.state` does not pass an object equality test because\n   * the router adds the `navigationId` on each navigation.\n   *\n   */\n  state?: {[k: string]: any};\n\n  /**\n   * Use this to convey transient information about this particular navigation, such as how it\n   * happened. In this way, it's different from the persisted value `state` that will be set to\n   * `history.state`. This object is assigned directly to the Router's current `Navigation`\n   * (it is not copied or cloned), so it should be mutated with caution.\n   *\n   * One example of how this might be used is to trigger different single-page navigation animations\n   * depending on how a certain route was reached. For example, consider a photo gallery app, where\n   * you can reach the same photo URL and state via various routes:\n   *\n   * - Clicking on it in a gallery view\n   * - Clicking\n   * - \"next\" or \"previous\" when viewing another photo in the album\n   * - Etc.\n   *\n   * Each of these wants a different animation at navigate time. This information doesn't make sense\n   * to store in the persistent URL or history entry state, but it's still important to communicate\n   * from the rest of the application, into the router.\n   *\n   * This information could be used in coordination with the View Transitions feature and the\n   * `onViewTransitionCreated` callback. The information might be used in the callback to set\n   * classes on the document in order to control the transition animations and remove the classes\n   * when the transition has finished animating.\n   */\n  readonly info?: unknown;\n\n  /**\n   * When set, the Router will update the browser's address bar to match the given `UrlTree` instead\n   * of the one used for route matching.\n   *\n   *\n   * @usageNotes\n   *\n   * This feature is useful for redirects, such as redirecting to an error page, without changing\n   * the value that will be displayed in the browser's address bar.\n   *\n   * ```\n   * const canActivate: CanActivateFn = (route: ActivatedRouteSnapshot) => {\n   *   const userService = inject(UserService);\n   *   const router = inject(Router);\n   *   if (!userService.isLoggedIn()) {\n   *     const targetOfCurrentNavigation = router.getCurrentNavigation()?.finalUrl;\n   *     const redirect = router.parseUrl('/404');\n   *     return new RedirectCommand(redirect, {browserUrl: targetOfCurrentNavigation});\n   *   }\n   *   return true;\n   * };\n   * ```\n   *\n   * This value is used directly, without considering any `UrlHandingStrategy`. In this way,\n   * `browserUrl` can also be used to use a different value for the browser URL than what would have\n   * been produced by from the navigation due to `UrlHandlingStrategy.merge`.\n   *\n   * This value only affects the path presented in the browser's address bar. It does not apply to\n   * the internal `Router` state. Information such as `params` and `data` will match the internal\n   * state used to match routes which will be different from the browser URL when using this feature\n   * The same is true when using other APIs that cause the browser URL the differ from the Router\n   * state, such as `skipLocationChange`.\n   */\n  readonly browserUrl?: UrlTree | string;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NavigationCancellationCode} from './events';\nimport {NavigationBehaviorOptions, RedirectCommand} from './models';\nimport {isUrlTree, UrlSerializer, UrlTree} from './url_tree';\n\nexport const NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n\nexport type NavigationCancelingError = Error & {\n  [NAVIGATION_CANCELING_ERROR]: true;\n  cancellationCode: NavigationCancellationCode;\n};\nexport type RedirectingNavigationCancelingError = NavigationCancelingError & {\n  url: UrlTree;\n  navigationBehaviorOptions?: NavigationBehaviorOptions;\n  cancellationCode: NavigationCancellationCode.Redirect;\n};\n\nexport function redirectingNavigationError(\n  urlSerializer: UrlSerializer,\n  redirect: UrlTree | RedirectCommand,\n): RedirectingNavigationCancelingError {\n  const {redirectTo, navigationBehaviorOptions} = isUrlTree(redirect)\n    ? {redirectTo: redirect, navigationBehaviorOptions: undefined}\n    : redirect;\n  const error = navigationCancelingError(\n    ngDevMode && `Redirecting to \"${urlSerializer.serialize(redirectTo)}\"`,\n    NavigationCancellationCode.Redirect,\n  ) as RedirectingNavigationCancelingError;\n  error.url = redirectTo;\n  error.navigationBehaviorOptions = navigationBehaviorOptions;\n  return error;\n}\n\nexport function navigationCancelingError(\n  message: string | null | false,\n  code: NavigationCancellationCode,\n) {\n  const error = new Error(`NavigationCancelingError: ${message || ''}`) as NavigationCancelingError;\n  error[NAVIGATION_CANCELING_ERROR] = true;\n  error.cancellationCode = code;\n  return error;\n}\n\nexport function isRedirectingNavigationCancelingError(\n  error: unknown | RedirectingNavigationCancelingError,\n): error is RedirectingNavigationCancelingError {\n  return (\n    isNavigationCancelingError(error) &&\n    isUrlTree((error as RedirectingNavigationCancelingError).url)\n  );\n}\n\nexport function isNavigationCancelingError(error: unknown): error is NavigationCancelingError {\n  return !!error && (error as NavigationCancelingError)[NAVIGATION_CANCELING_ERROR];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {ActivationEnd, ChildActivationEnd, Event} from '../events';\nimport {NavigationTransition} from '../navigation_transition';\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from '../route_reuse_strategy';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute, advanceActivatedRoute, RouterState} from '../router_state';\nimport {getClosestRouteInjector} from '../utils/config';\nimport {nodeChildrenAsMap, TreeNode} from '../utils/tree';\n\nlet warnedAboutUnsupportedInputBinding = false;\n\nexport const activateRoutes = (\n  rootContexts: ChildrenOutletContexts,\n  routeReuseStrategy: RouteReuseStrategy,\n  forwardEvent: (evt: Event) => void,\n  inputBindingEnabled: boolean,\n): MonoTypeOperatorFunction<NavigationTransition> =>\n  map((t) => {\n    new ActivateRoutes(\n      routeReuseStrategy,\n      t.targetRouterState!,\n      t.currentRouterState,\n      forwardEvent,\n      inputBindingEnabled,\n    ).activate(rootContexts);\n    return t;\n  });\n\nexport class ActivateRoutes {\n  constructor(\n    private routeReuseStrategy: RouteReuseStrategy,\n    private futureState: RouterState,\n    private currState: RouterState,\n    private forwardEvent: (evt: Event) => void,\n    private inputBindingEnabled: boolean,\n  ) {}\n\n  activate(parentContexts: ChildrenOutletContexts): void {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n\n  // De-activate the child route that are not re-used for the future state\n  private deactivateChildRoutes(\n    futureNode: TreeNode<ActivatedRoute>,\n    currNode: TreeNode<ActivatedRoute> | null,\n    contexts: ChildrenOutletContexts,\n  ): void {\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach((futureChild) => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    Object.values(children).forEach((v: TreeNode<ActivatedRoute>) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n\n  private deactivateRoutes(\n    futureNode: TreeNode<ActivatedRoute>,\n    currNode: TreeNode<ActivatedRoute>,\n    parentContext: ChildrenOutletContexts,\n  ): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n\n  private deactivateRouteAndItsChildren(\n    route: TreeNode<ActivatedRoute>,\n    parentContexts: ChildrenOutletContexts,\n  ): void {\n    // If there is no component, the Route is never attached to an outlet (because there is no\n    // component to attach).\n    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n\n  private detachAndStoreRouteSubtree(\n    route: TreeNode<ActivatedRoute>,\n    parentContexts: ChildrenOutletContexts,\n  ): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(route);\n\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n\n  private deactivateRouteAndOutlet(\n    route: TreeNode<ActivatedRoute>,\n    parentContexts: ChildrenOutletContexts,\n  ): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    // The context could be `null` if we are on a componentless route but there may still be\n    // children that need deactivating.\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(route);\n\n    for (const treeNode of Object.values(children)) {\n      this.deactivateRouteAndItsChildren(treeNode, contexts);\n    }\n\n    if (context) {\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n      // Clear the information about the attached component on the context but keep the reference to\n      // the outlet. Clear even if outlet was not yet activated to avoid activating later with old\n      // info\n      context.attachRef = null;\n      context.route = null;\n    }\n  }\n\n  private activateChildRoutes(\n    futureNode: TreeNode<ActivatedRoute>,\n    currNode: TreeNode<ActivatedRoute> | null,\n    contexts: ChildrenOutletContexts,\n  ): void {\n    const children: {[outlet: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach((c) => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n\n  private activateRoutes(\n    futureNode: TreeNode<ActivatedRoute>,\n    currNode: TreeNode<ActivatedRoute>,\n    parentContexts: ChildrenOutletContexts,\n  ): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored = <DetachedRouteHandleInternal>(\n            this.routeReuseStrategy.retrieve(future.snapshot)\n          );\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n\n          advanceActivatedRoute(stored.route.value);\n          this.activateChildRoutes(futureNode, null, context.children);\n        } else {\n          context.attachRef = null;\n          context.route = future;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, context.injector);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const context = parentContexts.getOrCreateContext(future.outlet);\n      const outlet = context.outlet;\n      if (\n        outlet &&\n        this.inputBindingEnabled &&\n        !outlet.supportsBindingToComponentInputs &&\n        !warnedAboutUnsupportedInputBinding\n      ) {\n        console.warn(\n          `'withComponentInputBinding' feature is enabled but ` +\n            `this application is using an outlet that may not support binding to component inputs.`,\n        );\n        warnedAboutUnsupportedInputBinding = true;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, ProviderToken, ÉµisInjectable as isInjectable} from '@angular/core';\n\nimport {RunGuardsAndResolvers} from '../models';\nimport {ChildrenOutletContexts, OutletContext} from '../router_outlet_context';\nimport {\n  ActivatedRouteSnapshot,\n  equalParamsAndUrlSegments,\n  RouterStateSnapshot,\n} from '../router_state';\nimport {equalPath} from '../url_tree';\nimport {shallowEqual} from '../utils/collection';\nimport {nodeChildrenAsMap, TreeNode} from '../utils/tree';\n\nexport class CanActivate {\n  readonly route: ActivatedRouteSnapshot;\n  constructor(public path: ActivatedRouteSnapshot[]) {\n    this.route = this.path[this.path.length - 1];\n  }\n}\n\nexport class CanDeactivate {\n  constructor(\n    public component: Object | null,\n    public route: ActivatedRouteSnapshot,\n  ) {}\n}\n\nexport declare type Checks = {\n  canDeactivateChecks: CanDeactivate[];\n  canActivateChecks: CanActivate[];\n};\n\nexport function getAllRouteGuards(\n  future: RouterStateSnapshot,\n  curr: RouterStateSnapshot,\n  parentContexts: ChildrenOutletContexts,\n) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n\nexport function getCanActivateChild(\n  p: ActivatedRouteSnapshot,\n): {node: ActivatedRouteSnapshot; guards: any[]} | null {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {node: p, guards: canActivateChild};\n}\n\nexport function getTokenOrFunctionIdentity<T>(\n  tokenOrFunction: Function | ProviderToken<T>,\n  injector: Injector,\n): Function | T {\n  const NOT_FOUND = Symbol();\n  const result = injector.get<T | Symbol>(tokenOrFunction, NOT_FOUND);\n  if (result === NOT_FOUND) {\n    if (typeof tokenOrFunction === 'function' && !isInjectable(tokenOrFunction)) {\n      // We think the token is just a function so return it as-is\n      return tokenOrFunction;\n    } else {\n      // This will throw the not found error\n      return injector.get<T>(tokenOrFunction);\n    }\n  }\n  return result as T;\n}\n\nfunction getChildRouteGuards(\n  futureNode: TreeNode<ActivatedRouteSnapshot>,\n  currNode: TreeNode<ActivatedRouteSnapshot> | null,\n  contexts: ChildrenOutletContexts | null,\n  futurePath: ActivatedRouteSnapshot[],\n  checks: Checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: [],\n  },\n): Checks {\n  const prevChildren = nodeChildrenAsMap(currNode);\n\n  // Process the children of the future route\n  futureNode.children.forEach((c) => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n\n  // Process any children left from the current route (not active for the future route)\n  Object.entries(prevChildren).forEach(([k, v]: [string, TreeNode<ActivatedRouteSnapshot>]) =>\n    deactivateRouteAndItsChildren(v, contexts!.getContext(k), checks),\n  );\n\n  return checks;\n}\n\nfunction getRouteGuards(\n  futureNode: TreeNode<ActivatedRouteSnapshot>,\n  currNode: TreeNode<ActivatedRouteSnapshot>,\n  parentContexts: ChildrenOutletContexts | null,\n  futurePath: ActivatedRouteSnapshot[],\n  checks: Checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: [],\n  },\n): Checks {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun = shouldRunGuardsAndResolvers(\n      curr,\n      future,\n      future.routeConfig!.runGuardsAndResolvers,\n    );\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(\n        futureNode,\n        currNode,\n        context ? context.children : null,\n        futurePath,\n        checks,\n      );\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n\n    if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n\n  return checks;\n}\n\nfunction shouldRunGuardsAndResolvers(\n  curr: ActivatedRouteSnapshot,\n  future: ActivatedRouteSnapshot,\n  mode: RunGuardsAndResolvers | undefined,\n): boolean {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n\n    case 'pathParamsOrQueryParamsChange':\n      return (\n        !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams)\n      );\n\n    case 'always':\n      return true;\n\n    case 'paramsOrQueryParamsChange':\n      return (\n        !equalParamsAndUrlSegments(curr, future) ||\n        !shallowEqual(curr.queryParams, future.queryParams)\n      );\n\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\n\nfunction deactivateRouteAndItsChildren(\n  route: TreeNode<ActivatedRouteSnapshot>,\n  context: OutletContext | null,\n  checks: Checks,\n): void {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n\n  Object.entries(children).forEach(([childName, node]) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EmptyError} from 'rxjs';\n\nimport {CanActivateChildFn, CanActivateFn, CanDeactivateFn, CanLoadFn, CanMatchFn} from '../models';\nimport {\n  NAVIGATION_CANCELING_ERROR,\n  NavigationCancelingError,\n  RedirectingNavigationCancelingError,\n} from '../navigation_canceling_error';\nimport {isUrlTree} from '../url_tree';\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nexport function isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n\nexport function isBoolean(v: any): v is boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isCanLoad(guard: any): guard is {canLoad: CanLoadFn} {\n  return guard && isFunction<CanLoadFn>(guard.canLoad);\n}\n\nexport function isCanActivate(guard: any): guard is {canActivate: CanActivateFn} {\n  return guard && isFunction<CanActivateFn>(guard.canActivate);\n}\n\nexport function isCanActivateChild(guard: any): guard is {canActivateChild: CanActivateChildFn} {\n  return guard && isFunction<CanActivateChildFn>(guard.canActivateChild);\n}\n\nexport function isCanDeactivate<T>(guard: any): guard is {canDeactivate: CanDeactivateFn<T>} {\n  return guard && isFunction<CanDeactivateFn<T>>(guard.canDeactivate);\n}\nexport function isCanMatch(guard: any): guard is {canMatch: CanMatchFn} {\n  return guard && isFunction<CanMatchFn>(guard.canMatch);\n}\n\nexport function isEmptyError(e: Error): e is EmptyError {\n  return e instanceof EmptyError || e?.name === 'EmptyError';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {combineLatest, Observable, OperatorFunction} from 'rxjs';\nimport {filter, map, startWith, switchMap, take} from 'rxjs/operators';\n\nimport {GuardResult, RedirectCommand} from '../models';\nimport {isUrlTree, UrlTree} from '../url_tree';\n\nconst INITIAL_VALUE = /* @__PURE__ */ Symbol('INITIAL_VALUE');\ndeclare type INTERIM_VALUES = typeof INITIAL_VALUE | GuardResult;\n\nexport function prioritizedGuardValue(): OperatorFunction<Observable<GuardResult>[], GuardResult> {\n  return switchMap((obs) => {\n    return combineLatest(\n      obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE as INTERIM_VALUES))),\n    ).pipe(\n      map((results: INTERIM_VALUES[]) => {\n        for (const result of results) {\n          if (result === true) {\n            // If result is true, check the next one\n            continue;\n          } else if (result === INITIAL_VALUE) {\n            // If guard has not finished, we need to stop processing.\n            return INITIAL_VALUE;\n          } else if (result === false || isRedirect(result)) {\n            // Result finished and was not true. Return the result.\n            // Note that we only allow false/UrlTree/RedirectCommand. Other values are considered invalid and\n            // ignored.\n            return result;\n          }\n        }\n        // Everything resolved to true. Return true.\n        return true;\n      }),\n      filter((item): item is GuardResult => item !== INITIAL_VALUE),\n      take(1),\n    );\n  });\n}\n\nfunction isRedirect(val: INTERIM_VALUES): val is UrlTree | RedirectCommand {\n  return isUrlTree(val) || val instanceof RedirectCommand;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentInjector, ProviderToken, runInInjectionContext} from '@angular/core';\nimport {\n  concat,\n  defer,\n  from,\n  MonoTypeOperatorFunction,\n  Observable,\n  of,\n  OperatorFunction,\n  pipe,\n} from 'rxjs';\nimport {concatMap, first, map, mergeMap, tap} from 'rxjs/operators';\n\nimport {ActivationStart, ChildActivationStart, Event} from '../events';\nimport {\n  CanActivateChildFn,\n  CanActivateFn,\n  CanDeactivateFn,\n  GuardResult,\n  CanLoadFn,\n  CanMatchFn,\n  Route,\n} from '../models';\nimport {navigationCancelingError, redirectingNavigationError} from '../navigation_canceling_error';\nimport {NavigationTransition} from '../navigation_transition';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from '../router_state';\nimport {isUrlTree, UrlSegment, UrlSerializer, UrlTree} from '../url_tree';\nimport {wrapIntoObservable} from '../utils/collection';\nimport {getClosestRouteInjector} from '../utils/config';\nimport {\n  CanActivate,\n  CanDeactivate,\n  getCanActivateChild,\n  getTokenOrFunctionIdentity,\n} from '../utils/preactivation';\nimport {\n  isBoolean,\n  isCanActivate,\n  isCanActivateChild,\n  isCanDeactivate,\n  isCanLoad,\n  isCanMatch,\n} from '../utils/type_guards';\n\nimport {prioritizedGuardValue} from './prioritized_guard_value';\n\nexport function checkGuards(\n  injector: EnvironmentInjector,\n  forwardEvent?: (evt: Event) => void,\n): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap((t) => {\n    const {\n      targetSnapshot,\n      currentSnapshot,\n      guards: {canActivateChecks, canDeactivateChecks},\n    } = t;\n    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n      return of({...t, guardsResult: true});\n    }\n\n    return runCanDeactivateChecks(\n      canDeactivateChecks,\n      targetSnapshot!,\n      currentSnapshot,\n      injector,\n    ).pipe(\n      mergeMap((canDeactivate) => {\n        return canDeactivate && isBoolean(canDeactivate)\n          ? runCanActivateChecks(targetSnapshot!, canActivateChecks, injector, forwardEvent)\n          : of(canDeactivate);\n      }),\n      map((guardsResult) => ({...t, guardsResult})),\n    );\n  });\n}\n\nfunction runCanDeactivateChecks(\n  checks: CanDeactivate[],\n  futureRSS: RouterStateSnapshot,\n  currRSS: RouterStateSnapshot,\n  injector: EnvironmentInjector,\n) {\n  return from(checks).pipe(\n    mergeMap((check) =>\n      runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector),\n    ),\n    first((result) => {\n      return result !== true;\n    }, true),\n  );\n}\n\nfunction runCanActivateChecks(\n  futureSnapshot: RouterStateSnapshot,\n  checks: CanActivate[],\n  injector: EnvironmentInjector,\n  forwardEvent?: (evt: Event) => void,\n) {\n  return from(checks).pipe(\n    concatMap((check: CanActivate) => {\n      return concat(\n        fireChildActivationStart(check.route.parent, forwardEvent),\n        fireActivationStart(check.route, forwardEvent),\n        runCanActivateChild(futureSnapshot, check.path, injector),\n        runCanActivate(futureSnapshot, check.route, injector),\n      );\n    }),\n    first((result) => {\n      return result !== true;\n    }, true),\n  );\n}\n\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(\n  snapshot: ActivatedRouteSnapshot | null,\n  forwardEvent?: (evt: Event) => void,\n): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of(true);\n}\n\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(\n  snapshot: ActivatedRouteSnapshot | null,\n  forwardEvent?: (evt: Event) => void,\n): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of(true);\n}\n\nfunction runCanActivate(\n  futureRSS: RouterStateSnapshot,\n  futureARS: ActivatedRouteSnapshot,\n  injector: EnvironmentInjector,\n): Observable<GuardResult> {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n\n  const canActivateObservables = canActivate.map(\n    (canActivate: CanActivateFn | ProviderToken<unknown>) => {\n      return defer(() => {\n        const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n        const guard = getTokenOrFunctionIdentity<CanActivate>(canActivate, closestInjector);\n        const guardVal = isCanActivate(guard)\n          ? guard.canActivate(futureARS, futureRSS)\n          : runInInjectionContext(closestInjector, () =>\n              (guard as CanActivateFn)(futureARS, futureRSS),\n            );\n        return wrapIntoObservable(guardVal).pipe(first());\n      });\n    },\n  );\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n\nfunction runCanActivateChild(\n  futureRSS: RouterStateSnapshot,\n  path: ActivatedRouteSnapshot[],\n  injector: EnvironmentInjector,\n): Observable<GuardResult> {\n  const futureARS = path[path.length - 1];\n\n  const canActivateChildGuards = path\n    .slice(0, path.length - 1)\n    .reverse()\n    .map((p) => getCanActivateChild(p))\n    .filter((_) => _ !== null);\n\n  const canActivateChildGuardsMapped = canActivateChildGuards.map((d: any) => {\n    return defer(() => {\n      const guardsMapped = d.guards.map(\n        (canActivateChild: CanActivateChildFn | ProviderToken<unknown>) => {\n          const closestInjector = getClosestRouteInjector(d.node) ?? injector;\n          const guard = getTokenOrFunctionIdentity<{canActivateChild: CanActivateChildFn}>(\n            canActivateChild,\n            closestInjector,\n          );\n          const guardVal = isCanActivateChild(guard)\n            ? guard.canActivateChild(futureARS, futureRSS)\n            : runInInjectionContext(closestInjector, () =>\n                (guard as CanActivateChildFn)(futureARS, futureRSS),\n              );\n          return wrapIntoObservable(guardVal).pipe(first());\n        },\n      );\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n\nfunction runCanDeactivate(\n  component: Object | null,\n  currARS: ActivatedRouteSnapshot,\n  currRSS: RouterStateSnapshot,\n  futureRSS: RouterStateSnapshot,\n  injector: EnvironmentInjector,\n): Observable<GuardResult> {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  const canDeactivateObservables = canDeactivate.map((c: any) => {\n    const closestInjector = getClosestRouteInjector(currARS) ?? injector;\n    const guard = getTokenOrFunctionIdentity<any>(c, closestInjector);\n    const guardVal = isCanDeactivate(guard)\n      ? guard.canDeactivate(component, currARS, currRSS, futureRSS)\n      : runInInjectionContext(closestInjector, () =>\n          (guard as CanDeactivateFn<any>)(component, currARS, currRSS, futureRSS),\n        );\n    return wrapIntoObservable(guardVal).pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n\nexport function runCanLoadGuards(\n  injector: EnvironmentInjector,\n  route: Route,\n  segments: UrlSegment[],\n  urlSerializer: UrlSerializer,\n): Observable<boolean> {\n  const canLoad = route.canLoad;\n  if (canLoad === undefined || canLoad.length === 0) {\n    return of(true);\n  }\n\n  const canLoadObservables = canLoad.map((injectionToken: any) => {\n    const guard = getTokenOrFunctionIdentity<any>(injectionToken, injector);\n    const guardVal = isCanLoad(guard)\n      ? guard.canLoad(route, segments)\n      : runInInjectionContext(injector, () => (guard as CanLoadFn)(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n\n  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\n\nfunction redirectIfUrlTree(urlSerializer: UrlSerializer): OperatorFunction<GuardResult, boolean> {\n  return pipe(\n    tap((result: GuardResult) => {\n      if (typeof result === 'boolean') return;\n\n      throw redirectingNavigationError(urlSerializer, result);\n    }),\n    map((result) => result === true),\n  );\n}\n\nexport function runCanMatchGuards(\n  injector: EnvironmentInjector,\n  route: Route,\n  segments: UrlSegment[],\n  urlSerializer: UrlSerializer,\n): Observable<GuardResult> {\n  const canMatch = route.canMatch;\n  if (!canMatch || canMatch.length === 0) return of(true);\n\n  const canMatchObservables = canMatch.map((injectionToken) => {\n    const guard = getTokenOrFunctionIdentity(injectionToken, injector);\n    const guardVal = isCanMatch(guard)\n      ? guard.canMatch(route, segments)\n      : runInInjectionContext(injector, () => (guard as CanMatchFn)(route, segments));\n    return wrapIntoObservable(guardVal);\n  });\n\n  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, runInInjectionContext, ÉµRuntimeError as RuntimeError} from '@angular/core';\nimport {Observable, of, throwError} from 'rxjs';\n\nimport {RuntimeErrorCode} from './errors';\nimport {NavigationCancellationCode} from './events';\nimport {LoadedRouterConfig, RedirectFunction, Route} from './models';\nimport {navigationCancelingError} from './navigation_canceling_error';\nimport {ActivatedRouteSnapshot} from './router_state';\nimport {Params, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\n\nexport class NoMatch {\n  public segmentGroup: UrlSegmentGroup | null;\n\n  constructor(segmentGroup?: UrlSegmentGroup) {\n    this.segmentGroup = segmentGroup || null;\n  }\n}\n\nexport class AbsoluteRedirect extends Error {\n  constructor(public urlTree: UrlTree) {\n    super();\n  }\n}\n\nexport function noMatch(segmentGroup: UrlSegmentGroup): Observable<any> {\n  return throwError(new NoMatch(segmentGroup));\n}\n\nexport function absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return throwError(new AbsoluteRedirect(newTree));\n}\n\nexport function namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return throwError(\n    new RuntimeError(\n      RuntimeErrorCode.NAMED_OUTLET_REDIRECT,\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`,\n    ),\n  );\n}\n\nexport function canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return throwError(\n    navigationCancelingError(\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`,\n      NavigationCancellationCode.GuardRejected,\n    ),\n  );\n}\n\nexport class ApplyRedirects {\n  constructor(\n    private urlSerializer: UrlSerializer,\n    private urlTree: UrlTree,\n  ) {}\n\n  lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(`${route.redirectTo!}`);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n\n  applyRedirectCommands(\n    segments: UrlSegment[],\n    redirectTo: string | RedirectFunction,\n    posParams: {[k: string]: UrlSegment},\n    currentSnapshot: ActivatedRouteSnapshot,\n    injector: Injector,\n  ): UrlTree {\n    if (typeof redirectTo !== 'string') {\n      const redirectToFn = redirectTo;\n      const {queryParams, fragment, routeConfig, url, outlet, params, data, title} =\n        currentSnapshot;\n      const newRedirect = runInInjectionContext(injector, () =>\n        redirectToFn({params, data, queryParams, fragment, routeConfig, url, outlet, title}),\n      );\n      if (newRedirect instanceof UrlTree) {\n        throw new AbsoluteRedirect(newRedirect);\n      }\n\n      redirectTo = newRedirect;\n    }\n\n    const newTree = this.applyRedirectCreateUrlTree(\n      redirectTo,\n      this.urlSerializer.parse(redirectTo),\n      segments,\n      posParams,\n    );\n    if (redirectTo[0] === '/') {\n      throw new AbsoluteRedirect(newTree);\n    }\n    return newTree;\n  }\n\n  applyRedirectCreateUrlTree(\n    redirectTo: string,\n    urlTree: UrlTree,\n    segments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment},\n  ): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n      newRoot,\n      this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n      urlTree.fragment,\n    );\n  }\n\n  createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    Object.entries(redirectToParams).forEach(([k, v]) => {\n      const copySourceValue = typeof v === 'string' && v[0] === ':';\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  createSegmentGroup(\n    redirectTo: string,\n    group: UrlSegmentGroup,\n    segments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment},\n  ): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    Object.entries(group.children).forEach(([name, child]) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  createSegments(\n    redirectTo: string,\n    redirectToSegments: UrlSegment[],\n    actualSegments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment},\n  ): UrlSegment[] {\n    return redirectToSegments.map((s) =>\n      s.path[0] === ':'\n        ? this.findPosParam(redirectTo, s, posParams)\n        : this.findOrReturn(s, actualSegments),\n    );\n  }\n\n  findPosParam(\n    redirectTo: string,\n    redirectToUrlSegment: UrlSegment,\n    posParams: {[k: string]: UrlSegment},\n  ): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_REDIRECT,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`,\n      );\n    return pos;\n  }\n\n  findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentInjector} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Route} from '../models';\nimport {runCanMatchGuards} from '../operators/check_guards';\nimport {defaultUrlMatcher, PRIMARY_OUTLET} from '../shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer} from '../url_tree';\n\nimport {last} from './collection';\nimport {getOrCreateRouteInjectorIfNeeded, getOutlet} from './config';\n\nexport interface MatchResult {\n  matched: boolean;\n  consumedSegments: UrlSegment[];\n  remainingSegments: UrlSegment[];\n  parameters: {[k: string]: string};\n  positionalParamSegments: {[k: string]: UrlSegment};\n}\n\nconst noMatch: MatchResult = {\n  matched: false,\n  consumedSegments: [],\n  remainingSegments: [],\n  parameters: {},\n  positionalParamSegments: {},\n};\n\nexport function matchWithChecks(\n  segmentGroup: UrlSegmentGroup,\n  route: Route,\n  segments: UrlSegment[],\n  injector: EnvironmentInjector,\n  urlSerializer: UrlSerializer,\n): Observable<MatchResult> {\n  const result = match(segmentGroup, route, segments);\n  if (!result.matched) {\n    return of(result);\n  }\n\n  // Only create the Route's `EnvironmentInjector` if it matches the attempted\n  // navigation\n  injector = getOrCreateRouteInjectorIfNeeded(route, injector);\n  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(\n    map((v) => (v === true ? result : {...noMatch})),\n  );\n}\n\nexport function match(\n  segmentGroup: UrlSegmentGroup,\n  route: Route,\n  segments: UrlSegment[],\n): MatchResult {\n  if (route.path === '**') {\n    return createWildcardMatchResult(segments);\n  }\n\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {...noMatch};\n    }\n\n    return {\n      matched: true,\n      consumedSegments: [],\n      remainingSegments: segments,\n      parameters: {},\n      positionalParamSegments: {},\n    };\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return {...noMatch};\n\n  const posParams: {[n: string]: string} = {};\n  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {\n    posParams[k] = v.path;\n  });\n  const parameters =\n    res.consumed.length > 0\n      ? {...posParams, ...res.consumed[res.consumed.length - 1].parameters}\n      : posParams;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    remainingSegments: segments.slice(res.consumed.length),\n    // TODO(atscott): investigate combining parameters and positionalParamSegments\n    parameters,\n    positionalParamSegments: res.posParams ?? {},\n  };\n}\n\nfunction createWildcardMatchResult(segments: UrlSegment[]): MatchResult {\n  return {\n    matched: true,\n    parameters: segments.length > 0 ? last(segments)!.parameters : {},\n    consumedSegments: segments,\n    remainingSegments: [],\n    positionalParamSegments: {},\n  };\n}\n\nexport function split(\n  segmentGroup: UrlSegmentGroup,\n  consumedSegments: UrlSegment[],\n  slicedSegments: UrlSegment[],\n  config: Route[],\n) {\n  if (\n    slicedSegments.length > 0 &&\n    containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)\n  ) {\n    const s = new UrlSegmentGroup(\n      consumedSegments,\n      createChildrenForEmptyPaths(\n        config,\n        new UrlSegmentGroup(slicedSegments, segmentGroup.children),\n      ),\n    );\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (\n    slicedSegments.length === 0 &&\n    containsEmptyPathMatches(segmentGroup, slicedSegments, config)\n  ) {\n    const s = new UrlSegmentGroup(\n      segmentGroup.segments,\n      addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children),\n    );\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  return {segmentGroup: s, slicedSegments};\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n  segmentGroup: UrlSegmentGroup,\n  slicedSegments: UrlSegment[],\n  routes: Route[],\n  children: {[name: string]: UrlSegmentGroup},\n): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptyPaths(\n  routes: Route[],\n  primarySegment: UrlSegmentGroup,\n): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n  segmentGroup: UrlSegmentGroup,\n  slicedSegments: UrlSegment[],\n  routes: Route[],\n): boolean {\n  return routes.some(\n    (r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET,\n  );\n}\n\nfunction containsEmptyPathMatches(\n  segmentGroup: UrlSegmentGroup,\n  slicedSegments: UrlSegment[],\n  routes: Route[],\n): boolean {\n  return routes.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n\nexport function emptyPathMatch(\n  segmentGroup: UrlSegmentGroup,\n  slicedSegments: UrlSegment[],\n  r: Route,\n): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '';\n}\n\nexport function noLeftoversInUrl(\n  segmentGroup: UrlSegmentGroup,\n  segments: UrlSegment[],\n  outlet: string,\n): boolean {\n  return segments.length === 0 && !segmentGroup.children[outlet];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentInjector, Type, ÉµRuntimeError as RuntimeError} from '@angular/core';\nimport {from, Observable, of} from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  defaultIfEmpty,\n  first,\n  last,\n  map,\n  mergeMap,\n  scan,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\nimport {AbsoluteRedirect, ApplyRedirects, canLoadFails, noMatch, NoMatch} from './apply_redirects';\nimport {createUrlTreeFromSnapshot} from './create_url_tree';\nimport {RuntimeErrorCode} from './errors';\nimport {Data, LoadedRouterConfig, ResolveData, Route, Routes} from './models';\nimport {runCanLoadGuards} from './operators/check_guards';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {\n  ActivatedRouteSnapshot,\n  getInherited,\n  ParamsInheritanceStrategy,\n  RouterStateSnapshot,\n} from './router_state';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {getOutlet, sortByMatchingOutlets} from './utils/config';\nimport {\n  emptyPathMatch,\n  match,\n  matchWithChecks,\n  noLeftoversInUrl,\n  split,\n} from './utils/config_matching';\nimport {TreeNode} from './utils/tree';\nimport {isEmptyError} from './utils/type_guards';\n\n/**\n * Class used to indicate there were no additional route config matches but that all segments of\n * the URL were consumed during matching so the route was URL matched. When this happens, we still\n * try to match child configs in case there are empty path children.\n */\nclass NoLeftoversInUrl {}\n\nexport function recognize(\n  injector: EnvironmentInjector,\n  configLoader: RouterConfigLoader,\n  rootComponentType: Type<any> | null,\n  config: Routes,\n  urlTree: UrlTree,\n  urlSerializer: UrlSerializer,\n  paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly',\n): Observable<{state: RouterStateSnapshot; tree: UrlTree}> {\n  return new Recognizer(\n    injector,\n    configLoader,\n    rootComponentType,\n    config,\n    urlTree,\n    paramsInheritanceStrategy,\n    urlSerializer,\n  ).recognize();\n}\n\nconst MAX_ALLOWED_REDIRECTS = 31;\n\nexport class Recognizer {\n  private applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);\n  private absoluteRedirectCount = 0;\n  allowRedirects = true;\n\n  constructor(\n    private injector: EnvironmentInjector,\n    private configLoader: RouterConfigLoader,\n    private rootComponentType: Type<any> | null,\n    private config: Routes,\n    private urlTree: UrlTree,\n    private paramsInheritanceStrategy: ParamsInheritanceStrategy,\n    private readonly urlSerializer: UrlSerializer,\n  ) {}\n\n  private noMatchError(e: NoMatch): RuntimeError<RuntimeErrorCode.NO_MATCH> {\n    return new RuntimeError(\n      RuntimeErrorCode.NO_MATCH,\n      typeof ngDevMode === 'undefined' || ngDevMode\n        ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'`\n        : `'${e.segmentGroup}'`,\n    );\n  }\n\n  recognize(): Observable<{state: RouterStateSnapshot; tree: UrlTree}> {\n    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n\n    return this.match(rootSegmentGroup).pipe(\n      map(({children, rootSnapshot}) => {\n        const rootNode = new TreeNode(rootSnapshot, children);\n        const routeState = new RouterStateSnapshot('', rootNode);\n        const tree = createUrlTreeFromSnapshot(\n          rootSnapshot,\n          [],\n          this.urlTree.queryParams,\n          this.urlTree.fragment,\n        );\n        // https://github.com/angular/angular/issues/47307\n        // Creating the tree stringifies the query params\n        // We don't want to do this here so reassign them to the original.\n        tree.queryParams = this.urlTree.queryParams;\n        routeState.url = this.urlSerializer.serialize(tree);\n        return {state: routeState, tree};\n      }),\n    );\n  }\n\n  private match(rootSegmentGroup: UrlSegmentGroup): Observable<{\n    children: TreeNode<ActivatedRouteSnapshot>[];\n    rootSnapshot: ActivatedRouteSnapshot;\n  }> {\n    // Use Object.freeze to prevent readers of the Router state from modifying it outside\n    // of a navigation, resulting in the router being out of sync with the browser.\n    const rootSnapshot = new ActivatedRouteSnapshot(\n      [],\n      Object.freeze({}),\n      Object.freeze({...this.urlTree.queryParams}),\n      this.urlTree.fragment,\n      Object.freeze({}),\n      PRIMARY_OUTLET,\n      this.rootComponentType,\n      null,\n      {},\n    );\n    return this.processSegmentGroup(\n      this.injector,\n      this.config,\n      rootSegmentGroup,\n      PRIMARY_OUTLET,\n      rootSnapshot,\n    ).pipe(\n      map((children) => {\n        return {children, rootSnapshot};\n      }),\n      catchError((e: any) => {\n        if (e instanceof AbsoluteRedirect) {\n          this.urlTree = e.urlTree;\n          return this.match(e.urlTree.root);\n        }\n        if (e instanceof NoMatch) {\n          throw this.noMatchError(e);\n        }\n\n        throw e;\n      }),\n    );\n  }\n\n  processSegmentGroup(\n    injector: EnvironmentInjector,\n    config: Route[],\n    segmentGroup: UrlSegmentGroup,\n    outlet: string,\n    parentRoute: ActivatedRouteSnapshot,\n  ): Observable<TreeNode<ActivatedRouteSnapshot>[]> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(injector, config, segmentGroup, parentRoute);\n    }\n\n    return this.processSegment(\n      injector,\n      config,\n      segmentGroup,\n      segmentGroup.segments,\n      outlet,\n      true,\n      parentRoute,\n    ).pipe(map((child) => (child instanceof TreeNode ? [child] : [])));\n  }\n\n  /**\n   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n   * we cannot find a match for _any_ of the children.\n   *\n   * @param config - The `Routes` to match against\n   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n   *     config.\n   */\n  processChildren(\n    injector: EnvironmentInjector,\n    config: Route[],\n    segmentGroup: UrlSegmentGroup,\n    parentRoute: ActivatedRouteSnapshot,\n  ): Observable<TreeNode<ActivatedRouteSnapshot>[]> {\n    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n    // because an absolute redirect from the primary outlet takes precedence.\n    const childOutlets: string[] = [];\n    for (const child of Object.keys(segmentGroup.children)) {\n      if (child === 'primary') {\n        childOutlets.unshift(child);\n      } else {\n        childOutlets.push(child);\n      }\n    }\n    return from(childOutlets).pipe(\n      concatMap((childOutlet) => {\n        const child = segmentGroup.children[childOutlet];\n        // Sort the config so that routes with outlets that match the one being activated\n        // appear first, followed by routes for other outlets, which might match if they have\n        // an empty path.\n        const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n        return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);\n      }),\n      scan((children, outletChildren) => {\n        children.push(...outletChildren);\n        return children;\n      }),\n      defaultIfEmpty(null as TreeNode<ActivatedRouteSnapshot>[] | null),\n      last(),\n      mergeMap((children) => {\n        if (children === null) return noMatch(segmentGroup);\n        // Because we may have matched two outlets to the same empty path segment, we can have\n        // multiple activated results for the same outlet. We should merge the children of\n        // these results so the final return value is only one `TreeNode` per outlet.\n        const mergedChildren = mergeEmptyPathMatches(children);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // This should really never happen - we are only taking the first match for each\n          // outlet and merge the empty path matches.\n          checkOutletNameUniqueness(mergedChildren);\n        }\n        sortActivatedRouteSnapshots(mergedChildren);\n        return of(mergedChildren);\n      }),\n    );\n  }\n\n  processSegment(\n    injector: EnvironmentInjector,\n    routes: Route[],\n    segmentGroup: UrlSegmentGroup,\n    segments: UrlSegment[],\n    outlet: string,\n    allowRedirects: boolean,\n    parentRoute: ActivatedRouteSnapshot,\n  ): Observable<TreeNode<ActivatedRouteSnapshot> | NoLeftoversInUrl> {\n    return from(routes).pipe(\n      concatMap((r) => {\n        return this.processSegmentAgainstRoute(\n          r._injector ?? injector,\n          routes,\n          r,\n          segmentGroup,\n          segments,\n          outlet,\n          allowRedirects,\n          parentRoute,\n        ).pipe(\n          catchError((e: any) => {\n            if (e instanceof NoMatch) {\n              return of(null);\n            }\n            throw e;\n          }),\n        );\n      }),\n      first((x): x is TreeNode<ActivatedRouteSnapshot> | NoLeftoversInUrl => !!x),\n      catchError((e) => {\n        if (isEmptyError(e)) {\n          if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return of(new NoLeftoversInUrl());\n          }\n          return noMatch(segmentGroup);\n        }\n        throw e;\n      }),\n    );\n  }\n\n  processSegmentAgainstRoute(\n    injector: EnvironmentInjector,\n    routes: Route[],\n    route: Route,\n    rawSegment: UrlSegmentGroup,\n    segments: UrlSegment[],\n    outlet: string,\n    allowRedirects: boolean,\n    parentRoute: ActivatedRouteSnapshot,\n  ): Observable<TreeNode<ActivatedRouteSnapshot> | NoLeftoversInUrl> {\n    // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n    // a config like\n    // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n    // or even\n    // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n    //\n    // The exception here is when the segment outlet is for the primary outlet. This would\n    // result in a match inside the named outlet because all children there are written as primary\n    // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n    // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n    // This should only match if the url is `/(x:b)`.\n    if (\n      getOutlet(route) !== outlet &&\n      (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))\n    ) {\n      return noMatch(rawSegment);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(\n        injector,\n        rawSegment,\n        route,\n        segments,\n        outlet,\n        parentRoute,\n      );\n    }\n\n    if (this.allowRedirects && allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n        injector,\n        rawSegment,\n        routes,\n        route,\n        segments,\n        outlet,\n        parentRoute,\n      );\n    }\n\n    return noMatch(rawSegment);\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n    injector: EnvironmentInjector,\n    segmentGroup: UrlSegmentGroup,\n    routes: Route[],\n    route: Route,\n    segments: UrlSegment[],\n    outlet: string,\n    parentRoute: ActivatedRouteSnapshot,\n  ): Observable<TreeNode<ActivatedRouteSnapshot> | NoLeftoversInUrl> {\n    const {matched, parameters, consumedSegments, positionalParamSegments, remainingSegments} =\n      match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    // TODO(atscott): Move all of this under an if(ngDevMode) as a breaking change and allow stack\n    // size exceeded in production\n    if (typeof route.redirectTo === 'string' && route.redirectTo[0] === '/') {\n      this.absoluteRedirectCount++;\n      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {\n        if (ngDevMode) {\n          throw new RuntimeError(\n            RuntimeErrorCode.INFINITE_REDIRECT,\n            `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.\\n` +\n              `This is currently a dev mode only error but will become a` +\n              ` call stack size exceeded error in production in a future major version.`,\n          );\n        }\n        this.allowRedirects = false;\n      }\n    }\n    const currentSnapshot = new ActivatedRouteSnapshot(\n      segments,\n      parameters,\n      Object.freeze({...this.urlTree.queryParams}),\n      this.urlTree.fragment,\n      getData(route),\n      getOutlet(route),\n      route.component ?? route._loadedComponent ?? null,\n      route,\n      getResolve(route),\n    );\n    const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);\n    currentSnapshot.params = Object.freeze(inherited.params);\n    currentSnapshot.data = Object.freeze(inherited.data);\n    const newTree = this.applyRedirects.applyRedirectCommands(\n      consumedSegments,\n      route.redirectTo!,\n      positionalParamSegments,\n      currentSnapshot,\n      injector,\n    );\n\n    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(\n      mergeMap((newSegments: UrlSegment[]) => {\n        return this.processSegment(\n          injector,\n          routes,\n          segmentGroup,\n          newSegments.concat(remainingSegments),\n          outlet,\n          false,\n          parentRoute,\n        );\n      }),\n    );\n  }\n\n  matchSegmentAgainstRoute(\n    injector: EnvironmentInjector,\n    rawSegment: UrlSegmentGroup,\n    route: Route,\n    segments: UrlSegment[],\n    outlet: string,\n    parentRoute: ActivatedRouteSnapshot,\n  ): Observable<TreeNode<ActivatedRouteSnapshot>> {\n    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);\n    if (route.path === '**') {\n      // Prior versions of the route matching algorithm would stop matching at the wildcard route.\n      // We should investigate a better strategy for any existing children. Otherwise, these\n      // child segments are silently dropped from the navigation.\n      // https://github.com/angular/angular/issues/40089\n      rawSegment.children = {};\n    }\n\n    return matchResult.pipe(\n      switchMap((result) => {\n        if (!result.matched) {\n          return noMatch(rawSegment);\n        }\n        // If the route has an injector created from providers, we should start using that.\n        injector = route._injector ?? injector;\n        return this.getChildConfig(injector, route, segments).pipe(\n          switchMap(({routes: childConfig}) => {\n            const childInjector = route._loadedInjector ?? injector;\n\n            const {parameters, consumedSegments, remainingSegments} = result;\n            const snapshot = new ActivatedRouteSnapshot(\n              consumedSegments,\n              parameters,\n              Object.freeze({...this.urlTree.queryParams}),\n              this.urlTree.fragment,\n              getData(route),\n              getOutlet(route),\n              route.component ?? route._loadedComponent ?? null,\n              route,\n              getResolve(route),\n            );\n            const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);\n            snapshot.params = Object.freeze(inherited.params);\n            snapshot.data = Object.freeze(inherited.data);\n\n            const {segmentGroup, slicedSegments} = split(\n              rawSegment,\n              consumedSegments,\n              remainingSegments,\n              childConfig,\n            );\n\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n              return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(\n                map((children) => {\n                  return new TreeNode(snapshot, children);\n                }),\n              );\n            }\n\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n              return of(new TreeNode(snapshot, []));\n            }\n\n            const matchedOnOutlet = getOutlet(route) === outlet;\n            // If we matched a config due to empty path match on a different outlet, we need to\n            // continue passing the current outlet for the segment rather than switch to PRIMARY.\n            // Note that we switch to primary when we have a match because outlet configs look like\n            // this: {path: 'a', outlet: 'a', children: [\n            //  {path: 'b', component: B},\n            //  {path: 'c', component: C},\n            // ]}\n            // Notice that the children of the named outlet are configured with the primary outlet\n            return this.processSegment(\n              childInjector,\n              childConfig,\n              segmentGroup,\n              slicedSegments,\n              matchedOnOutlet ? PRIMARY_OUTLET : outlet,\n              true,\n              snapshot,\n            ).pipe(\n              map((child) => {\n                return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);\n              }),\n            );\n          }),\n        );\n      }),\n    );\n  }\n  private getChildConfig(\n    injector: EnvironmentInjector,\n    route: Route,\n    segments: UrlSegment[],\n  ): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of({routes: route.children, injector});\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedRoutes !== undefined) {\n        return of({routes: route._loadedRoutes, injector: route._loadedInjector});\n      }\n\n      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(\n        mergeMap((shouldLoadResult: boolean) => {\n          if (shouldLoadResult) {\n            return this.configLoader.loadChildren(injector, route).pipe(\n              tap((cfg: LoadedRouterConfig) => {\n                route._loadedRoutes = cfg.routes;\n                route._loadedInjector = cfg.injector;\n              }),\n            );\n          }\n          return canLoadFails(route);\n        }),\n      );\n    }\n\n    return of({routes: [], injector});\n  }\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction hasEmptyPathConfig(node: TreeNode<ActivatedRouteSnapshot>) {\n  const config = node.value.routeConfig;\n  return config && config.path === '';\n}\n\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with\n * the children from each duplicate. This is necessary because different outlets can match a\n * single empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(\n  nodes: Array<TreeNode<ActivatedRouteSnapshot>>,\n): Array<TreeNode<ActivatedRouteSnapshot>> {\n  const result: Array<TreeNode<ActivatedRouteSnapshot>> = [];\n  // The set of nodes which contain children that were merged from two duplicate empty path nodes.\n  const mergedNodes: Set<TreeNode<ActivatedRouteSnapshot>> = new Set();\n\n  for (const node of nodes) {\n    if (!hasEmptyPathConfig(node)) {\n      result.push(node);\n      continue;\n    }\n\n    const duplicateEmptyPathNode = result.find(\n      (resultNode) => node.value.routeConfig === resultNode.value.routeConfig,\n    );\n    if (duplicateEmptyPathNode !== undefined) {\n      duplicateEmptyPathNode.children.push(...node.children);\n      mergedNodes.add(duplicateEmptyPathNode);\n    } else {\n      result.push(node);\n    }\n  }\n  // For each node which has children from multiple sources, we need to recompute a new `TreeNode`\n  // by also merging those children. This is necessary when there are multiple empty path configs\n  // in a row. Put another way: whenever we combine children of two nodes, we need to also check\n  // if any of those children can be combined into a single node as well.\n  for (const mergedNode of mergedNodes) {\n    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);\n    result.push(new TreeNode(mergedNode.value, mergedChildren));\n  }\n  return result.filter((n) => !mergedNodes.has(n));\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach((n) => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map((s) => s.toString()).join('/');\n      const c = n.value.url.map((s) => s.toString()).join('/');\n      throw new RuntimeError(\n        RuntimeErrorCode.TWO_SEGMENTS_WITH_SAME_OUTLET,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Two segments cannot have the same outlet name: '${p}' and '${c}'.`,\n      );\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentInjector, Type} from '@angular/core';\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\n\nimport {Route} from '../models';\nimport {NavigationTransition} from '../navigation_transition';\nimport {recognize as recognizeFn} from '../recognize';\nimport {RouterConfigLoader} from '../router_config_loader';\nimport {UrlSerializer} from '../url_tree';\n\nexport function recognize(\n  injector: EnvironmentInjector,\n  configLoader: RouterConfigLoader,\n  rootComponentType: Type<any> | null,\n  config: Route[],\n  serializer: UrlSerializer,\n  paramsInheritanceStrategy: 'emptyOnly' | 'always',\n): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap((t) =>\n    recognizeFn(\n      injector,\n      configLoader,\n      rootComponentType,\n      config,\n      t.extractedUrl,\n      serializer,\n      paramsInheritanceStrategy,\n    ).pipe(\n      map(({state: targetSnapshot, tree: urlAfterRedirects}) => {\n        return {...t, targetSnapshot, urlAfterRedirects};\n      }),\n    ),\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentInjector, ProviderToken, runInInjectionContext} from '@angular/core';\nimport {EMPTY, from, MonoTypeOperatorFunction, Observable, of, throwError} from 'rxjs';\nimport {catchError, concatMap, first, map, mapTo, mergeMap, takeLast, tap} from 'rxjs/operators';\n\nimport {RedirectCommand, ResolveData} from '../models';\nimport {NavigationTransition} from '../navigation_transition';\nimport {\n  ActivatedRouteSnapshot,\n  getInherited,\n  hasStaticTitle,\n  RouterStateSnapshot,\n} from '../router_state';\nimport {RouteTitleKey} from '../shared';\nimport {getDataKeys, wrapIntoObservable} from '../utils/collection';\nimport {getClosestRouteInjector} from '../utils/config';\nimport {getTokenOrFunctionIdentity} from '../utils/preactivation';\nimport {isEmptyError} from '../utils/type_guards';\nimport {redirectingNavigationError} from '../navigation_canceling_error';\nimport {DefaultUrlSerializer} from '../url_tree';\n\nexport function resolveData(\n  paramsInheritanceStrategy: 'emptyOnly' | 'always',\n  injector: EnvironmentInjector,\n): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap((t) => {\n    const {\n      targetSnapshot,\n      guards: {canActivateChecks},\n    } = t;\n\n    if (!canActivateChecks.length) {\n      return of(t);\n    }\n    // Iterating a Set in javascript  happens in insertion order so it is safe to use a `Set` to\n    // preserve the correct order that the resolvers should run in.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#description\n    const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));\n    const routesNeedingDataUpdates = new Set<ActivatedRouteSnapshot>();\n    for (const route of routesWithResolversToRun) {\n      if (routesNeedingDataUpdates.has(route)) {\n        continue;\n      }\n      // All children under the route with a resolver to run need to recompute inherited data.\n      for (const newRoute of flattenRouteTree(route)) {\n        routesNeedingDataUpdates.add(newRoute);\n      }\n    }\n    let routesProcessed = 0;\n    return from(routesNeedingDataUpdates).pipe(\n      concatMap((route) => {\n        if (routesWithResolversToRun.has(route)) {\n          return runResolve(route, targetSnapshot!, paramsInheritanceStrategy, injector);\n        } else {\n          route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;\n          return of(void 0);\n        }\n      }),\n      tap(() => routesProcessed++),\n      takeLast(1),\n      mergeMap((_) => (routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY)),\n    );\n  });\n}\n\n/**\n *  Returns the `ActivatedRouteSnapshot` tree as an array, using DFS to traverse the route tree.\n */\nfunction flattenRouteTree(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot[] {\n  const descendants = route.children.map((child) => flattenRouteTree(child)).flat();\n  return [route, ...descendants];\n}\n\nfunction runResolve(\n  futureARS: ActivatedRouteSnapshot,\n  futureRSS: RouterStateSnapshot,\n  paramsInheritanceStrategy: 'emptyOnly' | 'always',\n  injector: EnvironmentInjector,\n) {\n  const config = futureARS.routeConfig;\n  const resolve = futureARS._resolve;\n  if (config?.title !== undefined && !hasStaticTitle(config)) {\n    resolve[RouteTitleKey] = config.title;\n  }\n  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(\n    map((resolvedData: any) => {\n      futureARS._resolvedData = resolvedData;\n      futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;\n      return null;\n    }),\n  );\n}\n\nfunction resolveNode(\n  resolve: ResolveData,\n  futureARS: ActivatedRouteSnapshot,\n  futureRSS: RouterStateSnapshot,\n  injector: EnvironmentInjector,\n): Observable<any> {\n  const keys = getDataKeys(resolve);\n  if (keys.length === 0) {\n    return of({});\n  }\n  const data: {[k: string | symbol]: any} = {};\n  return from(keys).pipe(\n    mergeMap((key) =>\n      getResolver(resolve[key], futureARS, futureRSS, injector).pipe(\n        first(),\n        tap((value: any) => {\n          if (value instanceof RedirectCommand) {\n            throw redirectingNavigationError(new DefaultUrlSerializer(), value);\n          }\n          data[key] = value;\n        }),\n      ),\n    ),\n    takeLast(1),\n    mapTo(data),\n    catchError((e: unknown) => (isEmptyError(e as Error) ? EMPTY : throwError(e))),\n  );\n}\n\nfunction getResolver(\n  injectionToken: ProviderToken<any> | Function,\n  futureARS: ActivatedRouteSnapshot,\n  futureRSS: RouterStateSnapshot,\n  injector: EnvironmentInjector,\n): Observable<any> {\n  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;\n  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);\n  const resolverValue = resolver.resolve\n    ? resolver.resolve(futureARS, futureRSS)\n    : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));\n  return wrapIntoObservable(resolverValue);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {from, MonoTypeOperatorFunction, ObservableInput, of} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nexport function switchTap<T>(\n  next: (x: T) => void | ObservableInput<any>,\n): MonoTypeOperatorFunction<T> {\n  return switchMap((v) => {\n    const nextResult = next(v);\n    if (nextResult) {\n      return from(nextResult).pipe(map(() => v));\n    }\n    return of(v);\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable} from '@angular/core';\nimport {Title} from '@angular/platform-browser';\n\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET, RouteTitleKey} from './shared';\n\n/**\n * Provides a strategy for setting the page title after a router navigation.\n *\n * The built-in implementation traverses the router state snapshot and finds the deepest primary\n * outlet with `title` property. Given the `Routes` below, navigating to\n * `/base/child(popup:aux)` would result in the document title being set to \"child\".\n * ```\n * [\n *   {path: 'base', title: 'base', children: [\n *     {path: 'child', title: 'child'},\n *   ],\n *   {path: 'aux', outlet: 'popup', title: 'popupTitle'}\n * ]\n * ```\n *\n * This class can be used as a base class for custom title strategies. That is, you can create your\n * own class that extends the `TitleStrategy`. Note that in the above example, the `title`\n * from the named outlet is never used. However, a custom strategy might be implemented to\n * incorporate titles in named outlets.\n *\n * @publicApi\n * @see [Page title guide](guide/routing/common-router-tasks#setting-the-page-title)\n */\n@Injectable({providedIn: 'root', useFactory: () => inject(DefaultTitleStrategy)})\nexport abstract class TitleStrategy {\n  /** Performs the application title update. */\n  abstract updateTitle(snapshot: RouterStateSnapshot): void;\n\n  /**\n   * @returns The `title` of the deepest primary route.\n   */\n  buildTitle(snapshot: RouterStateSnapshot): string | undefined {\n    let pageTitle: string | undefined;\n    let route: ActivatedRouteSnapshot | undefined = snapshot.root;\n    while (route !== undefined) {\n      pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;\n      route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);\n    }\n    return pageTitle;\n  }\n\n  /**\n   * Given an `ActivatedRouteSnapshot`, returns the final value of the\n   * `Route.title` property, which can either be a static string or a resolved value.\n   */\n  getResolvedTitleForRoute(snapshot: ActivatedRouteSnapshot) {\n    return snapshot.data[RouteTitleKey];\n  }\n}\n\n/**\n * The default `TitleStrategy` used by the router that updates the title using the `Title` service.\n */\n@Injectable({providedIn: 'root'})\nexport class DefaultTitleStrategy extends TitleStrategy {\n  constructor(readonly title: Title) {\n    super();\n  }\n\n  /**\n   * Sets the title of the browser to the given value.\n   *\n   * @param title The `pageTitle` from the deepest primary route.\n   */\n  override updateTitle(snapshot: RouterStateSnapshot): void {\n    const title = this.buildTitle(snapshot);\n    if (title !== undefined) {\n      this.title.setTitle(title);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nimport {OnSameUrlNavigation, QueryParamsHandling} from './models';\n\n/**\n * Error handler that is invoked when a navigation error occurs.\n *\n * If the handler returns a value, the navigation Promise is resolved with this value.\n * If the handler throws an exception, the navigation Promise is rejected with\n * the exception.\n *\n * @publicApi\n * @deprecated Subscribe to the `Router` events and watch for `NavigationError` instead.\n *   If the ErrorHandler is used to prevent unhandled promise rejections when navigation\n *   errors occur, use the `resolveNavigationPromiseOnError` option instead.\n *\n * @see RouterConfigOptions\n */\nexport type ErrorHandler = (error: any) => any;\n\n/**\n * Allowed values in an `ExtraOptions` object that configure\n * when the router performs the initial navigation operation.\n *\n * * 'enabledNonBlocking' - (default) The initial navigation starts after the\n * root component has been created. The bootstrap is not blocked on the completion of the initial\n * navigation.\n * * 'enabledBlocking' - The initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete. This value should be set in\n * case you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration)\n * for your application.\n * * 'disabled' - The initial navigation is not performed. The location listener is set up before\n * the root component gets created. Use if there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic.\n *\n * @see {@link forRoot()}\n *\n * @publicApi\n */\nexport type InitialNavigation = 'disabled' | 'enabledBlocking' | 'enabledNonBlocking';\n\n/**\n * Extra configuration options that can be used with the `withRouterConfig` function.\n *\n * @publicApi\n */\nexport interface RouterConfigOptions {\n  /**\n   * Configures how the Router attempts to restore state when a navigation is cancelled.\n   *\n   * 'replace' - Always uses `location.replaceState` to set the browser state to the state of the\n   * router before the navigation started. This means that if the URL of the browser is updated\n   * _before_ the navigation is canceled, the Router will simply replace the item in history rather\n   * than trying to restore to the previous location in the session history. This happens most\n   * frequently with `urlUpdateStrategy: 'eager'` and navigations with the browser back/forward\n   * buttons.\n   *\n   * 'computed' - Will attempt to return to the same index in the session history that corresponds\n   * to the Angular route when the navigation gets cancelled. For example, if the browser back\n   * button is clicked and the navigation is cancelled, the Router will trigger a forward navigation\n   * and vice versa.\n   *\n   * Note: the 'computed' option is incompatible with any `UrlHandlingStrategy` which only\n   * handles a portion of the URL because the history restoration navigates to the previous place in\n   * the browser history rather than simply resetting a portion of the URL.\n   *\n   * The default value is `replace` when not set.\n   */\n  canceledNavigationResolution?: 'replace' | 'computed';\n\n  /**\n   * Configures the default for handling a navigation request to the current URL.\n   *\n   * If unset, the `Router` will use `'ignore'`.\n   *\n   * @see {@link OnSameUrlNavigation}\n   */\n  onSameUrlNavigation?: OnSameUrlNavigation;\n\n  /**\n   * Defines how the router merges parameters, data, and resolved data from parent to child\n   * routes.\n   *\n   * By default ('emptyOnly'), a route inherits the parent route's parameters when the route itself\n   * has an empty path (meaning its configured with path: '') or when the parent route doesn't have\n   * any component set.\n   *\n   * Set to 'always' to enable unconditional inheritance of parent parameters.\n   *\n   * Note that when dealing with matrix parameters, \"parent\" refers to the parent `Route`\n   * config which does not necessarily mean the \"URL segment to the left\". When the `Route` `path`\n   * contains multiple segments, the matrix parameters must appear on the last segment. For example,\n   * matrix parameters for `{path: 'a/b', component: MyComp}` should appear as `a/b;foo=bar` and not\n   * `a;foo=bar/b`.\n   *\n   */\n  paramsInheritanceStrategy?: 'emptyOnly' | 'always';\n\n  /**\n   * Defines when the router updates the browser URL. By default ('deferred'),\n   * update after successful navigation.\n   * Set to 'eager' if prefer to update the URL at the beginning of navigation.\n   * Updating the URL early allows you to handle a failure of navigation by\n   * showing an error message with the URL that failed.\n   */\n  urlUpdateStrategy?: 'deferred' | 'eager';\n\n  /**\n   * The default strategy to use for handling query params in `Router.createUrlTree` when one is not provided.\n   *\n   * The `createUrlTree` method is used internally by `Router.navigate` and `RouterLink`.\n   * Note that `QueryParamsHandling` does not apply to `Router.navigateByUrl`.\n   *\n   * When neither the default nor the queryParamsHandling option is specified in the call to `createUrlTree`,\n   * the current parameters will be replaced by new parameters.\n   *\n   * @see {@link Router#createUrlTree}\n   * @see {@link QueryParamsHandling}\n   */\n  defaultQueryParamsHandling?: QueryParamsHandling;\n\n  /**\n   * When `true`, the `Promise` will instead resolve with `false`, as it does with other failed\n   * navigations (for example, when guards are rejected).\n\n   * Otherwise the `Promise` returned by the Router's navigation with be rejected\n   * if an error occurs.\n   */\n  resolveNavigationPromiseOnError?: boolean;\n}\n\n/**\n * Configuration options for the scrolling feature which can be used with `withInMemoryScrolling`\n * function.\n *\n * @publicApi\n */\nexport interface InMemoryScrollingOptions {\n  /**\n   * When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\n   * Anchor scrolling is disabled by default.\n   *\n   * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n   * that we stored or scroll to the top.\n   */\n  anchorScrolling?: 'disabled' | 'enabled';\n\n  /**\n   * Configures if the scroll position needs to be restored when navigating back.\n   *\n   * * 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n   * * 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n   * * 'enabled'- Restores the previous scroll position on backward navigation, else sets the\n   * position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\n   * navigation). This option will be the default in the future.\n   *\n   * You can implement custom scroll restoration behavior by adapting the enabled behavior as\n   * in the following example.\n   *\n   * ```typescript\n   * class AppComponent {\n   *   movieData: any;\n   *\n   *   constructor(private router: Router, private viewportScroller: ViewportScroller,\n   * changeDetectorRef: ChangeDetectorRef) {\n   *   router.events.pipe(filter((event: Event): event is Scroll => event instanceof Scroll)\n   *     ).subscribe(e => {\n   *       fetch('http://example.com/movies.json').then(response => {\n   *         this.movieData = response.json();\n   *         // update the template with the data before restoring scroll\n   *         changeDetectorRef.detectChanges();\n   *\n   *         if (e.position) {\n   *           viewportScroller.scrollToPosition(e.position);\n   *         }\n   *       });\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n}\n\n/**\n * A set of configuration options for a router module, provided in the\n * `forRoot()` method.\n *\n * @see {@link forRoot()}\n *\n *\n * @publicApi\n */\nexport interface ExtraOptions extends InMemoryScrollingOptions, RouterConfigOptions {\n  /**\n   * When true, log all internal navigation events to the console.\n   * Use for debugging.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * When true, enable the location strategy that uses the URL fragment\n   * instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * One of `enabled`, `enabledBlocking`, `enabledNonBlocking` or `disabled`.\n   * When set to `enabled` or `enabledBlocking`, the initial navigation starts before the root\n   * component is created. The bootstrap is blocked until the initial navigation is complete. This\n   * value should be set in case you use [server-side rendering](guide/ssr), but do not enable\n   * [hydration](guide/hydration) for your application. When set to `enabledNonBlocking`,\n   * the initial navigation starts after the root component has been created.\n   * The bootstrap is not blocked on the completion of the initial navigation. When set to\n   * `disabled`, the initial navigation is not performed. The location listener is set up before the\n   * root component gets created. Use if there is a reason to have more control over when the router\n   * starts its initial navigation due to some complex initialization logic.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * When true, enables binding information from the `Router` state directly to the inputs of the\n   * component in `Route` configurations.\n   */\n  bindToComponentInputs?: boolean;\n\n  /**\n   * When true, enables view transitions in the Router by running the route activation and\n   * deactivation inside of `document.startViewTransition`.\n   *\n   * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n   * @experimental\n   */\n  enableViewTransitions?: boolean;\n\n  /**\n   * A custom error handler for failed navigations.\n   * If the handler returns a value, the navigation Promise is resolved with this value.\n   * If the handler throws an exception, the navigation Promise is rejected with the exception.\n   *\n   * @deprecated Subscribe to the `Router` events and watch for `NavigationError` instead.\n   *   If the ErrorHandler is used to prevent unhandled promise rejections when navigation\n   *   errors occur, use the `resolveNavigationPromiseOnError` option instead.\n   *\n   * @see RouterConfigOptions\n   */\n  errorHandler?: (error: any) => any;\n\n  /**\n   * Configures a preloading strategy.\n   * One of `PreloadAllModules` or `NoPreloading` (the default).\n   */\n  preloadingStrategy?: any;\n\n  /**\n   * Configures the scroll offset the router will use when scrolling to an element.\n   *\n   * When given a tuple with x and y position value,\n   * the router uses that offset each time it scrolls.\n   * When given a function, the router invokes the function every time\n   * it restores scroll position.\n   */\n  scrollOffset?: [number, number] | (() => [number, number]);\n}\n\n/**\n * A DI token for the router service.\n *\n * @publicApi\n */\nexport const ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'router config' : '',\n  {\n    providedIn: 'root',\n    factory: () => ({}),\n  },\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Component} from '@angular/core';\n\nimport {RouterOutlet} from '../directives/router_outlet';\nimport {PRIMARY_OUTLET} from '../shared';\nimport {Route} from '../models';\nexport {ÉµEmptyOutletComponent as EmptyOutletComponent};\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\n@Component({\n  template: `<router-outlet></router-outlet>`,\n  imports: [RouterOutlet],\n  standalone: true,\n})\nexport class ÉµEmptyOutletComponent {}\n\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nexport function standardizeConfig(r: Route): Route {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {...r, children} : {...r};\n  if (\n    !c.component &&\n    !c.loadComponent &&\n    (children || c.loadChildren) &&\n    c.outlet &&\n    c.outlet !== PRIMARY_OUTLET\n  ) {\n    c.component = ÉµEmptyOutletComponent;\n  }\n  return c;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Compiler,\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  NgModuleFactory,\n  Type,\n} from '@angular/core';\nimport {ConnectableObservable, from, Observable, of, Subject} from 'rxjs';\nimport {finalize, map, mergeMap, refCount, tap} from 'rxjs/operators';\n\nimport {DefaultExport, LoadedRouterConfig, Route, Routes} from './models';\nimport {wrapIntoObservable} from './utils/collection';\nimport {assertStandalone, validateConfig} from './utils/config';\nimport {standardizeConfig} from './components/empty_outlet';\n\n/**\n * The DI token for a router configuration.\n *\n * `ROUTES` is a low level API for router configuration via dependency injection.\n *\n * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,\n * `provideRouter`, or `Router.resetConfig()`.\n *\n * @publicApi\n */\nexport const ROUTES = new InjectionToken<Route[][]>(ngDevMode ? 'ROUTES' : '');\n\ntype ComponentLoader = Observable<Type<unknown>>;\n\n@Injectable({providedIn: 'root'})\nexport class RouterConfigLoader {\n  private componentLoaders = new WeakMap<Route, ComponentLoader>();\n  private childrenLoaders = new WeakMap<Route, Observable<LoadedRouterConfig>>();\n  onLoadStartListener?: (r: Route) => void;\n  onLoadEndListener?: (r: Route) => void;\n  private readonly compiler = inject(Compiler);\n\n  loadComponent(route: Route): Observable<Type<unknown>> {\n    if (this.componentLoaders.get(route)) {\n      return this.componentLoaders.get(route)!;\n    } else if (route._loadedComponent) {\n      return of(route._loadedComponent);\n    }\n\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    const loadRunner = wrapIntoObservable(route.loadComponent!()).pipe(\n      map(maybeUnwrapDefaultExport),\n      tap((component) => {\n        if (this.onLoadEndListener) {\n          this.onLoadEndListener(route);\n        }\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          assertStandalone(route.path ?? '', component);\n        route._loadedComponent = component;\n      }),\n      finalize(() => {\n        this.componentLoaders.delete(route);\n      }),\n    );\n    // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n    const loader = new ConnectableObservable(loadRunner, () => new Subject<Type<unknown>>()).pipe(\n      refCount(),\n    );\n    this.componentLoaders.set(route, loader);\n    return loader;\n  }\n\n  loadChildren(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.childrenLoaders.get(route)) {\n      return this.childrenLoaders.get(route)!;\n    } else if (route._loadedRoutes) {\n      return of({routes: route._loadedRoutes, injector: route._loadedInjector});\n    }\n\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    const moduleFactoryOrRoutes$ = loadChildren(\n      route,\n      this.compiler,\n      parentInjector,\n      this.onLoadEndListener,\n    );\n    const loadRunner = moduleFactoryOrRoutes$.pipe(\n      finalize(() => {\n        this.childrenLoaders.delete(route);\n      }),\n    );\n    // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n    const loader = new ConnectableObservable(\n      loadRunner,\n      () => new Subject<LoadedRouterConfig>(),\n    ).pipe(refCount());\n    this.childrenLoaders.set(route, loader);\n    return loader;\n  }\n}\n\n/**\n * Executes a `route.loadChildren` callback and converts the result to an array of child routes and\n * an injector if that callback returned a module.\n *\n * This function is used for the route discovery during prerendering\n * in @angular-devkit/build-angular. If there are any updates to the contract here, it will require\n * an update to the extractor.\n */\nexport function loadChildren(\n  route: Route,\n  compiler: Compiler,\n  parentInjector: Injector,\n  onLoadEndListener?: (r: Route) => void,\n): Observable<LoadedRouterConfig> {\n  return wrapIntoObservable(route.loadChildren!()).pipe(\n    map(maybeUnwrapDefaultExport),\n    mergeMap((t) => {\n      if (t instanceof NgModuleFactory || Array.isArray(t)) {\n        return of(t);\n      } else {\n        return from(compiler.compileModuleAsync(t));\n      }\n    }),\n    map((factoryOrRoutes: NgModuleFactory<any> | Routes) => {\n      if (onLoadEndListener) {\n        onLoadEndListener(route);\n      }\n      // This injector comes from the `NgModuleRef` when lazy loading an `NgModule`. There is\n      // no injector associated with lazy loading a `Route` array.\n      let injector: EnvironmentInjector | undefined;\n      let rawRoutes: Route[];\n      let requireStandaloneComponents = false;\n      if (Array.isArray(factoryOrRoutes)) {\n        rawRoutes = factoryOrRoutes;\n        requireStandaloneComponents = true;\n      } else {\n        injector = factoryOrRoutes.create(parentInjector).injector;\n        // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n        // will get stuck in an infinite loop. The child module's Injector will look to\n        // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n        // for it's parent module instead.\n        rawRoutes = injector.get(ROUTES, [], {optional: true, self: true}).flat();\n      }\n      const routes = rawRoutes.map(standardizeConfig);\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        validateConfig(routes, route.path, requireStandaloneComponents);\n      return {routes, injector};\n    }),\n  );\n}\n\nfunction isWrappedDefaultExport<T>(value: T | DefaultExport<T>): value is DefaultExport<T> {\n  // We use `in` here with a string key `'default'`, because we expect `DefaultExport` objects to be\n  // dynamically imported ES modules with a spec-mandated `default` key. Thus we don't expect that\n  // `default` will be a renamed property.\n  return value && typeof value === 'object' && 'default' in value;\n}\n\nfunction maybeUnwrapDefaultExport<T>(input: T | DefaultExport<T>): T {\n  // As per `isWrappedDefaultExport`, the `default` key here is generated by the browser and not\n  // subject to property renaming, so we reference it with bracket access.\n  return isWrappedDefaultExport(input) ? input['default'] : input;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable} from '@angular/core';\n\nimport {UrlTree} from './url_tree';\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: () => inject(DefaultUrlHandlingStrategy)})\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\n/**\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n  shouldProcessUrl(url: UrlTree): boolean {\n    return true;\n  }\n  extract(url: UrlTree): UrlTree {\n    return url;\n  }\n  merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree {\n    return newUrlPart;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/// <reference types=\"dom-view-transitions\" />\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  afterNextRender,\n  InjectionToken,\n  Injector,\n  NgZone,\n  runInInjectionContext,\n} from '@angular/core';\n\nimport {ActivatedRouteSnapshot} from '../router_state';\n\nexport const CREATE_VIEW_TRANSITION = new InjectionToken<typeof createViewTransition>(\n  ngDevMode ? 'view transition helper' : '',\n);\nexport const VIEW_TRANSITION_OPTIONS = new InjectionToken<\n  ViewTransitionsFeatureOptions & {skipNextTransition: boolean}\n>(ngDevMode ? 'view transition options' : '');\n\n/**\n * Options to configure the View Transitions integration in the Router.\n *\n * @experimental\n * @publicApi\n * @see withViewTransitions\n */\nexport interface ViewTransitionsFeatureOptions {\n  /**\n   * Skips the very first call to `startViewTransition`. This can be useful for disabling the\n   * animation during the application's initial loading phase.\n   */\n  skipInitialTransition?: boolean;\n\n  /**\n   * A function to run after the `ViewTransition` is created.\n   *\n   * This function is run in an injection context and can use `inject`.\n   */\n  onViewTransitionCreated?: (transitionInfo: ViewTransitionInfo) => void;\n}\n\n/**\n * The information passed to the `onViewTransitionCreated` function provided in the\n * `withViewTransitions` feature options.\n *\n * @publicApi\n * @experimental\n */\nexport interface ViewTransitionInfo {\n  // TODO(atscott): This type can/should be the built-in `ViewTransition` type\n  // from @types/dom-view-transitions but exporting that type from the public API is currently not\n  // supported by tooling.\n  /**\n   * The `ViewTransition` returned by the call to `startViewTransition`.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition\n   */\n  transition: {\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/finished\n     */\n    finished: Promise<void>;\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/ready\n     */\n    ready: Promise<void>;\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/updateCallbackDone\n     */\n    updateCallbackDone: Promise<void>;\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/skipTransition\n     */\n    skipTransition(): void;\n  };\n  /**\n   * The `ActivatedRouteSnapshot` that the navigation is transitioning from.\n   */\n  from: ActivatedRouteSnapshot;\n  /**\n   * The `ActivatedRouteSnapshot` that the navigation is transitioning to.\n   */\n  to: ActivatedRouteSnapshot;\n}\n\n/**\n * A helper function for using browser view transitions. This function skips the call to\n * `startViewTransition` if the browser does not support it.\n *\n * @returns A Promise that resolves when the view transition callback begins.\n */\nexport function createViewTransition(\n  injector: Injector,\n  from: ActivatedRouteSnapshot,\n  to: ActivatedRouteSnapshot,\n): Promise<void> {\n  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);\n  const document = injector.get(DOCUMENT);\n  // Create promises outside the Angular zone to avoid causing extra change detections\n  return injector.get(NgZone).runOutsideAngular(() => {\n    if (!document.startViewTransition || transitionOptions.skipNextTransition) {\n      transitionOptions.skipNextTransition = false;\n      // The timing of `startViewTransition` is closer to a macrotask. It won't be called\n      // until the current event loop exits so we use a promise resolved in a timeout instead\n      // of Promise.resolve().\n      return new Promise((resolve) => setTimeout(resolve));\n    }\n\n    let resolveViewTransitionStarted: () => void;\n    const viewTransitionStarted = new Promise<void>((resolve) => {\n      resolveViewTransitionStarted = resolve;\n    });\n    const transition = document.startViewTransition(() => {\n      resolveViewTransitionStarted();\n      // We don't actually update dom within the transition callback. The resolving of the above\n      // promise unblocks the Router navigation, which synchronously activates and deactivates\n      // routes (the DOM update). This view transition waits for the next change detection to\n      // complete (below), which includes the update phase of the routed components.\n      return createRenderPromise(injector);\n    });\n    const {onViewTransitionCreated} = transitionOptions;\n    if (onViewTransitionCreated) {\n      runInInjectionContext(injector, () => onViewTransitionCreated({transition, from, to}));\n    }\n    return viewTransitionStarted;\n  });\n}\n\n/**\n * Creates a promise that resolves after next render.\n */\nfunction createRenderPromise(injector: Injector) {\n  return new Promise<void>((resolve) => {\n    // Wait for the microtask queue to empty after the next render happens (by waiting a macrotask).\n    // This ensures any follow-up renders in the microtask queue are completed before the\n    // view transition starts animating.\n    afterNextRender({read: () => setTimeout(resolve)}, {injector});\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location} from '@angular/common';\nimport {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectionToken,\n  runInInjectionContext,\n  Type,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, EMPTY, from, Observable, of, Subject} from 'rxjs';\nimport {\n  catchError,\n  defaultIfEmpty,\n  filter,\n  finalize,\n  map,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\n\nimport {createRouterState} from './create_router_state';\nimport {INPUT_BINDER} from './directives/router_outlet';\nimport {\n  BeforeActivateRoutes,\n  Event,\n  GuardsCheckEnd,\n  GuardsCheckStart,\n  IMPERATIVE_NAVIGATION,\n  NavigationCancel,\n  NavigationCancellationCode,\n  NavigationEnd,\n  NavigationError,\n  NavigationSkipped,\n  NavigationSkippedCode,\n  NavigationStart,\n  NavigationTrigger,\n  RedirectRequest,\n  ResolveEnd,\n  ResolveStart,\n  RouteConfigLoadEnd,\n  RouteConfigLoadStart,\n  RoutesRecognized,\n} from './events';\nimport {\n  GuardResult,\n  NavigationBehaviorOptions,\n  QueryParamsHandling,\n  RedirectCommand,\n  Route,\n  Routes,\n} from './models';\nimport {\n  isNavigationCancelingError,\n  isRedirectingNavigationCancelingError,\n  redirectingNavigationError,\n} from './navigation_canceling_error';\nimport {activateRoutes} from './operators/activate_routes';\nimport {checkGuards} from './operators/check_guards';\nimport {recognize} from './operators/recognize';\nimport {resolveData} from './operators/resolve_data';\nimport {switchTap} from './operators/switch_tap';\nimport {TitleStrategy} from './page_title_strategy';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ROUTER_CONFIGURATION} from './router_config';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n  createEmptyState,\n  RouterState,\n  RouterStateSnapshot,\n} from './router_state';\nimport {Params} from './shared';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {isUrlTree, UrlSerializer, UrlTree} from './url_tree';\nimport {Checks, getAllRouteGuards} from './utils/preactivation';\nimport {CREATE_VIEW_TRANSITION} from './utils/view_transition';\n\n/**\n * @description\n *\n * Options that modify the `Router` URL.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed.\n *\n * @see {@link Router#navigate}\n * @see {@link Router#createUrlTree}\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n *\n * @publicApi\n */\nexport interface UrlCreationOptions {\n  /**\n   * Specifies a root URI to use for relative navigation.\n   *\n   * For example, consider the following route configuration where the parent route\n   * has two children.\n   *\n   * ```\n   * [{\n   *   path: 'parent',\n   *   component: ParentComponent,\n   *   children: [{\n   *     path: 'list',\n   *     component: ListComponent\n   *   },{\n   *     path: 'child',\n   *     component: ChildComponent\n   *   }]\n   * }]\n   * ```\n   *\n   * The following `go()` function navigates to the `list` route by\n   * interpreting the destination URI as relative to the activated `child`  route\n   *\n   * ```\n   *  @Component({...})\n   *  class ChildComponent {\n   *    constructor(private router: Router, private route: ActivatedRoute) {}\n   *\n   *    go() {\n   *      router.navigate(['../list'], { relativeTo: this.route });\n   *    }\n   *  }\n   * ```\n   *\n   * A value of `null` or `undefined` indicates that the navigation commands should be applied\n   * relative to the root.\n   */\n  relativeTo?: ActivatedRoute | null;\n\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   */\n  queryParams?: Params | null;\n\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   */\n  fragment?: string;\n\n  /**\n   * How to handle query parameters in the router link for the next navigation.\n   * One of:\n   * * `preserve` : Preserve current parameters.\n   * * `merge` : Merge new with current parameters.\n   *\n   * The \"preserve\" option discards any new query params:\n   * ```\n   * // from /view1?page=1 to/view2?page=1\n   * router.navigate(['/view2'], { queryParams: { page: 2 },  queryParamsHandling: \"preserve\"\n   * });\n   * ```\n   * The \"merge\" option appends new query params to the params from the current URL:\n   * ```\n   * // from /view1?page=1 to/view2?page=1&otherKey=2\n   * router.navigate(['/view2'], { queryParams: { otherKey: 2 },  queryParamsHandling: \"merge\"\n   * });\n   * ```\n   * In case of a key collision between current parameters and those in the `queryParams` object,\n   * the new value is used.\n   *\n   */\n  queryParamsHandling?: QueryParamsHandling | null;\n\n  /**\n   * When true, preserves the URL fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   */\n  preserveFragment?: boolean;\n}\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed or interpreted.\n *\n * @see {@link Router#navigate}\n * @see {@link Router#navigateByUrl}\n * @see {@link Router#createurltree}\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n * @see {@link UrlCreationOptions}\n * @see {@link NavigationBehaviorOptions}\n *\n * @publicApi\n */\nexport interface NavigationExtras extends UrlCreationOptions, NavigationBehaviorOptions {}\n\nexport type RestoredState = {\n  [k: string]: any;\n  // TODO(#27607): Remove `navigationId` and `ÉµrouterPageId` and move to `ng` or `Éµ` namespace.\n  navigationId: number;\n  // The `Éµ` prefix is there to reduce the chance of colliding with any existing user properties on\n  // the history state.\n  ÉµrouterPageId?: number;\n};\n\n/**\n * Information about a navigation operation.\n * Retrieve the most recent navigation object with the\n * [Router.getCurrentNavigation() method](api/router/Router#getcurrentnavigation) .\n *\n * * *id* : The unique identifier of the current navigation.\n * * *initialUrl* : The target URL passed into the `Router#navigateByUrl()` call before navigation.\n * This is the value before the router has parsed or applied redirects to it.\n * * *extractedUrl* : The initial target URL after being parsed with `UrlSerializer.extract()`.\n * * *finalUrl* : The extracted URL after redirects have been applied.\n * This URL may not be available immediately, therefore this property can be `undefined`.\n * It is guaranteed to be set after the `RoutesRecognized` event fires.\n * * *trigger* : Identifies how this navigation was triggered.\n * -- 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n * -- 'popstate'--Triggered by a popstate event.\n * -- 'hashchange'--Triggered by a hashchange event.\n * * *extras* : A `NavigationExtras` options object that controlled the strategy used for this\n * navigation.\n * * *previousNavigation* : The previously successful `Navigation` object. Only one previous\n * navigation is available, therefore this previous `Navigation` object has a `null` value for its\n * own `previousNavigation`.\n *\n * @publicApi\n */\nexport interface Navigation {\n  /**\n   * The unique identifier of the current navigation.\n   */\n  id: number;\n  /**\n   * The target URL passed into the `Router#navigateByUrl()` call before navigation. This is\n   * the value before the router has parsed or applied redirects to it.\n   */\n  initialUrl: UrlTree;\n  /**\n   * The initial target URL after being parsed with `UrlHandlingStrategy.extract()`.\n   */\n  extractedUrl: UrlTree;\n  /**\n   * The extracted URL after redirects have been applied.\n   * This URL may not be available immediately, therefore this property can be `undefined`.\n   * It is guaranteed to be set after the `RoutesRecognized` event fires.\n   */\n  finalUrl?: UrlTree;\n  /**\n   * `UrlTree` to use when updating the browser URL for the navigation when `extras.browserUrl` is\n   * defined.\n   * @internal\n   */\n  readonly targetBrowserUrl?: UrlTree | string;\n  /**\n   * TODO(atscott): If we want to make StateManager public, they will need access to this. Note that\n   * it's already eventually exposed through router.routerState.\n   * @internal\n   */\n  targetRouterState?: RouterState;\n  /**\n   * Identifies how this navigation was triggered.\n   *\n   * * 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--Triggered by a popstate event.\n   * * 'hashchange'--Triggered by a hashchange event.\n   */\n  trigger: 'imperative' | 'popstate' | 'hashchange';\n  /**\n   * Options that controlled the strategy used for this navigation.\n   * See `NavigationExtras`.\n   */\n  extras: NavigationExtras;\n  /**\n   * The previously successful `Navigation` object. Only one previous navigation\n   * is available, therefore this previous `Navigation` object has a `null` value\n   * for its own `previousNavigation`.\n   */\n  previousNavigation: Navigation | null;\n}\n\nexport interface NavigationTransition {\n  id: number;\n  currentUrlTree: UrlTree;\n  extractedUrl: UrlTree;\n  currentRawUrl: UrlTree;\n  urlAfterRedirects?: UrlTree;\n  rawUrl: UrlTree;\n  extras: NavigationExtras;\n  resolve: (value: boolean | PromiseLike<boolean>) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<boolean>;\n  source: NavigationTrigger;\n  restoredState: RestoredState | null;\n  currentSnapshot: RouterStateSnapshot;\n  targetSnapshot: RouterStateSnapshot | null;\n  currentRouterState: RouterState;\n  targetRouterState: RouterState | null;\n  guards: Checks;\n  guardsResult: GuardResult | null;\n}\n\n/**\n * The interface from the Router needed by the transitions. Used to avoid a circular dependency on\n * Router. This interface should be whittled down with future refactors. For example, we do not need\n * to get `UrlSerializer` from the Router. We can instead inject it in `NavigationTransitions`\n * directly.\n */\ninterface InternalRouterInterface {\n  config: Routes;\n  // All of these are public API of router interface and can change during runtime because they are\n  // writeable. Ideally, these would be removed and the values retrieved instead from the values\n  // available in DI.\n  errorHandler: (error: any) => any;\n  navigated: boolean;\n  routeReuseStrategy: RouteReuseStrategy;\n  onSameUrlNavigation: 'reload' | 'ignore';\n}\n\nexport const NAVIGATION_ERROR_HANDLER = new InjectionToken<\n  (error: NavigationError) => unknown | RedirectCommand\n>(typeof ngDevMode === 'undefined' || ngDevMode ? 'navigation error handler' : '');\n\n@Injectable({providedIn: 'root'})\nexport class NavigationTransitions {\n  currentNavigation: Navigation | null = null;\n  currentTransition: NavigationTransition | null = null;\n  lastSuccessfulNavigation: Navigation | null = null;\n  /**\n   * These events are used to communicate back to the Router about the state of the transition. The\n   * Router wants to respond to these events in various ways. Because the `NavigationTransition`\n   * class is not public, this event subject is not publicly exposed.\n   */\n  readonly events = new Subject<Event | BeforeActivateRoutes | RedirectRequest>();\n  /**\n   * Used to abort the current transition with an error.\n   */\n  readonly transitionAbortSubject = new Subject<Error>();\n  private readonly configLoader = inject(RouterConfigLoader);\n  private readonly environmentInjector = inject(EnvironmentInjector);\n  private readonly urlSerializer = inject(UrlSerializer);\n  private readonly rootContexts = inject(ChildrenOutletContexts);\n  private readonly location = inject(Location);\n  private readonly inputBindingEnabled = inject(INPUT_BINDER, {optional: true}) !== null;\n  private readonly titleStrategy?: TitleStrategy = inject(TitleStrategy);\n  private readonly options = inject(ROUTER_CONFIGURATION, {optional: true}) || {};\n  private readonly paramsInheritanceStrategy =\n    this.options.paramsInheritanceStrategy || 'emptyOnly';\n  private readonly urlHandlingStrategy = inject(UrlHandlingStrategy);\n  private readonly createViewTransition = inject(CREATE_VIEW_TRANSITION, {optional: true});\n  private readonly navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, {optional: true});\n\n  navigationId = 0;\n  get hasRequestedNavigation() {\n    return this.navigationId !== 0;\n  }\n  private transitions?: BehaviorSubject<NavigationTransition>;\n  /**\n   * Hook that enables you to pause navigation after the preactivation phase.\n   * Used by `RouterModule`.\n   *\n   * @internal\n   */\n  afterPreactivation: () => Observable<void> = () => of(void 0);\n  /** @internal */\n  rootComponentType: Type<any> | null = null;\n\n  constructor() {\n    const onLoadStart = (r: Route) => this.events.next(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.events.next(new RouteConfigLoadEnd(r));\n    this.configLoader.onLoadEndListener = onLoadEnd;\n    this.configLoader.onLoadStartListener = onLoadStart;\n  }\n\n  complete() {\n    this.transitions?.complete();\n  }\n\n  handleNavigationRequest(\n    request: Pick<\n      NavigationTransition,\n      | 'source'\n      | 'restoredState'\n      | 'currentUrlTree'\n      | 'currentRawUrl'\n      | 'rawUrl'\n      | 'extras'\n      | 'resolve'\n      | 'reject'\n      | 'promise'\n      | 'currentSnapshot'\n      | 'currentRouterState'\n    >,\n  ) {\n    const id = ++this.navigationId;\n    this.transitions?.next({...this.transitions.value, ...request, id});\n  }\n\n  setupNavigations(\n    router: InternalRouterInterface,\n    initialUrlTree: UrlTree,\n    initialRouterState: RouterState,\n  ): Observable<NavigationTransition> {\n    this.transitions = new BehaviorSubject<NavigationTransition>({\n      id: 0,\n      currentUrlTree: initialUrlTree,\n      currentRawUrl: initialUrlTree,\n      extractedUrl: this.urlHandlingStrategy.extract(initialUrlTree),\n      urlAfterRedirects: this.urlHandlingStrategy.extract(initialUrlTree),\n      rawUrl: initialUrlTree,\n      extras: {},\n      resolve: () => {},\n      reject: () => {},\n      promise: Promise.resolve(true),\n      source: IMPERATIVE_NAVIGATION,\n      restoredState: null,\n      currentSnapshot: initialRouterState.snapshot,\n      targetSnapshot: null,\n      currentRouterState: initialRouterState,\n      targetRouterState: null,\n      guards: {canActivateChecks: [], canDeactivateChecks: []},\n      guardsResult: null,\n    });\n    return this.transitions.pipe(\n      filter((t) => t.id !== 0),\n\n      // Extract URL\n      map(\n        (t) =>\n          ({\n            ...t,\n            extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl),\n          }) as NavigationTransition,\n      ),\n\n      // Using switchMap so we cancel executing navigations when a new one comes in\n      switchMap((overallTransitionState) => {\n        let completed = false;\n        let errored = false;\n        return of(overallTransitionState).pipe(\n          switchMap((t) => {\n            // It is possible that `switchMap` fails to cancel previous navigations if a new one happens synchronously while the operator\n            // is processing the `next` notification of that previous navigation. This can happen when a new navigation (say 2) cancels a\n            // previous one (1) and yet another navigation (3) happens synchronously in response to the `NavigationCancel` event for (1).\n            // https://github.com/ReactiveX/rxjs/issues/7455\n            if (this.navigationId > overallTransitionState.id) {\n              const cancellationReason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}`\n                  : '';\n              this.cancelNavigationTransition(\n                overallTransitionState,\n                cancellationReason,\n                NavigationCancellationCode.SupersededByNewNavigation,\n              );\n              return EMPTY;\n            }\n            this.currentTransition = overallTransitionState;\n            // Store the Navigation object\n            this.currentNavigation = {\n              id: t.id,\n              initialUrl: t.rawUrl,\n              extractedUrl: t.extractedUrl,\n              targetBrowserUrl:\n                typeof t.extras.browserUrl === 'string'\n                  ? this.urlSerializer.parse(t.extras.browserUrl)\n                  : t.extras.browserUrl,\n              trigger: t.source,\n              extras: t.extras,\n              previousNavigation: !this.lastSuccessfulNavigation\n                ? null\n                : {\n                    ...this.lastSuccessfulNavigation,\n                    previousNavigation: null,\n                  },\n            };\n            const urlTransition =\n              !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();\n\n            const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;\n            if (!urlTransition && onSameUrlNavigation !== 'reload') {\n              const reason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.`\n                  : '';\n              this.events.next(\n                new NavigationSkipped(\n                  t.id,\n                  this.urlSerializer.serialize(t.rawUrl),\n                  reason,\n                  NavigationSkippedCode.IgnoredSameUrlNavigation,\n                ),\n              );\n              t.resolve(false);\n              return EMPTY;\n            }\n\n            if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {\n              return of(t).pipe(\n                // Fire NavigationStart event\n                switchMap((t) => {\n                  const transition = this.transitions?.getValue();\n                  this.events.next(\n                    new NavigationStart(\n                      t.id,\n                      this.urlSerializer.serialize(t.extractedUrl),\n                      t.source,\n                      t.restoredState,\n                    ),\n                  );\n                  if (transition !== this.transitions?.getValue()) {\n                    return EMPTY;\n                  }\n\n                  // This delay is required to match old behavior that forced\n                  // navigation to always be async\n                  return Promise.resolve(t);\n                }),\n\n                // Recognize\n                recognize(\n                  this.environmentInjector,\n                  this.configLoader,\n                  this.rootComponentType,\n                  router.config,\n                  this.urlSerializer,\n                  this.paramsInheritanceStrategy,\n                ),\n\n                // Update URL if in `eager` update mode\n                tap((t) => {\n                  overallTransitionState.targetSnapshot = t.targetSnapshot;\n                  overallTransitionState.urlAfterRedirects = t.urlAfterRedirects;\n                  this.currentNavigation = {\n                    ...this.currentNavigation!,\n                    finalUrl: t.urlAfterRedirects,\n                  };\n\n                  // Fire RoutesRecognized\n                  const routesRecognized = new RoutesRecognized(\n                    t.id,\n                    this.urlSerializer.serialize(t.extractedUrl),\n                    this.urlSerializer.serialize(t.urlAfterRedirects!),\n                    t.targetSnapshot!,\n                  );\n                  this.events.next(routesRecognized);\n                }),\n              );\n            } else if (\n              urlTransition &&\n              this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)\n            ) {\n              /* When the current URL shouldn't be processed, but the previous one\n               * was, we handle this \"error condition\" by navigating to the\n               * previously successful URL, but leaving the URL intact.*/\n              const {id, extractedUrl, source, restoredState, extras} = t;\n              const navStart = new NavigationStart(\n                id,\n                this.urlSerializer.serialize(extractedUrl),\n                source,\n                restoredState,\n              );\n              this.events.next(navStart);\n              const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;\n\n              this.currentTransition = overallTransitionState = {\n                ...t,\n                targetSnapshot,\n                urlAfterRedirects: extractedUrl,\n                extras: {...extras, skipLocationChange: false, replaceUrl: false},\n              };\n              this.currentNavigation!.finalUrl = extractedUrl;\n              return of(overallTransitionState);\n            } else {\n              /* When neither the current or previous URL can be processed, do\n               * nothing other than update router's internal reference to the\n               * current \"settled\" URL. This way the next navigation will be coming\n               * from the current URL in the browser.\n               */\n              const reason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation was ignored because the UrlHandlingStrategy` +\n                    ` indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.`\n                  : '';\n              this.events.next(\n                new NavigationSkipped(\n                  t.id,\n                  this.urlSerializer.serialize(t.extractedUrl),\n                  reason,\n                  NavigationSkippedCode.IgnoredByUrlHandlingStrategy,\n                ),\n              );\n              t.resolve(false);\n              return EMPTY;\n            }\n          }),\n\n          // --- GUARDS ---\n          tap((t) => {\n            const guardsStart = new GuardsCheckStart(\n              t.id,\n              this.urlSerializer.serialize(t.extractedUrl),\n              this.urlSerializer.serialize(t.urlAfterRedirects!),\n              t.targetSnapshot!,\n            );\n            this.events.next(guardsStart);\n          }),\n\n          map((t) => {\n            this.currentTransition = overallTransitionState = {\n              ...t,\n              guards: getAllRouteGuards(t.targetSnapshot!, t.currentSnapshot, this.rootContexts),\n            };\n            return overallTransitionState;\n          }),\n\n          checkGuards(this.environmentInjector, (evt: Event) => this.events.next(evt)),\n          tap((t) => {\n            overallTransitionState.guardsResult = t.guardsResult;\n            if (t.guardsResult && typeof t.guardsResult !== 'boolean') {\n              throw redirectingNavigationError(this.urlSerializer, t.guardsResult);\n            }\n\n            const guardsEnd = new GuardsCheckEnd(\n              t.id,\n              this.urlSerializer.serialize(t.extractedUrl),\n              this.urlSerializer.serialize(t.urlAfterRedirects!),\n              t.targetSnapshot!,\n              !!t.guardsResult,\n            );\n            this.events.next(guardsEnd);\n          }),\n\n          filter((t) => {\n            if (!t.guardsResult) {\n              this.cancelNavigationTransition(t, '', NavigationCancellationCode.GuardRejected);\n              return false;\n            }\n            return true;\n          }),\n\n          // --- RESOLVE ---\n          switchTap((t) => {\n            if (t.guards.canActivateChecks.length) {\n              return of(t).pipe(\n                tap((t) => {\n                  const resolveStart = new ResolveStart(\n                    t.id,\n                    this.urlSerializer.serialize(t.extractedUrl),\n                    this.urlSerializer.serialize(t.urlAfterRedirects!),\n                    t.targetSnapshot!,\n                  );\n                  this.events.next(resolveStart);\n                }),\n                switchMap((t) => {\n                  let dataResolved = false;\n                  return of(t).pipe(\n                    resolveData(this.paramsInheritanceStrategy, this.environmentInjector),\n                    tap({\n                      next: () => (dataResolved = true),\n                      complete: () => {\n                        if (!dataResolved) {\n                          this.cancelNavigationTransition(\n                            t,\n                            typeof ngDevMode === 'undefined' || ngDevMode\n                              ? `At least one route resolver didn't emit any value.`\n                              : '',\n                            NavigationCancellationCode.NoDataFromResolver,\n                          );\n                        }\n                      },\n                    }),\n                  );\n                }),\n                tap((t) => {\n                  const resolveEnd = new ResolveEnd(\n                    t.id,\n                    this.urlSerializer.serialize(t.extractedUrl),\n                    this.urlSerializer.serialize(t.urlAfterRedirects!),\n                    t.targetSnapshot!,\n                  );\n                  this.events.next(resolveEnd);\n                }),\n              );\n            }\n            return undefined;\n          }),\n\n          // --- LOAD COMPONENTS ---\n          switchTap((t: NavigationTransition) => {\n            const loadComponents = (route: ActivatedRouteSnapshot): Array<Observable<void>> => {\n              const loaders: Array<Observable<void>> = [];\n              if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {\n                loaders.push(\n                  this.configLoader.loadComponent(route.routeConfig).pipe(\n                    tap((loadedComponent) => {\n                      route.component = loadedComponent;\n                    }),\n                    map(() => void 0),\n                  ),\n                );\n              }\n              for (const child of route.children) {\n                loaders.push(...loadComponents(child));\n              }\n              return loaders;\n            };\n            return combineLatest(loadComponents(t.targetSnapshot!.root)).pipe(\n              defaultIfEmpty(null),\n              take(1),\n            );\n          }),\n\n          switchTap(() => this.afterPreactivation()),\n\n          switchMap(() => {\n            const {currentSnapshot, targetSnapshot} = overallTransitionState;\n            const viewTransitionStarted = this.createViewTransition?.(\n              this.environmentInjector,\n              currentSnapshot.root,\n              targetSnapshot!.root,\n            );\n\n            // If view transitions are enabled, block the navigation until the view\n            // transition callback starts. Otherwise, continue immediately.\n            return viewTransitionStarted\n              ? from(viewTransitionStarted).pipe(map(() => overallTransitionState))\n              : of(overallTransitionState);\n          }),\n\n          map((t: NavigationTransition) => {\n            const targetRouterState = createRouterState(\n              router.routeReuseStrategy,\n              t.targetSnapshot!,\n              t.currentRouterState,\n            );\n            this.currentTransition = overallTransitionState = {...t, targetRouterState};\n            this.currentNavigation!.targetRouterState = targetRouterState;\n            return overallTransitionState;\n          }),\n\n          tap(() => {\n            this.events.next(new BeforeActivateRoutes());\n          }),\n\n          activateRoutes(\n            this.rootContexts,\n            router.routeReuseStrategy,\n            (evt: Event) => this.events.next(evt),\n            this.inputBindingEnabled,\n          ),\n\n          // Ensure that if some observable used to drive the transition doesn't\n          // complete, the navigation still finalizes This should never happen, but\n          // this is done as a safety measure to avoid surfacing this error (#49567).\n          take(1),\n\n          tap({\n            next: (t: NavigationTransition) => {\n              completed = true;\n              this.lastSuccessfulNavigation = this.currentNavigation;\n              this.events.next(\n                new NavigationEnd(\n                  t.id,\n                  this.urlSerializer.serialize(t.extractedUrl),\n                  this.urlSerializer.serialize(t.urlAfterRedirects!),\n                ),\n              );\n              this.titleStrategy?.updateTitle(t.targetRouterState!.snapshot);\n              t.resolve(true);\n            },\n            complete: () => {\n              completed = true;\n            },\n          }),\n\n          // There used to be a lot more logic happening directly within the\n          // transition Observable. Some of this logic has been refactored out to\n          // other places but there may still be errors that happen there. This gives\n          // us a way to cancel the transition from the outside. This may also be\n          // required in the future to support something like the abort signal of the\n          // Navigation API where the navigation gets aborted from outside the\n          // transition.\n          takeUntil(\n            this.transitionAbortSubject.pipe(\n              tap((err) => {\n                throw err;\n              }),\n            ),\n          ),\n\n          finalize(() => {\n            /* When the navigation stream finishes either through error or success,\n             * we set the `completed` or `errored` flag. However, there are some\n             * situations where we could get here without either of those being set.\n             * For instance, a redirect during NavigationStart. Therefore, this is a\n             * catch-all to make sure the NavigationCancel event is fired when a\n             * navigation gets cancelled but not caught by other means. */\n            if (!completed && !errored) {\n              const cancelationReason =\n                typeof ngDevMode === 'undefined' || ngDevMode\n                  ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}`\n                  : '';\n              this.cancelNavigationTransition(\n                overallTransitionState,\n                cancelationReason,\n                NavigationCancellationCode.SupersededByNewNavigation,\n              );\n            }\n            // Only clear current navigation if it is still set to the one that\n            // finalized.\n            if (this.currentTransition?.id === overallTransitionState.id) {\n              this.currentNavigation = null;\n              this.currentTransition = null;\n            }\n          }),\n          catchError((e) => {\n            errored = true;\n            /* This error type is issued during Redirect, and is handled as a\n             * cancellation rather than an error. */\n            if (isNavigationCancelingError(e)) {\n              this.events.next(\n                new NavigationCancel(\n                  overallTransitionState.id,\n                  this.urlSerializer.serialize(overallTransitionState.extractedUrl),\n                  e.message,\n                  e.cancellationCode,\n                ),\n              );\n\n              // When redirecting, we need to delay resolving the navigation\n              // promise and push it to the redirect navigation\n              if (!isRedirectingNavigationCancelingError(e)) {\n                overallTransitionState.resolve(false);\n              } else {\n                this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));\n              }\n\n              /* All other errors should reset to the router's internal URL reference\n               * to the pre-error state. */\n            } else {\n              const navigationError = new NavigationError(\n                overallTransitionState.id,\n                this.urlSerializer.serialize(overallTransitionState.extractedUrl),\n                e,\n                overallTransitionState.targetSnapshot ?? undefined,\n              );\n\n              try {\n                const navigationErrorHandlerResult = runInInjectionContext(\n                  this.environmentInjector,\n                  () => this.navigationErrorHandler?.(navigationError),\n                );\n\n                if (navigationErrorHandlerResult instanceof RedirectCommand) {\n                  const {message, cancellationCode} = redirectingNavigationError(\n                    this.urlSerializer,\n                    navigationErrorHandlerResult,\n                  );\n                  this.events.next(\n                    new NavigationCancel(\n                      overallTransitionState.id,\n                      this.urlSerializer.serialize(overallTransitionState.extractedUrl),\n                      message,\n                      cancellationCode,\n                    ),\n                  );\n                  this.events.next(\n                    new RedirectRequest(\n                      navigationErrorHandlerResult.redirectTo,\n                      navigationErrorHandlerResult.navigationBehaviorOptions,\n                    ),\n                  );\n                } else {\n                  this.events.next(navigationError);\n                  // TODO(atscott): remove deprecation on errorHandler in RouterModule.forRoot and change behavior to provide NAVIGATION_ERROR_HANDLER\n                  // Note: Still remove public `Router.errorHandler` property, as this is supposed to be configured in DI.\n                  const errorHandlerResult = router.errorHandler(e);\n                  overallTransitionState.resolve(!!errorHandlerResult);\n                }\n              } catch (ee) {\n                // TODO(atscott): consider flipping the default behavior of\n                // resolveNavigationPromiseOnError to be `resolve(false)` when\n                // undefined. This is the most sane thing to do given that\n                // applications very rarely handle the promise rejection and, as a\n                // result, would get \"unhandled promise rejection\" console logs.\n                // The vast majority of applications would not be affected by this\n                // change so omitting a migration seems reasonable. Instead,\n                // applications that rely on rejection can specifically opt-in to the\n                // old behavior.\n                if (this.options.resolveNavigationPromiseOnError) {\n                  overallTransitionState.resolve(false);\n                } else {\n                  overallTransitionState.reject(ee);\n                }\n              }\n            }\n\n            return EMPTY;\n          }),\n        );\n        // casting because `pipe` returns observable({}) when called with 8+ arguments\n      }),\n    ) as Observable<NavigationTransition>;\n  }\n\n  private cancelNavigationTransition(\n    t: NavigationTransition,\n    reason: string,\n    code: NavigationCancellationCode,\n  ) {\n    const navCancel = new NavigationCancel(\n      t.id,\n      this.urlSerializer.serialize(t.extractedUrl),\n      reason,\n      code,\n    );\n    this.events.next(navCancel);\n    t.resolve(false);\n  }\n\n  /**\n   * @returns Whether we're navigating to somewhere that is not what the Router is\n   * currently set to.\n   */\n  private isUpdatingInternalState() {\n    // TODO(atscott): The serializer should likely be used instead of\n    // `UrlTree.toString()`. Custom serializers are often written to handle\n    // things better than the default one (objects, for example will be\n    // [Object object] with the custom serializer and be \"the same\" when they\n    // aren't).\n    // (Same for isUpdatedBrowserUrl)\n    return (\n      this.currentTransition?.extractedUrl.toString() !==\n      this.currentTransition?.currentUrlTree.toString()\n    );\n  }\n\n  /**\n   * @returns Whether we're updating the browser URL to something new (navigation is going\n   * to somewhere not displayed in the URL bar and we will update the URL\n   * bar if navigation succeeds).\n   */\n  private isUpdatedBrowserUrl() {\n    // The extracted URL is the part of the URL that this application cares about. `extract` may\n    // return only part of the browser URL and that part may have not changed even if some other\n    // portion of the URL did.\n    const currentBrowserUrl = this.urlHandlingStrategy.extract(\n      this.urlSerializer.parse(this.location.path(true)),\n    );\n    const targetBrowserUrl =\n      this.currentNavigation?.targetBrowserUrl ?? this.currentNavigation?.extractedUrl;\n    return (\n      currentBrowserUrl.toString() !== targetBrowserUrl?.toString() &&\n      !this.currentNavigation?.extras.skipLocationChange\n    );\n  }\n}\n\nexport function isBrowserTriggeredNavigation(source: NavigationTrigger) {\n  return source !== IMPERATIVE_NAVIGATION;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentRef, inject, Injectable} from '@angular/core';\n\nimport {OutletContext} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @description\n *\n * Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @publicApi\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  contexts: Map<string, OutletContext>;\n  componentRef: ComponentRef<any>;\n  route: TreeNode<ActivatedRoute>;\n};\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: () => inject(DefaultRouteReuseStrategy)})\nexport abstract class RouteReuseStrategy {\n  /** Determines if this route (and its subtree) should be detached to be reused later */\n  abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n\n  /**\n   * Stores the detached route.\n   *\n   * Storing a `null` value should erase the previously stored value.\n   */\n  abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle | null): void;\n\n  /** Determines if this route (and its subtree) should be reattached */\n  abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n\n  /** Retrieves the previously stored route */\n  abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;\n\n  /** Determines if a route should be reused */\n  abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the route parameters, query parameters or fragment change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nexport abstract class BaseRouteReuseStrategy implements RouteReuseStrategy {\n  /**\n   * Whether the given route should detach for later reuse.\n   * Always returns false for `BaseRouteReuseStrategy`.\n   * */\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  /**\n   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n   */\n  store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n\n  /** Returns `false`, meaning the route (and its subtree) is never reattached */\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  /** Returns `null` because this strategy does not store routes for later re-use. */\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  /**\n   * Determines if a route should be reused.\n   * This strategy returns `true` when the future route config and current route config are\n   * identical.\n   */\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n\n@Injectable({providedIn: 'root'})\nexport class DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location} from '@angular/common';\nimport {inject, Injectable} from '@angular/core';\nimport {SubscriptionLike} from 'rxjs';\n\nimport {\n  BeforeActivateRoutes,\n  Event,\n  NavigationCancel,\n  NavigationCancellationCode,\n  NavigationEnd,\n  NavigationError,\n  NavigationSkipped,\n  NavigationStart,\n  PrivateRouterEvents,\n  RoutesRecognized,\n} from '../events';\nimport {Navigation, RestoredState} from '../navigation_transition';\nimport {ROUTER_CONFIGURATION} from '../router_config';\nimport {createEmptyState, RouterState} from '../router_state';\nimport {UrlHandlingStrategy} from '../url_handling_strategy';\nimport {UrlSerializer, UrlTree} from '../url_tree';\n\n@Injectable({providedIn: 'root', useFactory: () => inject(HistoryStateManager)})\nexport abstract class StateManager {\n  /**\n   * Returns the currently activated `UrlTree`.\n   *\n   * This `UrlTree` shows only URLs that the `Router` is configured to handle (through\n   * `UrlHandlingStrategy`).\n   *\n   * The value is set after finding the route config tree to activate but before activating the\n   * route.\n   */\n  abstract getCurrentUrlTree(): UrlTree;\n\n  /**\n   * Returns a `UrlTree` that is represents what the browser is actually showing.\n   *\n   * In the life of a navigation transition:\n   * 1. When a navigation begins, the raw `UrlTree` is updated to the full URL that's being\n   * navigated to.\n   * 2. During a navigation, redirects are applied, which might only apply to _part_ of the URL (due\n   * to `UrlHandlingStrategy`).\n   * 3. Just before activation, the raw `UrlTree` is updated to include the redirects on top of the\n   * original raw URL.\n   *\n   * Note that this is _only_ here to support `UrlHandlingStrategy.extract` and\n   * `UrlHandlingStrategy.shouldProcessUrl`. Without those APIs, the current `UrlTree` would not\n   * deviated from the raw `UrlTree`.\n   *\n   * For `extract`, a raw `UrlTree` is needed because `extract` may only return part\n   * of the navigation URL. Thus, the current `UrlTree` may only represent _part_ of the browser\n   * URL. When a navigation gets cancelled and the router needs to reset the URL or a new navigation\n   * occurs, it needs to know the _whole_ browser URL, not just the part handled by\n   * `UrlHandlingStrategy`.\n   * For `shouldProcessUrl`, when the return is `false`, the router ignores the navigation but\n   * still updates the raw `UrlTree` with the assumption that the navigation was caused by the\n   * location change listener due to a URL update by the AngularJS router. In this case, the router\n   * still need to know what the browser's URL is for future navigations.\n   */\n  abstract getRawUrlTree(): UrlTree;\n\n  /** Returns the current state stored by the browser for the current history entry. */\n  abstract restoredState(): RestoredState | null | undefined;\n\n  /** Returns the current RouterState. */\n  abstract getRouterState(): RouterState;\n\n  /**\n   * Registers a listener that is called whenever the current history entry changes by some API\n   * outside the Router. This includes user-activated changes like back buttons and link clicks, but\n   * also includes programmatic APIs called by non-Router JavaScript.\n   */\n  abstract registerNonRouterCurrentEntryChangeListener(\n    listener: (url: string, state: RestoredState | null | undefined) => void,\n  ): SubscriptionLike;\n\n  /**\n   * Handles a navigation event sent from the Router. These are typically events that indicate a\n   * navigation has started, progressed, been cancelled, or finished.\n   */\n  abstract handleRouterEvent(e: Event | PrivateRouterEvents, currentTransition: Navigation): void;\n}\n\n@Injectable({providedIn: 'root'})\nexport class HistoryStateManager extends StateManager {\n  private readonly location = inject(Location);\n  private readonly urlSerializer = inject(UrlSerializer);\n  private readonly options = inject(ROUTER_CONFIGURATION, {optional: true}) || {};\n  private readonly canceledNavigationResolution =\n    this.options.canceledNavigationResolution || 'replace';\n\n  private urlHandlingStrategy = inject(UrlHandlingStrategy);\n  private urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n\n  private currentUrlTree = new UrlTree();\n\n  override getCurrentUrlTree() {\n    return this.currentUrlTree;\n  }\n\n  private rawUrlTree = this.currentUrlTree;\n\n  override getRawUrlTree() {\n    return this.rawUrlTree;\n  }\n\n  /**\n   * The id of the currently active page in the router.\n   * Updated to the transition's target id on a successful navigation.\n   *\n   * This is used to track what page the router last activated. When an attempted navigation fails,\n   * the router can then use this to compute how to restore the state back to the previously active\n   * page.\n   */\n  private currentPageId: number = 0;\n  private lastSuccessfulId: number = -1;\n\n  override restoredState(): RestoredState | null | undefined {\n    return this.location.getState() as RestoredState | null | undefined;\n  }\n\n  /**\n   * The ÉµrouterPageId of whatever page is currently active in the browser history. This is\n   * important for computing the target page id for new navigations because we need to ensure each\n   * page id in the browser history is 1 more than the previous entry.\n   */\n  private get browserPageId(): number {\n    if (this.canceledNavigationResolution !== 'computed') {\n      return this.currentPageId;\n    }\n    return this.restoredState()?.ÉµrouterPageId ?? this.currentPageId;\n  }\n\n  private routerState = createEmptyState(null);\n\n  override getRouterState() {\n    return this.routerState;\n  }\n\n  private stateMemento = this.createStateMemento();\n\n  private createStateMemento() {\n    return {\n      rawUrlTree: this.rawUrlTree,\n      currentUrlTree: this.currentUrlTree,\n      routerState: this.routerState,\n    };\n  }\n\n  override registerNonRouterCurrentEntryChangeListener(\n    listener: (url: string, state: RestoredState | null | undefined) => void,\n  ): SubscriptionLike {\n    return this.location.subscribe((event) => {\n      if (event['type'] === 'popstate') {\n        listener(event['url']!, event.state as RestoredState | null | undefined);\n      }\n    });\n  }\n\n  override handleRouterEvent(e: Event | PrivateRouterEvents, currentTransition: Navigation) {\n    if (e instanceof NavigationStart) {\n      this.stateMemento = this.createStateMemento();\n    } else if (e instanceof NavigationSkipped) {\n      this.rawUrlTree = currentTransition.initialUrl;\n    } else if (e instanceof RoutesRecognized) {\n      if (this.urlUpdateStrategy === 'eager') {\n        if (!currentTransition.extras.skipLocationChange) {\n          const rawUrl = this.urlHandlingStrategy.merge(\n            currentTransition.finalUrl!,\n            currentTransition.initialUrl,\n          );\n          this.setBrowserUrl(currentTransition.targetBrowserUrl ?? rawUrl, currentTransition);\n        }\n      }\n    } else if (e instanceof BeforeActivateRoutes) {\n      this.currentUrlTree = currentTransition.finalUrl!;\n      this.rawUrlTree = this.urlHandlingStrategy.merge(\n        currentTransition.finalUrl!,\n        currentTransition.initialUrl,\n      );\n      this.routerState = currentTransition.targetRouterState!;\n      if (this.urlUpdateStrategy === 'deferred' && !currentTransition.extras.skipLocationChange) {\n        this.setBrowserUrl(\n          currentTransition.targetBrowserUrl ?? this.rawUrlTree,\n          currentTransition,\n        );\n      }\n    } else if (\n      e instanceof NavigationCancel &&\n      (e.code === NavigationCancellationCode.GuardRejected ||\n        e.code === NavigationCancellationCode.NoDataFromResolver)\n    ) {\n      this.restoreHistory(currentTransition);\n    } else if (e instanceof NavigationError) {\n      this.restoreHistory(currentTransition, true);\n    } else if (e instanceof NavigationEnd) {\n      this.lastSuccessfulId = e.id;\n      this.currentPageId = this.browserPageId;\n    }\n  }\n\n  private setBrowserUrl(url: UrlTree | string, transition: Navigation) {\n    const path = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;\n    if (this.location.isCurrentPathEqualTo(path) || !!transition.extras.replaceUrl) {\n      // replacements do not update the target page\n      const currentBrowserPageId = this.browserPageId;\n      const state = {\n        ...transition.extras.state,\n        ...this.generateNgRouterState(transition.id, currentBrowserPageId),\n      };\n      this.location.replaceState(path, '', state);\n    } else {\n      const state = {\n        ...transition.extras.state,\n        ...this.generateNgRouterState(transition.id, this.browserPageId + 1),\n      };\n      this.location.go(path, '', state);\n    }\n  }\n\n  /**\n   * Performs the necessary rollback action to restore the browser URL to the\n   * state before the transition.\n   */\n  private restoreHistory(navigation: Navigation, restoringFromCaughtError = false) {\n    if (this.canceledNavigationResolution === 'computed') {\n      const currentBrowserPageId = this.browserPageId;\n      const targetPagePosition = this.currentPageId - currentBrowserPageId;\n      if (targetPagePosition !== 0) {\n        this.location.historyGo(targetPagePosition);\n      } else if (this.currentUrlTree === navigation.finalUrl && targetPagePosition === 0) {\n        // We got to the activation stage (where currentUrlTree is set to the navigation's\n        // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).\n        // We still need to reset the router state back to what it was when the navigation started.\n        this.resetState(navigation);\n        this.resetUrlToCurrentUrlTree();\n      } else {\n        // The browser URL and router state was not updated before the navigation cancelled so\n        // there's no restoration needed.\n      }\n    } else if (this.canceledNavigationResolution === 'replace') {\n      // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op\n      // for `deferred` navigations that haven't change the internal state yet because guards\n      // reject. For 'eager' navigations, it seems like we also really should reset the state\n      // because the navigation was cancelled. Investigate if this can be done by running TGP.\n      if (restoringFromCaughtError) {\n        this.resetState(navigation);\n      }\n      this.resetUrlToCurrentUrlTree();\n    }\n  }\n\n  private resetState(navigation: Navigation): void {\n    this.routerState = this.stateMemento.routerState;\n    this.currentUrlTree = this.stateMemento.currentUrlTree;\n    // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be\n    // configured to handle only part of the navigation URL. This means we would only want to reset\n    // the part of the navigation handled by the Angular router rather than the whole URL. In\n    // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL\n    // when merging, such as the query params so they are not lost on a refresh.\n    this.rawUrlTree = this.urlHandlingStrategy.merge(\n      this.currentUrlTree,\n      navigation.finalUrl ?? this.rawUrlTree,\n    );\n  }\n\n  private resetUrlToCurrentUrlTree(): void {\n    this.location.replaceState(\n      this.urlSerializer.serialize(this.rawUrlTree),\n      '',\n      this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId),\n    );\n  }\n\n  private generateNgRouterState(navigationId: number, routerPageId: number) {\n    if (this.canceledNavigationResolution === 'computed') {\n      return {navigationId, ÉµrouterPageId: routerPageId};\n    }\n    return {navigationId};\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\nimport {filter, map, take} from 'rxjs/operators';\n\nimport {\n  Event,\n  NavigationCancel,\n  NavigationCancellationCode,\n  NavigationEnd,\n  NavigationError,\n  NavigationSkipped,\n} from '../events';\n\nenum NavigationResult {\n  COMPLETE,\n  FAILED,\n  REDIRECTING,\n}\n\n/**\n * Performs the given action once the router finishes its next/current navigation.\n *\n * The navigation is considered complete under the following conditions:\n * - `NavigationCancel` event emits and the code is not `NavigationCancellationCode.Redirect` or\n * `NavigationCancellationCode.SupersededByNewNavigation`. In these cases, the\n * redirecting/superseding navigation must finish.\n * - `NavigationError`, `NavigationEnd`, or `NavigationSkipped` event emits\n */\nexport function afterNextNavigation(router: {events: Observable<Event>}, action: () => void) {\n  router.events\n    .pipe(\n      filter(\n        (e): e is NavigationEnd | NavigationCancel | NavigationError | NavigationSkipped =>\n          e instanceof NavigationEnd ||\n          e instanceof NavigationCancel ||\n          e instanceof NavigationError ||\n          e instanceof NavigationSkipped,\n      ),\n      map((e) => {\n        if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {\n          return NavigationResult.COMPLETE;\n        }\n        const redirecting =\n          e instanceof NavigationCancel\n            ? e.code === NavigationCancellationCode.Redirect ||\n              e.code === NavigationCancellationCode.SupersededByNewNavigation\n            : false;\n        return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;\n      }),\n      filter(\n        (result): result is NavigationResult.COMPLETE | NavigationResult.FAILED =>\n          result !== NavigationResult.REDIRECTING,\n      ),\n      take(1),\n    )\n    .subscribe(() => {\n      action();\n    });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Location} from '@angular/common';\nimport {\n  inject,\n  Injectable,\n  Type,\n  ÉµConsole as Console,\n  ÉµPendingTasks as PendingTasks,\n  ÉµRuntimeError as RuntimeError,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\n\nimport {createSegmentGroupFromRoute, createUrlTreeFromSegmentGroup} from './create_url_tree';\nimport {INPUT_BINDER} from './directives/router_outlet';\nimport {RuntimeErrorCode} from './errors';\nimport {\n  BeforeActivateRoutes,\n  Event,\n  IMPERATIVE_NAVIGATION,\n  NavigationCancel,\n  NavigationCancellationCode,\n  NavigationEnd,\n  NavigationTrigger,\n  PrivateRouterEvents,\n  RedirectRequest,\n} from './events';\nimport {NavigationBehaviorOptions, OnSameUrlNavigation, Routes} from './models';\nimport {\n  isBrowserTriggeredNavigation,\n  Navigation,\n  NavigationExtras,\n  NavigationTransitions,\n  RestoredState,\n  UrlCreationOptions,\n} from './navigation_transition';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ROUTER_CONFIGURATION} from './router_config';\nimport {ROUTES} from './router_config_loader';\nimport {Params} from './shared';\nimport {StateManager} from './statemanager/state_manager';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {\n  containsTree,\n  IsActiveMatchOptions,\n  isUrlTree,\n  UrlSegmentGroup,\n  UrlSerializer,\n  UrlTree,\n} from './url_tree';\nimport {validateConfig} from './utils/config';\nimport {afterNextNavigation} from './utils/navigations';\nimport {standardizeConfig} from './components/empty_outlet';\n\nfunction defaultErrorHandler(error: any): never {\n  throw error;\n}\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`\n * (exact = true).\n */\nexport const exactMatchOptions: IsActiveMatchOptions = {\n  paths: 'exact',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'exact',\n};\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`\n * (exact = false).\n */\nexport const subsetMatchOptions: IsActiveMatchOptions = {\n  paths: 'subset',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'subset',\n};\n\n/**\n * @description\n *\n * A service that facilitates navigation among views and URL manipulation capabilities.\n * This service is provided in the root scope and configured with [provideRouter](api/router/provideRouter).\n *\n * @see {@link Route}\n * @see {@link provideRouter}\n * @see [Routing and Navigation Guide](guide/routing/common-router-tasks).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class Router {\n  private get currentUrlTree() {\n    return this.stateManager.getCurrentUrlTree();\n  }\n  private get rawUrlTree() {\n    return this.stateManager.getRawUrlTree();\n  }\n  private disposed = false;\n  private nonRouterCurrentEntryChangeSubscription?: SubscriptionLike;\n\n  private readonly console = inject(Console);\n  private readonly stateManager = inject(StateManager);\n  private readonly options = inject(ROUTER_CONFIGURATION, {optional: true}) || {};\n  private readonly pendingTasks = inject(PendingTasks);\n  private readonly urlUpdateStrategy = this.options.urlUpdateStrategy || 'deferred';\n  private readonly navigationTransitions = inject(NavigationTransitions);\n  private readonly urlSerializer = inject(UrlSerializer);\n  private readonly location = inject(Location);\n  private readonly urlHandlingStrategy = inject(UrlHandlingStrategy);\n\n  /**\n   * The private `Subject` type for the public events exposed in the getter. This is used internally\n   * to push events to. The separate field allows us to expose separate types in the public API\n   * (i.e., an Observable rather than the Subject).\n   */\n  private _events = new Subject<Event>();\n  /**\n   * An event stream for routing events.\n   */\n  public get events(): Observable<Event> {\n    // TODO(atscott): This _should_ be events.asObservable(). However, this change requires internal\n    // cleanup: tests are doing `(route.events as Subject<Event>).next(...)`. This isn't\n    // allowed/supported but we still have to fix these or file bugs against the teams before making\n    // the change.\n    return this._events;\n  }\n  /**\n   * The current state of routing in this NgModule.\n   */\n  get routerState() {\n    return this.stateManager.getRouterState();\n  }\n\n  /**\n   * A handler for navigation errors in this NgModule.\n   *\n   * @deprecated Subscribe to the `Router` events and watch for `NavigationError` instead.\n   *   `provideRouter` has the `withNavigationErrorHandler` feature to make this easier.\n   * @see {@link withNavigationErrorHandler}\n   */\n  errorHandler: (error: any) => any = this.options.errorHandler || defaultErrorHandler;\n\n  /**\n   * True if at least one navigation event has occurred,\n   * false otherwise.\n   */\n  navigated: boolean = false;\n\n  /**\n   * A strategy for re-using routes.\n   *\n   * @deprecated Configure using `providers` instead:\n   *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.\n   */\n  routeReuseStrategy: RouteReuseStrategy = inject(RouteReuseStrategy);\n\n  /**\n   * How to handle a navigation request to the current URL.\n   *\n   *\n   * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.\n   * @see {@link withRouterConfig}\n   * @see {@link provideRouter}\n   * @see {@link RouterModule}\n   */\n  onSameUrlNavigation: OnSameUrlNavigation = this.options.onSameUrlNavigation || 'ignore';\n\n  config: Routes = inject(ROUTES, {optional: true})?.flat() ?? [];\n\n  /**\n   * Indicates whether the application has opted in to binding Router data to component inputs.\n   *\n   * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or\n   * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.\n   */\n  readonly componentInputBindingEnabled: boolean = !!inject(INPUT_BINDER, {optional: true});\n\n  constructor() {\n    this.resetConfig(this.config);\n\n    this.navigationTransitions\n      .setupNavigations(this, this.currentUrlTree, this.routerState)\n      .subscribe({\n        error: (e) => {\n          this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);\n        },\n      });\n    this.subscribeToNavigationEvents();\n  }\n\n  private eventsSubscription = new Subscription();\n  private subscribeToNavigationEvents() {\n    const subscription = this.navigationTransitions.events.subscribe((e) => {\n      try {\n        const currentTransition = this.navigationTransitions.currentTransition;\n        const currentNavigation = this.navigationTransitions.currentNavigation;\n        if (currentTransition !== null && currentNavigation !== null) {\n          this.stateManager.handleRouterEvent(e, currentNavigation);\n          if (\n            e instanceof NavigationCancel &&\n            e.code !== NavigationCancellationCode.Redirect &&\n            e.code !== NavigationCancellationCode.SupersededByNewNavigation\n          ) {\n            // It seems weird that `navigated` is set to `true` when the navigation is rejected,\n            // however it's how things were written initially. Investigation would need to be done\n            // to determine if this can be removed.\n            this.navigated = true;\n          } else if (e instanceof NavigationEnd) {\n            this.navigated = true;\n          } else if (e instanceof RedirectRequest) {\n            const opts = e.navigationBehaviorOptions;\n            const mergedTree = this.urlHandlingStrategy.merge(\n              e.url,\n              currentTransition.currentRawUrl,\n            );\n            const extras = {\n              browserUrl: currentTransition.extras.browserUrl,\n              info: currentTransition.extras.info,\n              skipLocationChange: currentTransition.extras.skipLocationChange,\n              // The URL is already updated at this point if we have 'eager' URL\n              // updates or if the navigation was triggered by the browser (back\n              // button, URL bar, etc). We want to replace that item in history\n              // if the navigation is rejected.\n              replaceUrl:\n                currentTransition.extras.replaceUrl ||\n                this.urlUpdateStrategy === 'eager' ||\n                isBrowserTriggeredNavigation(currentTransition.source),\n              // allow developer to override default options with RedirectCommand\n              ...opts,\n            };\n\n            this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {\n              resolve: currentTransition.resolve,\n              reject: currentTransition.reject,\n              promise: currentTransition.promise,\n            });\n          }\n        }\n        // Note that it's important to have the Router process the events _before_ the event is\n        // pushed through the public observable. This ensures the correct router state is in place\n        // before applications observe the events.\n        if (isPublicRouterEvent(e)) {\n          this._events.next(e);\n        }\n      } catch (e: unknown) {\n        this.navigationTransitions.transitionAbortSubject.next(e as Error);\n      }\n    });\n    this.eventsSubscription.add(subscription);\n  }\n\n  /** @internal */\n  resetRootComponentType(rootComponentType: Type<any>): void {\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.routerState.root.component = rootComponentType;\n    this.navigationTransitions.rootComponentType = rootComponentType;\n  }\n\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   */\n  initialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (!this.navigationTransitions.hasRequestedNavigation) {\n      this.navigateToSyncWithBrowser(\n        this.location.path(true),\n        IMPERATIVE_NAVIGATION,\n        this.stateManager.restoredState(),\n      );\n    }\n  }\n\n  /**\n   * Sets up the location change listener. This listener detects navigations triggered from outside\n   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n   * navigation so that the correct events, guards, etc. are triggered.\n   */\n  setUpLocationChangeListener(): void {\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    this.nonRouterCurrentEntryChangeSubscription ??=\n      this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state) => {\n        // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n        // hybrid apps.\n        setTimeout(() => {\n          this.navigateToSyncWithBrowser(url, 'popstate', state);\n        }, 0);\n      });\n  }\n\n  /**\n   * Schedules a router navigation to synchronize Router state with the browser state.\n   *\n   * This is done as a response to a popstate event and the initial navigation. These\n   * two scenarios represent times when the browser URL/state has been updated and\n   * the Router needs to respond to ensure its internal state matches.\n   */\n  private navigateToSyncWithBrowser(\n    url: string,\n    source: NavigationTrigger,\n    state: RestoredState | null | undefined,\n  ) {\n    const extras: NavigationExtras = {replaceUrl: true};\n\n    // TODO: restoredState should always include the entire state, regardless\n    // of navigationId. This requires a breaking change to update the type on\n    // NavigationStartâs restoredState, which currently requires navigationId\n    // to always be present. The Router used to only restore history state if\n    // a navigationId was present.\n\n    // The stored navigationId is used by the RouterScroller to retrieve the scroll\n    // position for the page.\n    const restoredState = state?.navigationId ? state : null;\n\n    // Separate to NavigationStart.restoredState, we must also restore the state to\n    // history.state and generate a new navigationId, since it will be overwritten\n    if (state) {\n      const stateCopy = {...state} as Partial<RestoredState>;\n      delete stateCopy.navigationId;\n      delete stateCopy.ÉµrouterPageId;\n      if (Object.keys(stateCopy).length !== 0) {\n        extras.state = stateCopy;\n      }\n    }\n\n    const urlTree = this.parseUrl(url);\n    this.scheduleNavigation(urlTree, source, restoredState, extras);\n  }\n\n  /** The current URL. */\n  get url(): string {\n    return this.serializeUrl(this.currentUrlTree);\n  }\n\n  /**\n   * Returns the current `Navigation` object when the router is navigating,\n   * and `null` when idle.\n   */\n  getCurrentNavigation(): Navigation | null {\n    return this.navigationTransitions.currentNavigation;\n  }\n\n  /**\n   * The `Navigation` object of the most recent navigation to succeed and `null` if there\n   *     has not been a successful navigation yet.\n   */\n  get lastSuccessfulNavigation(): Navigation | null {\n    return this.navigationTransitions.lastSuccessfulNavigation;\n  }\n\n  /**\n   * Resets the route configuration used for navigation and generating links.\n   *\n   * @param config The route array for the new configuration.\n   *\n   * @usageNotes\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   */\n  resetConfig(config: Routes): void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateConfig(config);\n    this.config = config.map(standardizeConfig);\n    this.navigated = false;\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  /** Disposes of the router. */\n  dispose(): void {\n    this.navigationTransitions.complete();\n    if (this.nonRouterCurrentEntryChangeSubscription) {\n      this.nonRouterCurrentEntryChangeSubscription.unsubscribe();\n      this.nonRouterCurrentEntryChangeSubscription = undefined;\n    }\n    this.disposed = true;\n    this.eventsSubscription.unsubscribe();\n  }\n\n  /**\n   * Appends URL segments to the current URL tree to create a new URL tree.\n   *\n   * @param commands An array of URL fragments with which to construct the new URL tree.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n   * property of the options object, if supplied.\n   * @param navigationExtras Options that control the navigation strategy.\n   * @returns The new URL tree.\n   *\n   * @usageNotes\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it,\n   * // you can do the following:\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   *\n   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n   * tree should be created relative to the root.\n   * ```\n   */\n  createUrlTree(commands: any[], navigationExtras: UrlCreationOptions = {}): UrlTree {\n    const {relativeTo, queryParams, fragment, queryParamsHandling, preserveFragment} =\n      navigationExtras;\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let q: Params | null = null;\n    switch (queryParamsHandling ?? this.options.defaultQueryParamsHandling) {\n      case 'merge':\n        q = {...this.currentUrlTree.queryParams, ...queryParams};\n        break;\n      case 'preserve':\n        q = this.currentUrlTree.queryParams;\n        break;\n      default:\n        q = queryParams || null;\n    }\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n\n    let relativeToUrlSegmentGroup: UrlSegmentGroup | undefined;\n    try {\n      const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;\n      relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);\n    } catch (e: unknown) {\n      // This is strictly for backwards compatibility with tests that create\n      // invalid `ActivatedRoute` mocks.\n      // Note: the difference between having this fallback for invalid `ActivatedRoute` setups and\n      // just throwing is ~500 test failures. Fixing all of those tests by hand is not feasible at\n      // the moment.\n      if (typeof commands[0] !== 'string' || commands[0][0] !== '/') {\n        // Navigations that were absolute in the old way of creating UrlTrees\n        // would still work because they wouldn't attempt to match the\n        // segments in the `ActivatedRoute` to the `currentUrlTree` but\n        // instead just replace the root segment with the navigation result.\n        // Non-absolute navigations would fail to apply the commands because\n        // the logic could not find the segment to replace (so they'd act like there were no\n        // commands).\n        commands = [];\n      }\n      relativeToUrlSegmentGroup = this.currentUrlTree.root;\n    }\n    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);\n  }\n\n  /**\n   * Navigates to a view using an absolute route path.\n   *\n   * @param url An absolute path for a defined route. The function does not apply any delta to the\n   *     current URL.\n   * @param extras An object containing properties that modify the navigation strategy.\n   *\n   * @returns A Promise that resolves to 'true' when navigation succeeds,\n   * to 'false' when navigation fails, or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to an absolute path.\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n   *\n   */\n  navigateByUrl(\n    url: string | UrlTree,\n    extras: NavigationBehaviorOptions = {\n      skipLocationChange: false,\n    },\n  ): Promise<boolean> {\n    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * @param commands An array of URL fragments with which to construct the target URL.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n   * of the options object, if supplied.\n   * @param extras An options object that determines how the URL should be constructed or\n   *     interpreted.\n   *\n   * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation\n   *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is\n   * not `true`.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to a dynamic route path relative to the current URL.\n   *\n   * ```\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL, overriding the default behavior\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)\n   *\n   */\n  navigate(\n    commands: any[],\n    extras: NavigationExtras = {skipLocationChange: false},\n  ): Promise<boolean> {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n\n  /** Serializes a `UrlTree` into a string */\n  serializeUrl(url: UrlTree): string {\n    return this.urlSerializer.serialize(url);\n  }\n\n  /** Parses a string into a `UrlTree` */\n  parseUrl(url: string): UrlTree {\n    try {\n      return this.urlSerializer.parse(url);\n    } catch {\n      return this.urlSerializer.parse('/');\n    }\n  }\n\n  /**\n   * Returns whether the url is activated.\n   *\n   * @deprecated\n   * Use `IsActiveMatchOptions` instead.\n   *\n   * - The equivalent `IsActiveMatchOptions` for `true` is\n   * `{paths: 'exact', queryParams: 'exact', fragment: 'ignored', matrixParams: 'ignored'}`.\n   * - The equivalent for `false` is\n   * `{paths: 'subset', queryParams: 'subset', fragment: 'ignored', matrixParams: 'ignored'}`.\n   */\n  isActive(url: string | UrlTree, exact: boolean): boolean;\n  /**\n   * Returns whether the url is activated.\n   */\n  isActive(url: string | UrlTree, matchOptions: IsActiveMatchOptions): boolean;\n  /** @internal */\n  isActive(url: string | UrlTree, matchOptions: boolean | IsActiveMatchOptions): boolean;\n  isActive(url: string | UrlTree, matchOptions: boolean | IsActiveMatchOptions): boolean {\n    let options: IsActiveMatchOptions;\n    if (matchOptions === true) {\n      options = {...exactMatchOptions};\n    } else if (matchOptions === false) {\n      options = {...subsetMatchOptions};\n    } else {\n      options = matchOptions;\n    }\n    if (isUrlTree(url)) {\n      return containsTree(this.currentUrlTree, url, options);\n    }\n\n    const urlTree = this.parseUrl(url);\n    return containsTree(this.currentUrlTree, urlTree, options);\n  }\n\n  private removeEmptyProps(params: Params): Params {\n    return Object.entries(params).reduce((result: Params, [key, value]: [string, any]) => {\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n\n  private scheduleNavigation(\n    rawUrl: UrlTree,\n    source: NavigationTrigger,\n    restoredState: RestoredState | null,\n    extras: NavigationExtras,\n    priorPromise?: {\n      resolve: (result: boolean | PromiseLike<boolean>) => void;\n      reject: (reason?: any) => void;\n      promise: Promise<boolean>;\n    },\n  ): Promise<boolean> {\n    if (this.disposed) {\n      return Promise.resolve(false);\n    }\n\n    let resolve: (result: boolean | PromiseLike<boolean>) => void;\n    let reject: (reason?: any) => void;\n    let promise: Promise<boolean>;\n    if (priorPromise) {\n      resolve = priorPromise.resolve;\n      reject = priorPromise.reject;\n      promise = priorPromise.promise;\n    } else {\n      promise = new Promise<boolean>((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    }\n\n    // Indicate that the navigation is happening.\n    const taskId = this.pendingTasks.add();\n    afterNextNavigation(this, () => {\n      // Remove pending task in a microtask to allow for cancelled\n      // initial navigations and redirects within the same task.\n      queueMicrotask(() => this.pendingTasks.remove(taskId));\n    });\n\n    this.navigationTransitions.handleNavigationRequest({\n      source,\n      restoredState,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.currentUrlTree,\n      rawUrl,\n      extras,\n      resolve: resolve!,\n      reject: reject!,\n      promise,\n      currentSnapshot: this.routerState.snapshot,\n      currentRouterState: this.routerState,\n    });\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => {\n      return Promise.reject(e);\n    });\n  }\n}\n\nfunction validateCommands(commands: string[]): void {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new RuntimeError(\n        RuntimeErrorCode.NULLISH_COMMAND,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `The requested path contains ${cmd} segment at index ${i}`,\n      );\n    }\n  }\n}\n\nfunction isPublicRouterEvent(e: Event | PrivateRouterEvents): e is Event {\n  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {\n  Attribute,\n  booleanAttribute,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  ÉµRuntimeError as RuntimeError,\n  SimpleChanges,\n  ÉµÉµsanitizeUrlOrResourceUrl,\n} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\n\nimport {Event, NavigationEnd} from '../events';\nimport {QueryParamsHandling} from '../models';\nimport {Router} from '../router';\nimport {ActivatedRoute} from '../router_state';\nimport {Params} from '../shared';\nimport {isUrlTree, UrlTree} from '../url_tree';\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segments.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * `queryParams`, `fragment`, `queryParamsHandling`, `preserveFragment`, and `relativeTo`\n * cannot be used when the `routerLink` input is a `UrlTree`.\n *\n * See {@link UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({\n  selector: '[routerLink]',\n  standalone: true,\n})\nexport class RouterLink implements OnChanges, OnDestroy {\n  /**\n   * Represents an `href` attribute value applied to a host element,\n   * when a host element is `<a>`. For other tags, the value is `null`.\n   */\n  href: string | null = null;\n\n  /**\n   * Represents the `target` attribute on a host element.\n   * This is only used when the host element is an `<a>` tag.\n   */\n  @HostBinding('attr.target') @Input() target?: string;\n\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParams}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() queryParams?: Params | null;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#fragment}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() fragment?: string;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParamsHandling}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() queryParamsHandling?: QueryParamsHandling | null;\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#state}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input() state?: {[k: string]: any};\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#info}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input() info?: unknown;\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * Specify a value here when you do not want to use the default value\n   * for `routerLink`, which is the current activated route.\n   * Note that a value of `undefined` here will use the `routerLink` default.\n   * @see {@link UrlCreationOptions#relativeTo}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input() relativeTo?: ActivatedRoute | null;\n\n  /** Whether a host element is an `<a>` tag. */\n  private isAnchorElement: boolean;\n\n  private subscription?: Subscription;\n\n  /** @internal */\n  onChanges = new Subject<RouterLink>();\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    @Attribute('tabindex') private readonly tabIndexAttribute: string | null | undefined,\n    private readonly renderer: Renderer2,\n    private readonly el: ElementRef,\n    private locationStrategy?: LocationStrategy,\n  ) {\n    const tagName = el.nativeElement.tagName?.toLowerCase();\n    this.isAnchorElement = tagName === 'a' || tagName === 'area';\n\n    if (this.isAnchorElement) {\n      this.subscription = router.events.subscribe((s: Event) => {\n        if (s instanceof NavigationEnd) {\n          this.updateHref();\n        }\n      });\n    } else {\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n\n  /**\n   * Passed to {@link Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#preserveFragment}\n   * @see {@link Router#createUrlTree}\n   */\n  @Input({transform: booleanAttribute}) preserveFragment: boolean = false;\n\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#skipLocationChange}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input({transform: booleanAttribute}) skipLocationChange: boolean = false;\n\n  /**\n   * Passed to {@link Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#replaceUrl}\n   * @see {@link Router#navigateByUrl}\n   */\n  @Input({transform: booleanAttribute}) replaceUrl: boolean = false;\n\n  /**\n   * Modifies the tab index if there was not a tabindex attribute on the element during\n   * instantiation.\n   */\n  private setTabIndexIfNotOnNativeEl(newTabIndex: string | null) {\n    if (this.tabIndexAttribute != null /* both `null` and `undefined` */ || this.isAnchorElement) {\n      return;\n    }\n    this.applyAttributeValue('tabindex', newTabIndex);\n  }\n\n  /** @nodoc */\n  // TODO(atscott): Remove changes parameter in major version as a breaking change.\n  ngOnChanges(changes?: SimpleChanges) {\n    if (\n      ngDevMode &&\n      isUrlTree(this.routerLinkInput) &&\n      (this.fragment !== undefined ||\n        this.queryParams ||\n        this.queryParamsHandling ||\n        this.preserveFragment ||\n        this.relativeTo)\n    ) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_ROUTER_LINK_INPUTS,\n        'Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.',\n      );\n    }\n    if (this.isAnchorElement) {\n      this.updateHref();\n    }\n    // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n    // to the RouterLinks it's tracking.\n    this.onChanges.next(this);\n  }\n\n  private routerLinkInput: any[] | UrlTree | null = null;\n\n  /**\n   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.\n   *   - **array**: commands to pass to {@link Router#createUrlTree}.\n   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands\n   *     and other inputs that correspond to properties of `UrlCreationOptions`.\n   *   - **null|undefined**: effectively disables the `routerLink`\n   * @see {@link Router#createUrlTree}\n   */\n  @Input()\n  set routerLink(commandsOrUrlTree: any[] | string | UrlTree | null | undefined) {\n    if (commandsOrUrlTree == null) {\n      this.routerLinkInput = null;\n      this.setTabIndexIfNotOnNativeEl(null);\n    } else {\n      if (isUrlTree(commandsOrUrlTree)) {\n        this.routerLinkInput = commandsOrUrlTree;\n      } else {\n        this.routerLinkInput = Array.isArray(commandsOrUrlTree)\n          ? commandsOrUrlTree\n          : [commandsOrUrlTree];\n      }\n      this.setTabIndexIfNotOnNativeEl('0');\n    }\n  }\n\n  /** @nodoc */\n  @HostListener('click', [\n    '$event.button',\n    '$event.ctrlKey',\n    '$event.shiftKey',\n    '$event.altKey',\n    '$event.metaKey',\n  ])\n  onClick(\n    button: number,\n    ctrlKey: boolean,\n    shiftKey: boolean,\n    altKey: boolean,\n    metaKey: boolean,\n  ): boolean {\n    const urlTree = this.urlTree;\n\n    if (urlTree === null) {\n      return true;\n    }\n\n    if (this.isAnchorElement) {\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n\n      if (typeof this.target === 'string' && this.target != '_self') {\n        return true;\n      }\n    }\n\n    const extras = {\n      skipLocationChange: this.skipLocationChange,\n      replaceUrl: this.replaceUrl,\n      state: this.state,\n      info: this.info,\n    };\n    this.router.navigateByUrl(urlTree, extras);\n\n    // Return `false` for `<a>` elements to prevent default action\n    // and cancel the native behavior, since the navigation is handled\n    // by the Router.\n    return !this.isAnchorElement;\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): any {\n    this.subscription?.unsubscribe();\n  }\n\n  private updateHref(): void {\n    const urlTree = this.urlTree;\n    this.href =\n      urlTree !== null && this.locationStrategy\n        ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree))\n        : null;\n\n    const sanitizedValue =\n      this.href === null\n        ? null\n        : // This class represents a directive that can be added to both `<a>` elements,\n          // as well as other elements. As a result, we can't define security context at\n          // compile time. So the security context is deferred to runtime.\n          // The `ÉµÉµsanitizeUrlOrResourceUrl` selects the necessary sanitizer function\n          // based on the tag and property names. The logic mimics the one from\n          // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.\n          //\n          // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`\n          // instead of applying a value via a renderer, after a final merge of the\n          // `RouterLinkWithHref` directive.\n          ÉµÉµsanitizeUrlOrResourceUrl(\n            this.href,\n            this.el.nativeElement.tagName.toLowerCase(),\n            'href',\n          );\n    this.applyAttributeValue('href', sanitizedValue);\n  }\n\n  private applyAttributeValue(attrName: string, attrValue: string | null) {\n    const renderer = this.renderer;\n    const nativeElement = this.el.nativeElement;\n    if (attrValue !== null) {\n      renderer.setAttribute(nativeElement, attrName, attrValue);\n    } else {\n      renderer.removeAttribute(nativeElement, attrName);\n    }\n  }\n\n  get urlTree(): UrlTree | null {\n    if (this.routerLinkInput === null) {\n      return null;\n    } else if (isUrlTree(this.routerLinkInput)) {\n      return this.routerLinkInput;\n    }\n    return this.router.createUrlTree(this.routerLinkInput, {\n      // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n      // Otherwise, we should use the value provided by the user in the input.\n      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: this.preserveFragment,\n    });\n  }\n}\n\n/**\n * @description\n * An alias for the `RouterLink` directive.\n * Deprecated since v15, use `RouterLink` directive instead.\n *\n * @deprecated use `RouterLink` directive instead.\n * @publicApi\n */\nexport {RouterLink as RouterLinkWithHref};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {from, of, Subscription} from 'rxjs';\nimport {mergeAll} from 'rxjs/operators';\n\nimport {Event, NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {IsActiveMatchOptions} from '../url_tree';\n\nimport {RouterLink} from './router_link';\n\n/**\n *\n * @description\n *\n * Tracks whether the linked route of an element is currently active, and allows you\n * to specify one or more CSS classes to add to the element when the linked route\n * is active.\n *\n * Use this directive to create a visual distinction for elements associated with an active route.\n * For example, the following code highlights the word \"Bob\" when the router\n * activates the associated route:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * Whenever the URL is either '/user' or '/user/bob', the \"active-link\" class is\n * added to the anchor tag. If the URL changes, the class is removed.\n *\n * You can set more than one class using a space-separated string or an array.\n * For example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * To add the classes only when the URL matches the link exactly, add the option `exact: true`:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * To directly check the `isActive` status of the link, assign the `RouterLinkActive`\n * instance to a template variable.\n * For example, the following checks the status without assigning any CSS classes:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.\n * For example, the following sets the active-link class on the `<div>`  parent tag\n * when the URL is either '/user/jim' or '/user/bob'.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * The `RouterLinkActive` directive can also be used to set the aria-current attribute\n * to provide an alternative distinction for active elements to visually impaired users.\n *\n * For example, the following code adds the 'active' class to the Home Page link when it is\n * indeed active and in such case also sets its aria-current attribute to 'page':\n *\n * ```\n * <a routerLink=\"/\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Home Page</a>\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({\n  selector: '[routerLinkActive]',\n  exportAs: 'routerLinkActive',\n  standalone: true,\n})\nexport class RouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {\n  @ContentChildren(RouterLink, {descendants: true}) links!: QueryList<RouterLink>;\n\n  private classes: string[] = [];\n  private routerEventsSubscription: Subscription;\n  private linkInputChangesSubscription?: Subscription;\n  private _isActive = false;\n\n  get isActive() {\n    return this._isActive;\n  }\n\n  /**\n   * Options to configure how to determine if the router link is active.\n   *\n   * These options are passed to the `Router.isActive()` function.\n   *\n   * @see {@link Router#isActive}\n   */\n  @Input() routerLinkActiveOptions: {exact: boolean} | IsActiveMatchOptions = {exact: false};\n\n  /**\n   * Aria-current attribute to apply when the router link is active.\n   *\n   * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}\n   */\n  @Input() ariaCurrentWhenActive?: 'page' | 'step' | 'location' | 'date' | 'time' | true | false;\n\n  /**\n   *\n   * You can use the output `isActiveChange` to get notified each time the link becomes\n   * active or inactive.\n   *\n   * Emits:\n   * true  -> Route is active\n   * false -> Route is inactive\n   *\n   * ```\n   * <a\n   *  routerLink=\"/user/bob\"\n   *  routerLinkActive=\"active-link\"\n   *  (isActiveChange)=\"this.onRouterLinkActive($event)\">Bob</a>\n   * ```\n   */\n  @Output() readonly isActiveChange: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(\n    private router: Router,\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private readonly cdr: ChangeDetectorRef,\n    @Optional() private link?: RouterLink,\n  ) {\n    this.routerEventsSubscription = router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n\n  /** @nodoc */\n  ngAfterContentInit(): void {\n    // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).\n    of(this.links.changes, of(null))\n      .pipe(mergeAll())\n      .subscribe((_) => {\n        this.update();\n        this.subscribeToEachLinkOnChanges();\n      });\n  }\n\n  private subscribeToEachLinkOnChanges() {\n    this.linkInputChangesSubscription?.unsubscribe();\n    const allLinkChanges = [...this.links.toArray(), this.link]\n      .filter((link): link is RouterLink => !!link)\n      .map((link) => link.onChanges);\n    this.linkInputChangesSubscription = from(allLinkChanges)\n      .pipe(mergeAll())\n      .subscribe((link) => {\n        if (this._isActive !== this.isLinkActive(this.router)(link)) {\n          this.update();\n        }\n      });\n  }\n\n  @Input()\n  set routerLinkActive(data: string[] | string) {\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter((c) => !!c);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.routerEventsSubscription.unsubscribe();\n    this.linkInputChangesSubscription?.unsubscribe();\n  }\n\n  private update(): void {\n    if (!this.links || !this.router.navigated) return;\n\n    queueMicrotask(() => {\n      const hasActiveLinks = this.hasActiveLinks();\n      this.classes.forEach((c) => {\n        if (hasActiveLinks) {\n          this.renderer.addClass(this.element.nativeElement, c);\n        } else {\n          this.renderer.removeClass(this.element.nativeElement, c);\n        }\n      });\n      if (hasActiveLinks && this.ariaCurrentWhenActive !== undefined) {\n        this.renderer.setAttribute(\n          this.element.nativeElement,\n          'aria-current',\n          this.ariaCurrentWhenActive.toString(),\n        );\n      } else {\n        this.renderer.removeAttribute(this.element.nativeElement, 'aria-current');\n      }\n\n      // Only emit change if the active state changed.\n      if (this._isActive !== hasActiveLinks) {\n        this._isActive = hasActiveLinks;\n        this.cdr.markForCheck();\n        // Emit on isActiveChange after classes are updated\n        this.isActiveChange.emit(hasActiveLinks);\n      }\n    });\n  }\n\n  private isLinkActive(router: Router): (link: RouterLink) => boolean {\n    const options: boolean | IsActiveMatchOptions = isActiveMatchOptions(\n      this.routerLinkActiveOptions,\n    )\n      ? this.routerLinkActiveOptions\n      : // While the types should disallow `undefined` here, it's possible without strict inputs\n        this.routerLinkActiveOptions.exact || false;\n    return (link: RouterLink) => {\n      const urlTree = link.urlTree;\n      return urlTree ? router.isActive(urlTree, options) : false;\n    };\n  }\n\n  private hasActiveLinks(): boolean {\n    const isActiveCheckFn = this.isLinkActive(this.router);\n    return (this.link && isActiveCheckFn(this.link)) || this.links.some(isActiveCheckFn);\n  }\n}\n\n/**\n * Use instead of `'paths' in options` to be compatible with property renaming\n */\nfunction isActiveMatchOptions(\n  options: {exact: boolean} | IsActiveMatchOptions,\n): options is IsActiveMatchOptions {\n  return !!(options as IsActiveMatchOptions).paths;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Compiler,\n  createEnvironmentInjector,\n  EnvironmentInjector,\n  Injectable,\n  OnDestroy,\n} from '@angular/core';\nimport {from, Observable, of, Subscription} from 'rxjs';\nimport {catchError, concatMap, filter, mergeAll, mergeMap} from 'rxjs/operators';\n\nimport {Event, NavigationEnd} from './events';\nimport {LoadedRouterConfig, Route, Routes} from './models';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return fn().pipe(catchError(() => of(null)));\n  }\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return of(null);\n  }\n}\n\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class RouterPreloader implements OnDestroy {\n  private subscription?: Subscription;\n\n  constructor(\n    private router: Router,\n    compiler: Compiler,\n    private injector: EnvironmentInjector,\n    private preloadingStrategy: PreloadingStrategy,\n    private loader: RouterConfigLoader,\n  ) {}\n\n  setUpPreloading(): void {\n    this.subscription = this.router.events\n      .pipe(\n        filter((e: Event) => e instanceof NavigationEnd),\n        concatMap(() => this.preload()),\n      )\n      .subscribe(() => {});\n  }\n\n  preload(): Observable<any> {\n    return this.processRoutes(this.injector, this.router.config);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private processRoutes(injector: EnvironmentInjector, routes: Routes): Observable<void> {\n    const res: Observable<any>[] = [];\n    for (const route of routes) {\n      if (route.providers && !route._injector) {\n        route._injector = createEnvironmentInjector(\n          route.providers,\n          injector,\n          `Route: ${route.path}`,\n        );\n      }\n\n      const injectorForCurrentRoute = route._injector ?? injector;\n      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;\n\n      // Note that `canLoad` is only checked as a condition that prevents `loadChildren` and not\n      // `loadComponent`. `canLoad` guards only block loading of child routes by design. This\n      // happens as a consequence of needing to descend into children for route matching immediately\n      // while component loading is deferred until route activation. Because `canLoad` guards can\n      // have side effects, we cannot execute them here so we instead skip preloading altogether\n      // when present. Lastly, it remains to be decided whether `canLoad` should behave this way\n      // at all. Code splitting and lazy loading is separate from client-side authorization checks\n      // and should not be used as a security measure to prevent loading of code.\n      if (\n        (route.loadChildren && !route._loadedRoutes && route.canLoad === undefined) ||\n        (route.loadComponent && !route._loadedComponent)\n      ) {\n        res.push(this.preloadConfig(injectorForCurrentRoute, route));\n      }\n      if (route.children || route._loadedRoutes) {\n        res.push(this.processRoutes(injectorForChildren, (route.children ?? route._loadedRoutes)!));\n      }\n    }\n    return from(res).pipe(mergeAll());\n  }\n\n  private preloadConfig(injector: EnvironmentInjector, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      let loadedChildren$: Observable<LoadedRouterConfig | null>;\n      if (route.loadChildren && route.canLoad === undefined) {\n        loadedChildren$ = this.loader.loadChildren(injector, route);\n      } else {\n        loadedChildren$ = of(null);\n      }\n\n      const recursiveLoadChildren$ = loadedChildren$.pipe(\n        mergeMap((config: LoadedRouterConfig | null) => {\n          if (config === null) {\n            return of(void 0);\n          }\n          route._loadedRoutes = config.routes;\n          route._loadedInjector = config.injector;\n          // If the loaded config was a module, use that as the module/module injector going\n          // forward. Otherwise, continue using the current module/module injector.\n          return this.processRoutes(config.injector ?? injector, config.routes);\n        }),\n      );\n      if (route.loadComponent && !route._loadedComponent) {\n        const loadComponent$ = this.loader.loadComponent(route);\n        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());\n      } else {\n        return recursiveLoadChildren$;\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ViewportScroller} from '@angular/common';\nimport {Injectable, InjectionToken, NgZone, OnDestroy} from '@angular/core';\nimport {Unsubscribable} from 'rxjs';\n\nimport {\n  NavigationEnd,\n  NavigationSkipped,\n  NavigationSkippedCode,\n  NavigationStart,\n  Scroll,\n} from './events';\nimport {NavigationTransitions} from './navigation_transition';\nimport {UrlSerializer} from './url_tree';\n\nexport const ROUTER_SCROLLER = new InjectionToken<RouterScroller>('');\n\n@Injectable()\nexport class RouterScroller implements OnDestroy {\n  private routerEventsSubscription?: Unsubscribable;\n  private scrollEventsSubscription?: Unsubscribable;\n\n  private lastId = 0;\n  private lastSource: 'imperative' | 'popstate' | 'hashchange' | undefined = 'imperative';\n  private restoredId = 0;\n  private store: {[key: string]: [number, number]} = {};\n\n  /** @nodoc */\n  constructor(\n    readonly urlSerializer: UrlSerializer,\n    private transitions: NavigationTransitions,\n    public readonly viewportScroller: ViewportScroller,\n    private readonly zone: NgZone,\n    private options: {\n      scrollPositionRestoration?: 'disabled' | 'enabled' | 'top';\n      anchorScrolling?: 'disabled' | 'enabled';\n    } = {},\n  ) {\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration ||= 'disabled';\n    options.anchorScrolling ||= 'disabled';\n  }\n\n  init(): void {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n\n  private createScrollEvents() {\n    return this.transitions.events.subscribe((e) => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);\n      } else if (\n        e instanceof NavigationSkipped &&\n        e.code === NavigationSkippedCode.IgnoredSameUrlNavigation\n      ) {\n        this.lastSource = undefined;\n        this.restoredId = 0;\n        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);\n      }\n    });\n  }\n\n  private consumeScrollEvents() {\n    return this.transitions.events.subscribe((e) => {\n      if (!(e instanceof Scroll)) return;\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n\n  private scheduleScrollEvent(\n    routerEvent: NavigationEnd | NavigationSkipped,\n    anchor: string | null,\n  ): void {\n    this.zone.runOutsideAngular(() => {\n      // The scroll event needs to be delayed until after change detection. Otherwise, we may\n      // attempt to restore the scroll position before the router outlet has fully rendered the\n      // component by executing its update block of the template function.\n      setTimeout(() => {\n        this.zone.run(() => {\n          this.transitions.events.next(\n            new Scroll(\n              routerEvent,\n              this.lastSource === 'popstate' ? this.store[this.restoredId] : null,\n              anchor,\n            ),\n          );\n        });\n      }, 0);\n    });\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    this.routerEventsSubscription?.unsubscribe();\n    this.scrollEventsSubscription?.unsubscribe();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HashLocationStrategy,\n  LOCATION_INITIALIZED,\n  LocationStrategy,\n  ViewportScroller,\n} from '@angular/common';\nimport {\n  APP_BOOTSTRAP_LISTENER,\n  APP_INITIALIZER,\n  ApplicationRef,\n  ComponentRef,\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  inject,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  makeEnvironmentProviders,\n  NgZone,\n  Provider,\n  runInInjectionContext,\n  Type,\n} from '@angular/core';\nimport {of, Subject} from 'rxjs';\n\nimport {INPUT_BINDER, RoutedComponentInputBinder} from './directives/router_outlet';\nimport {Event, NavigationError, stringifyEvent} from './events';\nimport {RedirectCommand, Routes} from './models';\nimport {NAVIGATION_ERROR_HANDLER, NavigationTransitions} from './navigation_transition';\nimport {Router} from './router';\nimport {InMemoryScrollingOptions, ROUTER_CONFIGURATION, RouterConfigOptions} from './router_config';\nimport {ROUTES} from './router_config_loader';\nimport {PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {ROUTER_SCROLLER, RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {UrlSerializer} from './url_tree';\nimport {afterNextNavigation} from './utils/navigations';\nimport {\n  CREATE_VIEW_TRANSITION,\n  createViewTransition,\n  VIEW_TRANSITION_OPTIONS,\n  ViewTransitionsFeatureOptions,\n} from './utils/view_transition';\n\n/**\n * Sets up providers necessary to enable `Router` functionality for the application.\n * Allows to configure a set of routes as well as extra features that should be enabled.\n *\n * @usageNotes\n *\n * Basic example of how you can add a Router to your application:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouter(appRoutes)]\n * });\n * ```\n *\n * You can also enable optional features in the Router by adding functions from the `RouterFeatures`\n * type:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes,\n *         withDebugTracing(),\n *         withRouterConfig({paramsInheritanceStrategy: 'always'}))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link RouterFeatures}\n *\n * @publicApi\n * @param routes A set of `Route`s to use for the application routing table.\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to setup a Router.\n */\nexport function provideRouter(routes: Routes, ...features: RouterFeatures[]): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {provide: ROUTES, multi: true, useValue: routes},\n    typeof ngDevMode === 'undefined' || ngDevMode\n      ? {provide: ROUTER_IS_PROVIDED, useValue: true}\n      : [],\n    {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useFactory: getBootstrapListener},\n    features.map((feature) => feature.Éµproviders),\n  ]);\n}\n\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n\n/**\n * Helper type to represent a Router feature.\n *\n * @publicApi\n */\nexport interface RouterFeature<FeatureKind extends RouterFeatureKind> {\n  Éµkind: FeatureKind;\n  Éµproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Router feature.\n */\nfunction routerFeature<FeatureKind extends RouterFeatureKind>(\n  kind: FeatureKind,\n  providers: Provider[],\n): RouterFeature<FeatureKind> {\n  return {Éµkind: kind, Éµproviders: providers};\n}\n\n/**\n * An Injection token used to indicate whether `provideRouter` or `RouterModule.forRoot` was ever\n * called.\n */\nexport const ROUTER_IS_PROVIDED = new InjectionToken<boolean>('', {\n  providedIn: 'root',\n  factory: () => false,\n});\n\nconst routerIsProvidedDevModeCheck = {\n  provide: ENVIRONMENT_INITIALIZER,\n  multi: true,\n  useFactory() {\n    return () => {\n      if (!inject(ROUTER_IS_PROVIDED)) {\n        console.warn(\n          '`provideRoutes` was called without `provideRouter` or `RouterModule.forRoot`. ' +\n            'This is likely a mistake.',\n        );\n      }\n    };\n  },\n};\n\n/**\n * Registers a DI provider for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```\n * @NgModule({\n *   providers: [provideRoutes(ROUTES)]\n * })\n * class LazyLoadedChildModule {}\n * ```\n *\n * @deprecated If necessary, provide routes using the `ROUTES` `InjectionToken`.\n * @see {@link ROUTES}\n * @publicApi\n */\nexport function provideRoutes(routes: Routes): Provider[] {\n  return [\n    {provide: ROUTES, multi: true, useValue: routes},\n    typeof ngDevMode === 'undefined' || ngDevMode ? routerIsProvidedDevModeCheck : [],\n  ];\n}\n\n/**\n * A type alias for providers returned by `withInMemoryScrolling` for use with `provideRouter`.\n *\n * @see {@link withInMemoryScrolling}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type InMemoryScrollingFeature = RouterFeature<RouterFeatureKind.InMemoryScrollingFeature>;\n\n/**\n * Enables customizable scrolling behavior for router navigations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable scrolling feature:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withInMemoryScrolling())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link ViewportScroller}\n *\n * @publicApi\n * @param options Set of configuration parameters to customize scrolling behavior, see\n *     `InMemoryScrollingOptions` for additional information.\n * @returns A set of providers for use with `provideRouter`.\n */\nexport function withInMemoryScrolling(\n  options: InMemoryScrollingOptions = {},\n): InMemoryScrollingFeature {\n  const providers = [\n    {\n      provide: ROUTER_SCROLLER,\n      useFactory: () => {\n        const viewportScroller = inject(ViewportScroller);\n        const zone = inject(NgZone);\n        const transitions = inject(NavigationTransitions);\n        const urlSerializer = inject(UrlSerializer);\n        return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, options);\n      },\n    },\n  ];\n  return routerFeature(RouterFeatureKind.InMemoryScrollingFeature, providers);\n}\n\nexport function getBootstrapListener() {\n  const injector = inject(Injector);\n  return (bootstrappedComponentRef: ComponentRef<unknown>) => {\n    const ref = injector.get(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    const router = injector.get(Router);\n    const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n\n    if (injector.get(INITIAL_NAVIGATION) === InitialNavigation.EnabledNonBlocking) {\n      router.initialNavigation();\n    }\n\n    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();\n    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    if (!bootstrapDone.closed) {\n      bootstrapDone.next();\n      bootstrapDone.complete();\n      bootstrapDone.unsubscribe();\n    }\n  };\n}\n\n/**\n * A subject used to indicate that the bootstrapping phase is done. When initial navigation is\n * `enabledBlocking`, the first navigation waits until bootstrapping is finished before continuing\n * to the activation phase.\n */\nconst BOOTSTRAP_DONE = new InjectionToken<Subject<void>>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'bootstrap done indicator' : '',\n  {\n    factory: () => {\n      return new Subject<void>();\n    },\n  },\n);\n\n/**\n * This and the INITIAL_NAVIGATION token are used internally only. The public API side of this is\n * configured through the `ExtraOptions`.\n *\n * When set to `EnabledBlocking`, the initial navigation starts before the root\n * component is created. The bootstrap is blocked until the initial navigation is complete. This\n * value should be set in case you use [server-side rendering](guide/ssr), but do not enable\n * [hydration](guide/hydration) for your application.\n *\n * When set to `EnabledNonBlocking`, the initial navigation starts after the root component has been\n * created. The bootstrap is not blocked on the completion of the initial navigation.\n *\n * When set to `Disabled`, the initial navigation is not performed. The location listener is set up\n * before the root component gets created. Use if there is a reason to have more control over when\n * the router starts its initial navigation due to some complex initialization logic.\n *\n * @see {@link ExtraOptions}\n */\nconst enum InitialNavigation {\n  EnabledBlocking,\n  EnabledNonBlocking,\n  Disabled,\n}\n\nconst INITIAL_NAVIGATION = new InjectionToken<InitialNavigation>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'initial navigation' : '',\n  {providedIn: 'root', factory: () => InitialNavigation.EnabledNonBlocking},\n);\n\n/**\n * A type alias for providers returned by `withEnabledBlockingInitialNavigation` for use with\n * `provideRouter`.\n *\n * @see {@link withEnabledBlockingInitialNavigation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type EnabledBlockingInitialNavigationFeature =\n  RouterFeature<RouterFeatureKind.EnabledBlockingInitialNavigationFeature>;\n\n/**\n * A type alias for providers returned by `withEnabledBlockingInitialNavigation` or\n * `withDisabledInitialNavigation` functions for use with `provideRouter`.\n *\n * @see {@link withEnabledBlockingInitialNavigation}\n * @see {@link withDisabledInitialNavigation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type InitialNavigationFeature =\n  | EnabledBlockingInitialNavigationFeature\n  | DisabledInitialNavigationFeature;\n\n/**\n * Configures initial navigation to start before the root component is created.\n *\n * The bootstrap is blocked until the initial navigation is complete. This should be set in case\n * you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration) for\n * your application.\n *\n * @usageNotes\n *\n * Basic example of how you can enable this navigation behavior:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withEnabledBlockingInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n * @returns A set of providers for use with `provideRouter`.\n */\nexport function withEnabledBlockingInitialNavigation(): EnabledBlockingInitialNavigationFeature {\n  const providers = [\n    {provide: INITIAL_NAVIGATION, useValue: InitialNavigation.EnabledBlocking},\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: (injector: Injector) => {\n        const locationInitialized: Promise<any> = injector.get(\n          LOCATION_INITIALIZED,\n          Promise.resolve(),\n        );\n\n        return () => {\n          return locationInitialized.then(() => {\n            return new Promise((resolve) => {\n              const router = injector.get(Router);\n              const bootstrapDone = injector.get(BOOTSTRAP_DONE);\n              afterNextNavigation(router, () => {\n                // Unblock APP_INITIALIZER in case the initial navigation was canceled or errored\n                // without a redirect.\n                resolve(true);\n              });\n\n              injector.get(NavigationTransitions).afterPreactivation = () => {\n                // Unblock APP_INITIALIZER once we get to `afterPreactivation`. At this point, we\n                // assume activation will complete successfully (even though this is not\n                // guaranteed).\n                resolve(true);\n                return bootstrapDone.closed ? of(void 0) : bootstrapDone;\n              };\n              router.initialNavigation();\n            });\n          });\n        };\n      },\n    },\n  ];\n  return routerFeature(RouterFeatureKind.EnabledBlockingInitialNavigationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withDisabledInitialNavigation` for use with\n * `provideRouter`.\n *\n * @see {@link withDisabledInitialNavigation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type DisabledInitialNavigationFeature =\n  RouterFeature<RouterFeatureKind.DisabledInitialNavigationFeature>;\n\n/**\n * Disables initial navigation.\n *\n * Use if there is a reason to have more control over when the router starts its initial navigation\n * due to some complex initialization logic.\n *\n * @usageNotes\n *\n * Basic example of how you can disable initial navigation:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDisabledInitialNavigation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withDisabledInitialNavigation(): DisabledInitialNavigationFeature {\n  const providers = [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const router = inject(Router);\n        return () => {\n          router.setUpLocationChangeListener();\n        };\n      },\n    },\n    {provide: INITIAL_NAVIGATION, useValue: InitialNavigation.Disabled},\n  ];\n  return routerFeature(RouterFeatureKind.DisabledInitialNavigationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withDebugTracing` for use with `provideRouter`.\n *\n * @see {@link withDebugTracing}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type DebugTracingFeature = RouterFeature<RouterFeatureKind.DebugTracingFeature>;\n\n/**\n * Enables logging of all internal navigation events to the console.\n * Extra logging might be useful for debugging purposes to inspect Router event sequence.\n *\n * @usageNotes\n *\n * Basic example of how you can enable debug tracing:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withDebugTracing())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withDebugTracing(): DebugTracingFeature {\n  let providers: Provider[] = [];\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    providers = [\n      {\n        provide: ENVIRONMENT_INITIALIZER,\n        multi: true,\n        useFactory: () => {\n          const router = inject(Router);\n          return () =>\n            router.events.subscribe((e: Event) => {\n              // tslint:disable:no-console\n              console.group?.(`Router Event: ${(<any>e.constructor).name}`);\n              console.log(stringifyEvent(e));\n              console.log(e);\n              console.groupEnd?.();\n              // tslint:enable:no-console\n            });\n        },\n      },\n    ];\n  } else {\n    providers = [];\n  }\n  return routerFeature(RouterFeatureKind.DebugTracingFeature, providers);\n}\n\nconst ROUTER_PRELOADER = new InjectionToken<RouterPreloader>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'router preloader' : '',\n);\n\n/**\n * A type alias that represents a feature which enables preloading in Router.\n * The type is used to describe the return value of the `withPreloading` function.\n *\n * @see {@link withPreloading}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type PreloadingFeature = RouterFeature<RouterFeatureKind.PreloadingFeature>;\n\n/**\n * Allows to configure a preloading strategy to use. The strategy is configured by providing a\n * reference to a class that implements a `PreloadingStrategy`.\n *\n * @usageNotes\n *\n * Basic example of how you can configure preloading:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withPreloading(PreloadAllModules))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param preloadingStrategy A reference to a class that implements a `PreloadingStrategy` that\n *     should be used.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withPreloading(preloadingStrategy: Type<PreloadingStrategy>): PreloadingFeature {\n  const providers = [\n    {provide: ROUTER_PRELOADER, useExisting: RouterPreloader},\n    {provide: PreloadingStrategy, useExisting: preloadingStrategy},\n  ];\n  return routerFeature(RouterFeatureKind.PreloadingFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withRouterConfig` for use with `provideRouter`.\n *\n * @see {@link withRouterConfig}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type RouterConfigurationFeature =\n  RouterFeature<RouterFeatureKind.RouterConfigurationFeature>;\n\n/**\n * Allows to provide extra parameters to configure Router.\n *\n * @usageNotes\n *\n * Basic example of how you can provide extra configuration options:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withRouterConfig({\n *          onSameUrlNavigation: 'reload'\n *       }))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n *\n * @param options A set of parameters to configure Router, see `RouterConfigOptions` for\n *     additional information.\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withRouterConfig(options: RouterConfigOptions): RouterConfigurationFeature {\n  const providers = [{provide: ROUTER_CONFIGURATION, useValue: options}];\n  return routerFeature(RouterFeatureKind.RouterConfigurationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withHashLocation` for use with `provideRouter`.\n *\n * @see {@link withHashLocation}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type RouterHashLocationFeature = RouterFeature<RouterFeatureKind.RouterHashLocationFeature>;\n\n/**\n * Provides the location strategy that uses the URL fragment instead of the history API.\n *\n * @usageNotes\n *\n * Basic example of how you can use the hash location option:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withHashLocation())\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link provideRouter}\n * @see {@link HashLocationStrategy}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withHashLocation(): RouterHashLocationFeature {\n  const providers = [{provide: LocationStrategy, useClass: HashLocationStrategy}];\n  return routerFeature(RouterFeatureKind.RouterHashLocationFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withNavigationErrorHandler` for use with `provideRouter`.\n *\n * @see {@link withNavigationErrorHandler}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type NavigationErrorHandlerFeature =\n  RouterFeature<RouterFeatureKind.NavigationErrorHandlerFeature>;\n\n/**\n * Provides a function which is called when a navigation error occurs.\n *\n * This function is run inside application's [injection context](guide/di/dependency-injection-context)\n * so you can use the [`inject`](api/core/inject) function.\n *\n * This function can return a `RedirectCommand` to convert the error to a redirect, similar to returning\n * a `UrlTree` or `RedirectCommand` from a guard. This will also prevent the `Router` from emitting\n * `NavigationError`; it will instead emit `NavigationCancel` with code NavigationCancellationCode.Redirect.\n * Return values other than `RedirectCommand` are ignored and do not change any behavior with respect to\n * how the `Router` handles the error.\n *\n * @usageNotes\n *\n * Basic example of how you can use the error handler option:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withNavigationErrorHandler((e: NavigationError) =>\n * inject(MyErrorTracker).trackError(e)))\n *     ]\n *   }\n * );\n * ```\n *\n * @see {@link NavigationError}\n * @see {@link core/inject}\n * @see {@link runInInjectionContext}\n *\n * @returns A set of providers for use with `provideRouter`.\n *\n * @publicApi\n */\nexport function withNavigationErrorHandler(\n  handler: (error: NavigationError) => unknown | RedirectCommand,\n): NavigationErrorHandlerFeature {\n  const providers = [\n    {\n      provide: NAVIGATION_ERROR_HANDLER,\n      useValue: handler,\n    },\n  ];\n  return routerFeature(RouterFeatureKind.NavigationErrorHandlerFeature, providers);\n}\n\n/**\n * A type alias for providers returned by `withComponentInputBinding` for use with `provideRouter`.\n *\n * @see {@link withComponentInputBinding}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type ComponentInputBindingFeature =\n  RouterFeature<RouterFeatureKind.ComponentInputBindingFeature>;\n\n/**\n * A type alias for providers returned by `withViewTransitions` for use with `provideRouter`.\n *\n * @see {@link withViewTransitions}\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type ViewTransitionsFeature = RouterFeature<RouterFeatureKind.ViewTransitionsFeature>;\n\n/**\n * Enables binding information from the `Router` state directly to the inputs of the component in\n * `Route` configurations.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withComponentInputBinding())\n *     ]\n *   }\n * );\n * ```\n *\n * The router bindings information from any of the following sources:\n *\n *  - query parameters\n *  - path and matrix parameters\n *  - static route data\n *  - data from resolvers\n *\n * Duplicate keys are resolved in the same order from above, from least to greatest,\n * meaning that resolvers have the highest precedence and override any of the other information\n * from the route.\n *\n * Importantly, when an input does not have an item in the route data with a matching key, this\n * input is set to `undefined`. This prevents previous information from being\n * retained if the data got removed from the route (i.e. if a query parameter is removed).\n * Default values can be provided with a resolver on the route to ensure the value is always present\n * or an input and use an input transform in the component.\n *\n * @see {@link guide/components/inputs#input-transforms input transforms}\n * @returns A set of providers for use with `provideRouter`.\n */\nexport function withComponentInputBinding(): ComponentInputBindingFeature {\n  const providers = [\n    RoutedComponentInputBinder,\n    {provide: INPUT_BINDER, useExisting: RoutedComponentInputBinder},\n  ];\n\n  return routerFeature(RouterFeatureKind.ComponentInputBindingFeature, providers);\n}\n\n/**\n * Enables view transitions in the Router by running the route activation and deactivation inside of\n * `document.startViewTransition`.\n *\n * Note: The View Transitions API is not available in all browsers. If the browser does not support\n * view transitions, the Router will not attempt to start a view transition and continue processing\n * the navigation as usual.\n *\n * @usageNotes\n *\n * Basic example of how you can enable the feature:\n * ```\n * const appRoutes: Routes = [];\n * bootstrapApplication(AppComponent,\n *   {\n *     providers: [\n *       provideRouter(appRoutes, withViewTransitions())\n *     ]\n *   }\n * );\n * ```\n *\n * @returns A set of providers for use with `provideRouter`.\n * @see https://developer.chrome.com/docs/web-platform/view-transitions/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API\n * @developerPreview\n */\nexport function withViewTransitions(\n  options?: ViewTransitionsFeatureOptions,\n): ViewTransitionsFeature {\n  const providers = [\n    {provide: CREATE_VIEW_TRANSITION, useValue: createViewTransition},\n    {\n      provide: VIEW_TRANSITION_OPTIONS,\n      useValue: {skipNextTransition: !!options?.skipInitialTransition, ...options},\n    },\n  ];\n  return routerFeature(RouterFeatureKind.ViewTransitionsFeature, providers);\n}\n\n/**\n * A type alias that represents all Router features available for use with `provideRouter`.\n * Features can be enabled by adding special functions to the `provideRouter` call.\n * See documentation for each symbol to find corresponding function name. See also `provideRouter`\n * documentation on how to use those functions.\n *\n * @see {@link provideRouter}\n *\n * @publicApi\n */\nexport type RouterFeatures =\n  | PreloadingFeature\n  | DebugTracingFeature\n  | InitialNavigationFeature\n  | InMemoryScrollingFeature\n  | RouterConfigurationFeature\n  | NavigationErrorHandlerFeature\n  | ComponentInputBindingFeature\n  | ViewTransitionsFeature\n  | RouterHashLocationFeature;\n\n/**\n * The list of features as an enum to uniquely type each feature.\n */\nexport const enum RouterFeatureKind {\n  PreloadingFeature,\n  DebugTracingFeature,\n  EnabledBlockingInitialNavigationFeature,\n  DisabledInitialNavigationFeature,\n  InMemoryScrollingFeature,\n  RouterConfigurationFeature,\n  RouterHashLocationFeature,\n  NavigationErrorHandlerFeature,\n  ComponentInputBindingFeature,\n  ViewTransitionsFeature,\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HashLocationStrategy,\n  Location,\n  LocationStrategy,\n  PathLocationStrategy,\n  ViewportScroller,\n} from '@angular/common';\nimport {\n  APP_BOOTSTRAP_LISTENER,\n  ComponentRef,\n  inject,\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  NgZone,\n  Optional,\n  Provider,\n  SkipSelf,\n  ÉµRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {RouterLink} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {RuntimeErrorCode} from './errors';\nimport {Routes} from './models';\nimport {NavigationTransitions} from './navigation_transition';\nimport {\n  getBootstrapListener,\n  rootRoute,\n  ROUTER_IS_PROVIDED,\n  withComponentInputBinding,\n  withDebugTracing,\n  withDisabledInitialNavigation,\n  withEnabledBlockingInitialNavigation,\n  withPreloading,\n  withViewTransitions,\n} from './provide_router';\nimport {Router} from './router';\nimport {ExtraOptions, ROUTER_CONFIGURATION} from './router_config';\nimport {RouterConfigLoader, ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ROUTER_SCROLLER, RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {DefaultUrlSerializer, UrlSerializer} from './url_tree';\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, EmptyOutletComponent];\n\n/**\n * @docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>(\n  typeof ngDevMode === 'undefined' || ngDevMode\n    ? 'router duplicate forRoot guard'\n    : 'ROUTER_FORROOT_GUARD',\n);\n\n// TODO(atscott): All of these except `ActivatedRoute` are `providedIn: 'root'`. They are only kept\n// here to avoid a breaking change whereby the provider order matters based on where the\n// `RouterModule`/`RouterTestingModule` is imported. These can/should be removed as a \"breaking\"\n// change in a major version.\nexport const ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  Router,\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  RouterConfigLoader,\n  // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can\n  // be removed when `provideRoutes` is removed.\n  typeof ngDevMode === 'undefined' || ngDevMode\n    ? {provide: ROUTER_IS_PROVIDED, useValue: true}\n    : [],\n];\n\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/routing/common-router-tasks) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\n@NgModule({\n  imports: ROUTER_DIRECTIVES,\n  exports: ROUTER_DIRECTIVES,\n})\nexport class RouterModule {\n  constructor(@Optional() @Inject(ROUTER_FORROOT_GUARD) guard: any) {}\n\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * When registering the NgModule at the root, import as follows:\n   *\n   * ```\n   * @NgModule({\n   *   imports: [RouterModule.forRoot(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return The new `NgModule`.\n   *\n   */\n  static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        typeof ngDevMode === 'undefined' || ngDevMode\n          ? config?.enableTracing\n            ? withDebugTracing().Éµproviders\n            : []\n          : [],\n        {provide: ROUTES, multi: true, useValue: routes},\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]],\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(),\n        provideRouterScroller(),\n        config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).Éµproviders : [],\n        config?.initialNavigation ? provideInitialNavigation(config) : [],\n        config?.bindToComponentInputs ? withComponentInputBinding().Éµproviders : [],\n        config?.enableViewTransitions ? withViewTransitions().Éµproviders : [],\n        provideRouterInitializer(),\n      ],\n    };\n  }\n\n  /**\n   * Creates a module with all the router directives and a provider registering routes,\n   * without creating a new Router service.\n   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n   *\n   * ```\n   * @NgModule({\n   *   imports: [RouterModule.forChild(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n   * @return The new NgModule.\n   *\n   */\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [{provide: ROUTES, multi: true, useValue: routes}],\n    };\n  }\n}\n\n/**\n * For internal use by `RouterModule` only. Note that this differs from `withInMemoryRouterScroller`\n * because it reads from the `ExtraOptions` which should not be used in the standalone world.\n */\nexport function provideRouterScroller(): Provider {\n  return {\n    provide: ROUTER_SCROLLER,\n    useFactory: () => {\n      const viewportScroller = inject(ViewportScroller);\n      const zone = inject(NgZone);\n      const config: ExtraOptions = inject(ROUTER_CONFIGURATION);\n      const transitions = inject(NavigationTransitions);\n      const urlSerializer = inject(UrlSerializer);\n      if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n      }\n      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);\n    },\n  };\n}\n\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` should\n// provide hash location directly via `{provide: LocationStrategy, useClass: HashLocationStrategy}`.\nfunction provideHashLocationStrategy(): Provider {\n  return {provide: LocationStrategy, useClass: HashLocationStrategy};\n}\n\n// Note: For internal use only with `RouterModule`. Standalone setup via `provideRouter` does not\n// need this at all because `PathLocationStrategy` is the default factory for `LocationStrategy`.\nfunction providePathLocationStrategy(): Provider {\n  return {provide: LocationStrategy, useClass: PathLocationStrategy};\n}\n\nexport function provideForRootGuard(router: Router): any {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {\n    throw new RuntimeError(\n      RuntimeErrorCode.FOR_ROOT_CALLED_TWICE,\n      `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector.` +\n        ` Lazy loaded modules should use RouterModule.forChild() instead.`,\n    );\n  }\n  return 'guarded';\n}\n\n// Note: For internal use only with `RouterModule`. Standalone router setup with `provideRouter`\n// users call `withXInitialNavigation` directly.\nfunction provideInitialNavigation(config: Pick<ExtraOptions, 'initialNavigation'>): Provider[] {\n  return [\n    config.initialNavigation === 'disabled' ? withDisabledInitialNavigation().Éµproviders : [],\n    config.initialNavigation === 'enabledBlocking'\n      ? withEnabledBlockingInitialNavigation().Éµproviders\n      : [],\n  ];\n}\n\n// TODO(atscott): This should not be in the public API\n/**\n * A DI token for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nexport const ROUTER_INITIALIZER = new InjectionToken<(compRef: ComponentRef<any>) => void>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'Router Initializer' : '',\n);\n\nfunction provideRouterInitializer(): Provider[] {\n  return [\n    // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just\n    // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Type} from '@angular/core';\n\nimport {\n  CanActivate,\n  CanActivateChild,\n  CanActivateChildFn,\n  CanActivateFn,\n  CanDeactivate,\n  CanDeactivateFn,\n  CanMatch,\n  CanMatchFn,\n  Resolve,\n  ResolveFn,\n} from '../models';\n\n/**\n * Maps an array of injectable classes with canMatch functions to an array of equivalent\n * `CanMatchFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport function mapToCanMatch(providers: Array<Type<CanMatch>>): CanMatchFn[] {\n  return providers.map(\n    (provider) =>\n      (...params) =>\n        inject(provider).canMatch(...params),\n  );\n}\n\n/**\n * Maps an array of injectable classes with canActivate functions to an array of equivalent\n * `CanActivateFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport function mapToCanActivate(providers: Array<Type<CanActivate>>): CanActivateFn[] {\n  return providers.map(\n    (provider) =>\n      (...params) =>\n        inject(provider).canActivate(...params),\n  );\n}\n/**\n * Maps an array of injectable classes with canActivateChild functions to an array of equivalent\n * `CanActivateChildFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport function mapToCanActivateChild(\n  providers: Array<Type<CanActivateChild>>,\n): CanActivateChildFn[] {\n  return providers.map(\n    (provider) =>\n      (...params) =>\n        inject(provider).canActivateChild(...params),\n  );\n}\n/**\n * Maps an array of injectable classes with canDeactivate functions to an array of equivalent\n * `CanDeactivateFn` for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='CanActivate'}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport function mapToCanDeactivate<T = unknown>(\n  providers: Array<Type<CanDeactivate<T>>>,\n): CanDeactivateFn<T>[] {\n  return providers.map(\n    (provider) =>\n      (...params) =>\n        inject(provider).canDeactivate(...params),\n  );\n}\n/**\n * Maps an injectable class with a resolve function to an equivalent `ResolveFn`\n * for use in a `Route` definition.\n *\n * Usage {@example router/utils/functional_guards.ts region='Resolve'}\n *\n * @publicApi\n * @see {@link Route}\n */\nexport function mapToResolve<T>(provider: Type<Resolve<T>>): ResolveFn<T> {\n  return (...params) => inject(provider).resolve(...params);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('18.2.14');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBO,IAAMA,iBAAiB;AAOvB,IAAMC,gBAAgCC,OAAO,YAAY;AAmDhE,IAAMC,cAAN,MAAiB;EAGfC,YAAYC,QAAc;AACxB,SAAKA,SAASA,UAAU,CAAA;;EAG1BC,IAAIC,MAAY;AACd,WAAOC,OAAOC,UAAUC,eAAeC,KAAK,KAAKN,QAAQE,IAAI;;EAG/DK,IAAIL,MAAY;AACd,QAAI,KAAKD,IAAIC,IAAI,GAAG;AAClB,YAAMM,IAAI,KAAKR,OAAOE,IAAI;AAC1B,aAAOO,MAAMC,QAAQF,CAAC,IAAIA,EAAE,CAAC,IAAIA;;AAGnC,WAAO;;EAGTG,OAAOT,MAAY;AACjB,QAAI,KAAKD,IAAIC,IAAI,GAAG;AAClB,YAAMM,IAAI,KAAKR,OAAOE,IAAI;AAC1B,aAAOO,MAAMC,QAAQF,CAAC,IAAIA,IAAI,CAACA,CAAC;;AAGlC,WAAO,CAAA;;EAGT,IAAII,OAAI;AACN,WAAOT,OAAOS,KAAK,KAAKZ,MAAM;;AAEjC;AASK,SAAUa,kBAAkBb,QAAc;AAC9C,SAAO,IAAIF,YAAYE,MAAM;AAC/B;SAiBgBc,kBACdC,UACAC,cACAC,OAAY;AAEZ,QAAMC,QAAQD,MAAME,KAAMC,MAAM,GAAG;AAEnC,MAAIF,MAAMG,SAASN,SAASM,QAAQ;AAElC,WAAO;;AAGT,MACEJ,MAAMK,cAAc,WACnBN,aAAaO,YAAW,KAAML,MAAMG,SAASN,SAASM,SACvD;AAEA,WAAO;;AAGT,QAAMG,YAAyC,CAAA;AAG/C,WAASC,QAAQ,GAAGA,QAAQP,MAAMG,QAAQI,SAAS;AACjD,UAAMC,OAAOR,MAAMO,KAAK;AACxB,UAAME,UAAUZ,SAASU,KAAK;AAC9B,UAAMG,cAAcF,KAAK,CAAC,MAAM;AAChC,QAAIE,aAAa;AACfJ,gBAAUE,KAAKG,UAAU,CAAC,CAAC,IAAIF;eACtBD,SAASC,QAAQR,MAAM;AAEhC,aAAO;;;AAIX,SAAO;IAACW,UAAUf,SAASgB,MAAM,GAAGb,MAAMG,MAAM;IAAGG;EAAS;AAC9D;AC/JgB,SAAAQ,mBAAmBC,GAAUC,GAAQ;AACnD,MAAID,EAAEZ,WAAWa,EAAEb,OAAQ,QAAO;AAClC,WAASc,IAAI,GAAGA,IAAIF,EAAEZ,QAAQ,EAAEc,GAAG;AACjC,QAAI,CAACC,aAAaH,EAAEE,CAAC,GAAGD,EAAEC,CAAC,CAAC,EAAG,QAAO;;AAExC,SAAO;AACT;AAEgB,SAAAC,aACdH,GACAC,GAAgC;AAIhC,QAAMG,KAAKJ,IAAIK,YAAYL,CAAC,IAAIM;AAChC,QAAMC,KAAKN,IAAII,YAAYJ,CAAC,IAAIK;AAChC,MAAI,CAACF,MAAM,CAACG,MAAMH,GAAGhB,UAAUmB,GAAGnB,QAAQ;AACxC,WAAO;;AAET,MAAIoB;AACJ,WAASN,IAAI,GAAGA,IAAIE,GAAGhB,QAAQc,KAAK;AAClCM,UAAMJ,GAAGF,CAAC;AACV,QAAI,CAACO,oBAAoBT,EAAEQ,GAAG,GAAGP,EAAEO,GAAG,CAAC,GAAG;AACxC,aAAO;;;AAGX,SAAO;AACT;AAKM,SAAUH,YAAYK,KAAW;AACrC,SAAO,CAAC,GAAGxC,OAAOS,KAAK+B,GAAG,GAAG,GAAGxC,OAAOyC,sBAAsBD,GAAG,CAAC;AACnE;AAKgB,SAAAD,oBAAoBT,GAAsBC,GAAoB;AAC5E,MAAIzB,MAAMC,QAAQuB,CAAC,KAAKxB,MAAMC,QAAQwB,CAAC,GAAG;AACxC,QAAID,EAAEZ,WAAWa,EAAEb,OAAQ,QAAO;AAClC,UAAMwB,UAAU,CAAC,GAAGZ,CAAC,EAAEa,KAAI;AAC3B,UAAMC,UAAU,CAAC,GAAGb,CAAC,EAAEY,KAAI;AAC3B,WAAOD,QAAQG,MAAM,CAACC,KAAKxB,UAAUsB,QAAQtB,KAAK,MAAMwB,GAAG;SACtD;AACL,WAAOhB,MAAMC;;AAEjB;AAKM,SAAUgB,MAAQjB,GAAM;AAC5B,SAAOA,EAAEZ,SAAS,IAAIY,EAAEA,EAAEZ,SAAS,CAAC,IAAI;AAC1C;AAEM,SAAU8B,mBAAsBC,OAAqC;AACzE,MAAIC,aAAaD,KAAK,GAAG;AACvB,WAAOA;;AAGT,MAAIE,UAAUF,KAAK,GAAG;AAIpB,WAAOG,KAAKC,QAAQC,QAAQL,KAAK,CAAC;;AAGpC,SAAOM,GAAGN,KAAK;AACjB;ACVA,IAAMO,iBAAuE;EAC3E,SAASC;EACT,UAAUC;;AAEZ,IAAMC,kBAA6D;EACjE,SAASC;EACT,UAAUC;EACV,WAAWC,MAAM;;SAGHC,aACdC,WACAC,WACAC,SAA6B;AAE7B,SACEV,eAAeU,QAAQC,KAAK,EAAEH,UAAUI,MAAMH,UAAUG,MAAMF,QAAQG,YAAY,KAClFV,gBAAgBO,QAAQI,WAAW,EAAEN,UAAUM,aAAaL,UAAUK,WAAW,KACjF,EAAEJ,QAAQK,aAAa,WAAWP,UAAUO,aAAaN,UAAUM;AAEvE;AAEA,SAASX,YAAYI,WAAmBC,WAAiB;AAEvD,SAAOhC,aAAa+B,WAAWC,SAAS;AAC1C;AAEA,SAASR,mBACPO,WACAC,WACAI,cAA+B;AAE/B,MAAI,CAACG,UAAUR,UAAUpD,UAAUqD,UAAUrD,QAAQ,EAAG,QAAO;AAC/D,MAAI,CAAC6D,kBAAkBT,UAAUpD,UAAUqD,UAAUrD,UAAUyD,YAAY,GAAG;AAC5E,WAAO;;AAET,MAAIL,UAAUU,qBAAqBT,UAAUS,iBAAkB,QAAO;AACtE,aAAWC,KAAKV,UAAUW,UAAU;AAClC,QAAI,CAACZ,UAAUY,SAASD,CAAC,EAAG,QAAO;AACnC,QAAI,CAAClB,mBAAmBO,UAAUY,SAASD,CAAC,GAAGV,UAAUW,SAASD,CAAC,GAAGN,YAAY,EAChF,QAAO;;AAEX,SAAO;AACT;AAEA,SAASR,eAAeG,WAAmBC,WAAiB;AAC1D,SACEjE,OAAOS,KAAKwD,SAAS,EAAE/C,UAAUlB,OAAOS,KAAKuD,SAAS,EAAE9C,UACxDlB,OAAOS,KAAKwD,SAAS,EAAEpB,MAAOP,SAAQC,oBAAoByB,UAAU1B,GAAG,GAAG2B,UAAU3B,GAAG,CAAC,CAAC;AAE7F;AAEA,SAASoB,qBACPM,WACAC,WACAI,cAA+B;AAE/B,SAAOQ,2BAA2Bb,WAAWC,WAAWA,UAAUrD,UAAUyD,YAAY;AAC1F;AAEA,SAASQ,2BACPb,WACAC,WACAa,gBACAT,cAA+B;AAE/B,MAAIL,UAAUpD,SAASM,SAAS4D,eAAe5D,QAAQ;AACrD,UAAM6D,UAAUf,UAAUpD,SAASgB,MAAM,GAAGkD,eAAe5D,MAAM;AACjE,QAAI,CAACsD,UAAUO,SAASD,cAAc,EAAG,QAAO;AAChD,QAAIb,UAAU7C,YAAW,EAAI,QAAO;AACpC,QAAI,CAACqD,kBAAkBM,SAASD,gBAAgBT,YAAY,EAAG,QAAO;AACtE,WAAO;aACEL,UAAUpD,SAASM,WAAW4D,eAAe5D,QAAQ;AAC9D,QAAI,CAACsD,UAAUR,UAAUpD,UAAUkE,cAAc,EAAG,QAAO;AAC3D,QAAI,CAACL,kBAAkBT,UAAUpD,UAAUkE,gBAAgBT,YAAY,EAAG,QAAO;AACjF,eAAWM,KAAKV,UAAUW,UAAU;AAClC,UAAI,CAACZ,UAAUY,SAASD,CAAC,EAAG,QAAO;AACnC,UAAI,CAACjB,qBAAqBM,UAAUY,SAASD,CAAC,GAAGV,UAAUW,SAASD,CAAC,GAAGN,YAAY,GAAG;AACrF,eAAO;;;AAGX,WAAO;SACF;AACL,UAAMU,UAAUD,eAAelD,MAAM,GAAGoC,UAAUpD,SAASM,MAAM;AACjE,UAAM8D,OAAOF,eAAelD,MAAMoC,UAAUpD,SAASM,MAAM;AAC3D,QAAI,CAACsD,UAAUR,UAAUpD,UAAUmE,OAAO,EAAG,QAAO;AACpD,QAAI,CAACN,kBAAkBT,UAAUpD,UAAUmE,SAASV,YAAY,EAAG,QAAO;AAC1E,QAAI,CAACL,UAAUY,SAASpF,cAAc,EAAG,QAAO;AAChD,WAAOqF,2BACLb,UAAUY,SAASpF,cAAc,GACjCyE,WACAe,MACAX,YAAY;;AAGlB;AAEA,SAASI,kBACPQ,gBACAH,gBACAZ,SAA0B;AAE1B,SAAOY,eAAejC,MAAM,CAACqC,kBAAkBlD,MAAK;AAClD,WAAO2B,gBAAgBO,OAAO,EAAEe,eAAejD,CAAC,EAAEmD,YAAYD,iBAAiBC,UAAU;EAC3F,CAAC;AACH;IAgCaC,gBAAO;EAIlBxF,YAESwE,OAAwB,IAAIiB,gBAAgB,CAAA,GAAI,CAAA,CAAE,GAElDf,cAAsB,CAAA,GAEtBC,WAA0B,MAAI;AAJ9B,SAAIH,OAAJA;AAEA,SAAWE,cAAXA;AAEA,SAAQC,WAARA;AAEP,QAAI,OAAOe,cAAc,eAAeA,WAAW;AACjD,UAAIlB,KAAKxD,SAASM,SAAS,GAAG;AAC5B,cAAM,IAAIqE,aAAY,MAEpB,2JACmG;;;;EAM3G,IAAIC,gBAAa;AACf,SAAKC,mBAAmB/E,kBAAkB,KAAK4D,WAAW;AAC1D,WAAO,KAAKmB;;;EAIdC,WAAQ;AACN,WAAOC,mBAAmBC,UAAU,IAAI;;AAE3C;IAWYP,wBAAe;EAI1BzF,YAESgB,UAEAgE,UAA0C;AAF1C,SAAQhE,WAARA;AAEA,SAAQgE,WAARA;AANT,SAAMiB,SAA2B;AAQ/B7F,WAAO8F,OAAOlB,QAAQ,EAAEmB,QAAS1F,OAAOA,EAAEwF,SAAS,IAAK;;;EAI1DzE,cAAW;AACT,WAAO,KAAKsD,mBAAmB;;;EAIjC,IAAIA,mBAAgB;AAClB,WAAO1E,OAAOS,KAAK,KAAKmE,QAAQ,EAAE1D;;;EAIpCwE,WAAQ;AACN,WAAOM,eAAe,IAAI;;AAE7B;IA4BYC,mBAAU;EAIrBrG,YAESoB,MAGAmE,YAAoC;AAHpC,SAAInE,OAAJA;AAGA,SAAUmE,aAAVA;;EAGT,IAAIe,eAAY;AACd,SAAKC,kBAAkBzF,kBAAkB,KAAKyE,UAAU;AACxD,WAAO,KAAKgB;;;EAIdT,WAAQ;AACN,WAAOU,cAAc,IAAI;;AAE5B;AAEe,SAAAC,cAAcC,IAAkBC,IAAgB;AAC9D,SAAO/B,UAAU8B,IAAIC,EAAE,KAAKD,GAAGzD,MAAM,CAACf,GAAGE,MAAMC,aAAaH,EAAEqD,YAAYoB,GAAGvE,CAAC,EAAEmD,UAAU,CAAC;AAC7F;AAEgB,SAAAX,UAAU8B,IAAkBC,IAAgB;AAC1D,MAAID,GAAGpF,WAAWqF,GAAGrF,OAAQ,QAAO;AACpC,SAAOoF,GAAGzD,MAAM,CAACf,GAAGE,MAAMF,EAAEd,SAASuF,GAAGvE,CAAC,EAAEhB,IAAI;AACjD;AAEgB,SAAAwF,qBACdhF,SACAiF,IAA0C;AAE1C,MAAIC,MAAW,CAAA;AACf1G,SAAO2G,QAAQnF,QAAQoD,QAAQ,EAAEmB,QAAQ,CAAC,CAACa,aAAaC,KAAK,MAAK;AAChE,QAAID,gBAAgBpH,gBAAgB;AAClCkH,YAAMA,IAAII,OAAOL,GAAGI,OAAOD,WAAW,CAAC;;EAE3C,CAAC;AACD5G,SAAO2G,QAAQnF,QAAQoD,QAAQ,EAAEmB,QAAQ,CAAC,CAACa,aAAaC,KAAK,MAAK;AAChE,QAAID,gBAAgBpH,gBAAgB;AAClCkH,YAAMA,IAAII,OAAOL,GAAGI,OAAOD,WAAW,CAAC;;EAE3C,CAAC;AACD,SAAOF;AACT;IAesBK,sBAAAA,eAAa;;;uDAAb;IAAA;EAAa;;;;MAAbC,SAAAA,OADuB,MAAA,IAAAC,qBAAU,GAAA;MAAAC,YACpB;IAAA,CAAA;EADoB;;;qFACpB,CAAA;UADlCC;IAAWC,MAAA,CAAA;MAACF,YAAY;MAAQG,YAAYA,MAAM,IAAIJ,qBAAoB;IAAE,CAAC;;;IA2BjEA,6BAAoB;;EAE/BK,MAAMC,KAAW;AACf,UAAMC,IAAI,IAAIC,UAAUF,GAAG;AAC3B,WAAO,IAAInC,QAAQoC,EAAEE,iBAAgB,GAAIF,EAAEG,iBAAgB,GAAIH,EAAEI,cAAa,CAAE;;;EAIlFhC,UAAUiC,OAAa;AACrB,UAAMrG,UAAU,IAAIsG,iBAAiBD,MAAKzD,MAAM,IAAI,CAAC;AACrD,UAAM2D,QAAQC,qBAAqBH,MAAKvD,WAAW;AACnD,UAAMC,WACJ,OAAOsD,MAAKtD,aAAa,WAAW,IAAI0D,kBAAkBJ,MAAKtD,QAAQ,CAAC,KAAK;AAE/E,WAAO,GAAG/C,OAAO,GAAGuG,KAAK,GAAGxD,QAAQ;;AAEvC;AAED,IAAMoB,qBAAqB,IAAIsB,qBAAoB;AAE7C,SAAUjB,eAAexE,SAAwB;AACrD,SAAOA,QAAQZ,SAASsH,IAAKV,OAAMpB,cAAcoB,CAAC,CAAC,EAAEW,KAAK,GAAG;AAC/D;AAEA,SAASL,iBAAiBtG,SAA0B4C,MAAa;AAC/D,MAAI,CAAC5C,QAAQJ,YAAW,GAAI;AAC1B,WAAO4E,eAAexE,OAAO;;AAG/B,MAAI4C,MAAM;AACR,UAAMgE,UAAU5G,QAAQoD,SAASpF,cAAc,IAC3CsI,iBAAiBtG,QAAQoD,SAASpF,cAAc,GAAG,KAAK,IACxD;AACJ,UAAMoF,WAAqB,CAAA;AAE3B5E,WAAO2G,QAAQnF,QAAQoD,QAAQ,EAAEmB,QAAQ,CAAC,CAACsC,GAAGhI,CAAC,MAAK;AAClD,UAAIgI,MAAM7I,gBAAgB;AACxBoF,iBAAS0D,KAAK,GAAGD,CAAC,IAAIP,iBAAiBzH,GAAG,KAAK,CAAC,EAAE;;IAEtD,CAAC;AAED,WAAOuE,SAAS1D,SAAS,IAAI,GAAGkH,OAAO,IAAIxD,SAASuD,KAAK,IAAI,CAAC,MAAMC;SAC/D;AACL,UAAMxD,WAAW4B,qBAAqBhF,SAAS,CAACnB,GAAoBgI,MAAa;AAC/E,UAAIA,MAAM7I,gBAAgB;AACxB,eAAO,CAACsI,iBAAiBtG,QAAQoD,SAASpF,cAAc,GAAG,KAAK,CAAC;;AAGnE,aAAO,CAAC,GAAG6I,CAAC,IAAIP,iBAAiBzH,GAAG,KAAK,CAAC,EAAE;IAC9C,CAAC;AAGD,QAAIL,OAAOS,KAAKe,QAAQoD,QAAQ,EAAE1D,WAAW,KAAKM,QAAQoD,SAASpF,cAAc,KAAK,MAAM;AAC1F,aAAO,GAAGwG,eAAexE,OAAO,CAAC,IAAIoD,SAAS,CAAC,CAAC;;AAGlD,WAAO,GAAGoB,eAAexE,OAAO,CAAC,KAAKoD,SAASuD,KAAK,IAAI,CAAC;;AAE7D;AAQA,SAASI,gBAAgBC,GAAS;AAChC,SAAOC,mBAAmBD,CAAC,EACxBE,QAAQ,QAAQ,GAAG,EACnBA,QAAQ,SAAS,GAAG,EACpBA,QAAQ,QAAQ,GAAG,EACnBA,QAAQ,SAAS,GAAG;AACzB;AAQM,SAAUC,eAAeH,GAAS;AACtC,SAAOD,gBAAgBC,CAAC,EAAEE,QAAQ,SAAS,GAAG;AAChD;AAQM,SAAUT,kBAAkBO,GAAS;AACzC,SAAOI,UAAUJ,CAAC;AACpB;AASM,SAAUK,iBAAiBL,GAAS;AACxC,SAAOD,gBAAgBC,CAAC,EAAEE,QAAQ,OAAO,KAAK,EAAEA,QAAQ,OAAO,KAAK,EAAEA,QAAQ,SAAS,GAAG;AAC5F;AAEM,SAAUI,OAAON,GAAS;AAC9B,SAAOO,mBAAmBP,CAAC;AAC7B;AAIM,SAAUQ,YAAYR,GAAS;AACnC,SAAOM,OAAON,EAAEE,QAAQ,OAAO,KAAK,CAAC;AACvC;AAEM,SAAUtC,cAAcpF,MAAgB;AAC5C,SAAO,GAAG6H,iBAAiB7H,KAAKA,IAAI,CAAC,GAAGiI,sBAAsBjI,KAAKmE,UAAU,CAAC;AAChF;AAEA,SAAS8D,sBAAsBpJ,QAA+B;AAC5D,SAAOG,OAAO2G,QAAQ9G,MAAM,EACzBqI,IAAI,CAAC,CAAC5F,KAAKW,KAAK,MAAM,IAAI4F,iBAAiBvG,GAAG,CAAC,IAAIuG,iBAAiB5F,KAAK,CAAC,EAAE,EAC5EkF,KAAK,EAAE;AACZ;AAEA,SAASH,qBAAqBnI,QAA4B;AACxD,QAAMqJ,YAAsBlJ,OAAO2G,QAAQ9G,MAAM,EAC9CqI,IAAI,CAAC,CAACnI,MAAMkD,KAAK,MAAK;AACrB,WAAO3C,MAAMC,QAAQ0C,KAAK,IACtBA,MAAMiF,IAAK7H,OAAM,GAAGsI,eAAe5I,IAAI,CAAC,IAAI4I,eAAetI,CAAC,CAAC,EAAE,EAAE8H,KAAK,GAAG,IACzE,GAAGQ,eAAe5I,IAAI,CAAC,IAAI4I,eAAe1F,KAAK,CAAC;EACtD,CAAC,EACAkG,OAAQX,OAAMA,CAAC;AAElB,SAAOU,UAAUhI,SAAS,IAAIgI,UAAUf,KAAK,GAAG,CAAC,KAAK;AACxD;AAEA,IAAMiB,aAAa;AACnB,SAASC,cAAcC,KAAW;AAChC,QAAMC,SAAQD,IAAIC,MAAMH,UAAU;AAClC,SAAOG,SAAQA,OAAM,CAAC,IAAI;AAC5B;AAEA,IAAMC,0BAA0B;AAChC,SAASC,uBAAuBH,KAAW;AACzC,QAAMC,SAAQD,IAAIC,MAAMC,uBAAuB;AAC/C,SAAOD,SAAQA,OAAM,CAAC,IAAI;AAC5B;AAEA,IAAMG,iBAAiB;AAEvB,SAASC,iBAAiBL,KAAW;AACnC,QAAMC,SAAQD,IAAIC,MAAMG,cAAc;AACtC,SAAOH,SAAQA,OAAM,CAAC,IAAI;AAC5B;AAEA,IAAMK,uBAAuB;AAE7B,SAASC,wBAAwBP,KAAW;AAC1C,QAAMC,SAAQD,IAAIC,MAAMK,oBAAoB;AAC5C,SAAOL,SAAQA,OAAM,CAAC,IAAI;AAC5B;AAEA,IAAM9B,YAAN,MAAe;EAGb7H,YAAoB2H,KAAW;AAAX,SAAGA,MAAHA;AAClB,SAAKuC,YAAYvC;;EAGnBG,mBAAgB;AACd,SAAKqC,gBAAgB,GAAG;AAExB,QAAI,KAAKD,cAAc,MAAM,KAAKE,eAAe,GAAG,KAAK,KAAKA,eAAe,GAAG,GAAG;AACjF,aAAO,IAAI3E,gBAAgB,CAAA,GAAI,CAAA,CAAE;;AAInC,WAAO,IAAIA,gBAAgB,CAAA,GAAI,KAAK4E,cAAa,CAAE;;EAGrDtC,mBAAgB;AACd,UAAM9H,SAAiB,CAAA;AACvB,QAAI,KAAKkK,gBAAgB,GAAG,GAAG;AAC7B,SAAG;AACD,aAAKG,gBAAgBrK,MAAM;MAC7B,SAAS,KAAKkK,gBAAgB,GAAG;;AAEnC,WAAOlK;;EAGT+H,gBAAa;AACX,WAAO,KAAKmC,gBAAgB,GAAG,IAAIhB,mBAAmB,KAAKe,SAAS,IAAI;;EAGlEG,gBAAa;AACnB,QAAI,KAAKH,cAAc,IAAI;AACzB,aAAO,CAAA;;AAGT,SAAKC,gBAAgB,GAAG;AAExB,UAAMnJ,WAAyB,CAAA;AAC/B,QAAI,CAAC,KAAKoJ,eAAe,GAAG,GAAG;AAC7BpJ,eAAS0H,KAAK,KAAK6B,aAAY,CAAE;;AAGnC,WAAO,KAAKH,eAAe,GAAG,KAAK,CAAC,KAAKA,eAAe,IAAI,KAAK,CAAC,KAAKA,eAAe,IAAI,GAAG;AAC3F,WAAKI,QAAQ,GAAG;AAChBxJ,eAAS0H,KAAK,KAAK6B,aAAY,CAAE;;AAGnC,QAAIvF,WAAgD,CAAA;AACpD,QAAI,KAAKoF,eAAe,IAAI,GAAG;AAC7B,WAAKI,QAAQ,GAAG;AAChBxF,iBAAW,KAAKyF,YAAY,IAAI;;AAGlC,QAAI3D,MAA2C,CAAA;AAC/C,QAAI,KAAKsD,eAAe,GAAG,GAAG;AAC5BtD,YAAM,KAAK2D,YAAY,KAAK;;AAG9B,QAAIzJ,SAASM,SAAS,KAAKlB,OAAOS,KAAKmE,QAAQ,EAAE1D,SAAS,GAAG;AAC3DwF,UAAIlH,cAAc,IAAI,IAAI6F,gBAAgBzE,UAAUgE,QAAQ;;AAG9D,WAAO8B;;;;EAKDyD,eAAY;AAClB,UAAMnJ,OAAOqI,cAAc,KAAKS,SAAS;AACzC,QAAI9I,SAAS,MAAM,KAAKgJ,eAAe,GAAG,GAAG;AAC3C,YAAM,IAAIzE,aAAY,OAEnB,OAAOD,cAAc,eAAeA,cACnC,mDAAmD,KAAKwE,SAAS,IAAI;;AAI3E,SAAKM,QAAQpJ,IAAI;AACjB,WAAO,IAAIiF,WAAW6C,OAAO9H,IAAI,GAAG,KAAKsJ,kBAAiB,CAAE;;EAGtDA,oBAAiB;AACvB,UAAMzK,SAAkC,CAAA;AACxC,WAAO,KAAKkK,gBAAgB,GAAG,GAAG;AAChC,WAAKQ,WAAW1K,MAAM;;AAExB,WAAOA;;EAGD0K,WAAW1K,QAA+B;AAChD,UAAMyC,MAAMmH,uBAAuB,KAAKK,SAAS;AACjD,QAAI,CAACxH,KAAK;AACR;;AAEF,SAAK8H,QAAQ9H,GAAG;AAChB,QAAIW,QAAa;AACjB,QAAI,KAAK8G,gBAAgB,GAAG,GAAG;AAC7B,YAAMS,aAAanB,cAAc,KAAKS,SAAS;AAC/C,UAAIU,YAAY;AACdvH,gBAAQuH;AACR,aAAKJ,QAAQnH,KAAK;;;AAItBpD,WAAOiJ,OAAOxG,GAAG,CAAC,IAAIwG,OAAO7F,KAAK;;;EAI5BiH,gBAAgBrK,QAAc;AACpC,UAAMyC,MAAMqH,iBAAiB,KAAKG,SAAS;AAC3C,QAAI,CAACxH,KAAK;AACR;;AAEF,SAAK8H,QAAQ9H,GAAG;AAChB,QAAIW,QAAa;AACjB,QAAI,KAAK8G,gBAAgB,GAAG,GAAG;AAC7B,YAAMS,aAAaX,wBAAwB,KAAKC,SAAS;AACzD,UAAIU,YAAY;AACdvH,gBAAQuH;AACR,aAAKJ,QAAQnH,KAAK;;;AAItB,UAAMwH,aAAazB,YAAY1G,GAAG;AAClC,UAAMoI,aAAa1B,YAAY/F,KAAK;AAEpC,QAAIpD,OAAOK,eAAeuK,UAAU,GAAG;AAErC,UAAIE,aAAa9K,OAAO4K,UAAU;AAClC,UAAI,CAACnK,MAAMC,QAAQoK,UAAU,GAAG;AAC9BA,qBAAa,CAACA,UAAU;AACxB9K,eAAO4K,UAAU,IAAIE;;AAEvBA,iBAAWrC,KAAKoC,UAAU;WACrB;AAEL7K,aAAO4K,UAAU,IAAIC;;;;EAKjBL,YAAYO,cAAqB;AACvC,UAAMhK,WAA6C,CAAA;AACnD,SAAKwJ,QAAQ,GAAG;AAEhB,WAAO,CAAC,KAAKL,gBAAgB,GAAG,KAAK,KAAKD,UAAU5I,SAAS,GAAG;AAC9D,YAAMF,OAAOqI,cAAc,KAAKS,SAAS;AAEzC,YAAM9E,OAAO,KAAK8E,UAAU9I,KAAKE,MAAM;AAIvC,UAAI8D,SAAS,OAAOA,SAAS,OAAOA,SAAS,KAAK;AAChD,cAAM,IAAIO,aAAY,OAEnB,OAAOD,cAAc,eAAeA,cAAc,qBAAqB,KAAKiC,GAAG,GAAG;;AAIvF,UAAIsD,aAAqBzI;AACzB,UAAIpB,KAAK8J,QAAQ,GAAG,IAAI,IAAI;AAC1BD,qBAAa7J,KAAKY,MAAM,GAAGZ,KAAK8J,QAAQ,GAAG,CAAC;AAC5C,aAAKV,QAAQS,UAAU;AACvB,aAAKT,QAAQ,GAAG;iBACPQ,cAAc;AACvBC,qBAAarL;;AAGf,YAAMoF,WAAW,KAAKqF,cAAa;AACnCrJ,eAASiK,UAAU,IACjB7K,OAAOS,KAAKmE,QAAQ,EAAE1D,WAAW,IAC7B0D,SAASpF,cAAc,IACvB,IAAI6F,gBAAgB,CAAA,GAAIT,QAAQ;AACtC,WAAKmF,gBAAgB,IAAI;;AAG3B,WAAOnJ;;EAGDoJ,eAAeV,KAAW;AAChC,WAAO,KAAKQ,UAAUiB,WAAWzB,GAAG;;;EAI9BS,gBAAgBT,KAAW;AACjC,QAAI,KAAKU,eAAeV,GAAG,GAAG;AAC5B,WAAKQ,YAAY,KAAKA,UAAUpI,UAAU4H,IAAIpI,MAAM;AACpD,aAAO;;AAET,WAAO;;EAGDkJ,QAAQd,KAAW;AACzB,QAAI,CAAC,KAAKS,gBAAgBT,GAAG,GAAG;AAC9B,YAAM,IAAI/D,aAAY,OAEnB,OAAOD,cAAc,eAAeA,cAAc,aAAagE,GAAG,IAAI;;;AAI9E;AAEK,SAAU0B,WAAWC,eAA8B;AACvD,SAAOA,cAAcrK,SAASM,SAAS,IACnC,IAAImE,gBAAgB,CAAA,GAAI;IAAC,CAAC7F,cAAc,GAAGyL;EAAa,CAAC,IACzDA;AACN;AAYM,SAAUC,mBAAmBrK,cAA6B;AAC9D,QAAMsK,cAA+C,CAAA;AACrD,aAAW,CAACvE,aAAaC,KAAK,KAAK7G,OAAO2G,QAAQ9F,aAAa+D,QAAQ,GAAG;AACxE,UAAMwG,iBAAiBF,mBAAmBrE,KAAK;AAE/C,QACED,gBAAgBpH,kBAChB4L,eAAexK,SAASM,WAAW,KACnCkK,eAAehK,YAAW,GAC1B;AACA,iBAAW,CAACiK,kBAAkBC,UAAU,KAAKtL,OAAO2G,QAAQyE,eAAexG,QAAQ,GAAG;AACpFuG,oBAAYE,gBAAgB,IAAIC;;IAEpC,WACSF,eAAexK,SAASM,SAAS,KAAKkK,eAAehK,YAAW,GAAI;AAC3E+J,kBAAYvE,WAAW,IAAIwE;;;AAG/B,QAAM5C,IAAI,IAAInD,gBAAgBxE,aAAaD,UAAUuK,WAAW;AAChE,SAAOI,qBAAqB/C,CAAC;AAC/B;AAUA,SAAS+C,qBAAqB/C,GAAkB;AAC9C,MAAIA,EAAE9D,qBAAqB,KAAK8D,EAAE5D,SAASpF,cAAc,GAAG;AAC1D,UAAMmF,IAAI6D,EAAE5D,SAASpF,cAAc;AACnC,WAAO,IAAI6F,gBAAgBmD,EAAE5H,SAASkG,OAAOnC,EAAE/D,QAAQ,GAAG+D,EAAEC,QAAQ;;AAGtE,SAAO4D;AACT;AAEM,SAAUgD,UAAUnL,GAAM;AAC9B,SAAOA,aAAa+E;AACtB;AChvBM,SAAUqG,0BACdC,YACAC,UACArH,cAA6B,MAC7BC,WAA0B,MAAI;AAE9B,QAAMqH,4BAA4BC,4BAA4BH,UAAU;AACxE,SAAOI,8BAA8BF,2BAA2BD,UAAUrH,aAAaC,QAAQ;AACjG;AAEM,SAAUsH,4BAA4B/K,OAA6B;AACvE,MAAIiL;AAEJ,WAASC,qCACPC,cAAoC;AAEpC,UAAMC,eAAoD,CAAA;AAC1D,eAAWC,iBAAiBF,aAAarH,UAAU;AACjD,YAAMR,OAAO4H,qCAAqCG,aAAa;AAC/DD,mBAAaC,cAAcC,MAAM,IAAIhI;;AAEvC,UAAMvD,eAAe,IAAIwE,gBAAgB4G,aAAa1E,KAAK2E,YAAY;AACvE,QAAID,iBAAiBnL,OAAO;AAC1BiL,oBAAclL;;AAEhB,WAAOA;;AAET,QAAMoK,gBAAgBe,qCAAqClL,MAAMsD,IAAI;AACrE,QAAMiI,mBAAmBrB,WAAWC,aAAa;AAEjD,SAAOc,eAAeM;AACxB;AAEM,SAAUP,8BACdJ,YACAC,UACArH,aACAC,UAAuB;AAEvB,MAAIH,OAAOsH;AACX,SAAOtH,KAAKyB,QAAQ;AAClBzB,WAAOA,KAAKyB;;AAKd,MAAI8F,SAASzK,WAAW,GAAG;AACzB,WAAO2G,KAAKzD,MAAMA,MAAMA,MAAME,aAAaC,QAAQ;;AAGrD,QAAM+H,MAAMC,kBAAkBZ,QAAQ;AAEtC,MAAIW,IAAIE,OAAM,GAAI;AAChB,WAAO3E,KAAKzD,MAAMA,MAAM,IAAIiB,gBAAgB,CAAA,GAAI,CAAA,CAAE,GAAGf,aAAaC,QAAQ;;AAG5E,QAAMkI,WAAWC,mCAAmCJ,KAAKlI,MAAMsH,UAAU;AACzE,QAAMiB,kBAAkBF,SAASG,kBAC7BC,2BAA2BJ,SAAS5L,cAAc4L,SAASnL,OAAOgL,IAAIX,QAAQ,IAC9EmB,mBAAmBL,SAAS5L,cAAc4L,SAASnL,OAAOgL,IAAIX,QAAQ;AAC1E,SAAO9D,KAAKzD,MAAMqI,SAAS5L,cAAc8L,iBAAiBrI,aAAaC,QAAQ;AACjF;AAEA,SAASwI,eAAeC,SAAY;AAClC,SAAO,OAAOA,YAAY,YAAYA,WAAW,QAAQ,CAACA,QAAQC,WAAW,CAACD,QAAQE;AACxF;AAMA,SAASC,qBAAqBH,SAAY;AACxC,SAAO,OAAOA,YAAY,YAAYA,WAAW,QAAQA,QAAQC;AACnE;AAEA,SAASpF,KACPuF,SACAC,iBACAV,iBACArI,aACAC,UAAuB;AAEvB,MAAI+I,KAAU,CAAA;AACd,MAAIhJ,aAAa;AACftE,WAAO2G,QAAQrC,WAAW,EAAEyB,QAAQ,CAAC,CAAChG,MAAMkD,KAAK,MAAK;AACpDqK,SAAGvN,IAAI,IAAIO,MAAMC,QAAQ0C,KAAK,IAAIA,MAAMiF,IAAK7H,OAAW,GAAGA,CAAC,EAAE,IAAI,GAAG4C,KAAK;IAC5E,CAAC;;AAGH,MAAIgI;AACJ,MAAImC,YAAYC,iBAAiB;AAC/BpC,oBAAgB0B;SACX;AACL1B,oBAAgBsC,eAAeH,SAASC,iBAAiBV,eAAe;;AAG1E,QAAMa,UAAUxC,WAAWE,mBAAmBD,aAAa,CAAC;AAC5D,SAAO,IAAI7F,QAAQoI,SAASF,IAAI/I,QAAQ;AAC1C;AASA,SAASgJ,eACPxI,SACA0I,YACAC,YAA2B;AAE3B,QAAM9I,WAA6C,CAAA;AACnD5E,SAAO2G,QAAQ5B,QAAQH,QAAQ,EAAEmB,QAAQ,CAAC,CAAC8E,YAAYlG,CAAC,MAAK;AAC3D,QAAIA,MAAM8I,YAAY;AACpB7I,eAASiG,UAAU,IAAI6C;WAClB;AACL9I,eAASiG,UAAU,IAAI0C,eAAe5I,GAAG8I,YAAYC,UAAU;;EAEnE,CAAC;AACD,SAAO,IAAIrI,gBAAgBN,QAAQnE,UAAUgE,QAAQ;AACvD;AAEA,IAAM+I,aAAN,MAAgB;EACd/N,YACSgO,YACAC,oBACAlC,UAAe;AAFf,SAAUiC,aAAVA;AACA,SAAkBC,qBAAlBA;AACA,SAAQlC,WAARA;AAEP,QAAIiC,cAAcjC,SAASzK,SAAS,KAAK6L,eAAepB,SAAS,CAAC,CAAC,GAAG;AACpE,YAAM,IAAIpG,aAAY,OAEnB,OAAOD,cAAc,eAAeA,cACnC,4CAA4C;;AAIlD,UAAMwI,gBAAgBnC,SAASoC,KAAKZ,oBAAoB;AACxD,QAAIW,iBAAiBA,kBAAkB/K,MAAK4I,QAAQ,GAAG;AACrD,YAAM,IAAIpG,aAAY,OAEnB,OAAOD,cAAc,eAAeA,cACnC,yCAAyC;;;EAK1CkH,SAAM;AACX,WAAO,KAAKoB,cAAc,KAAKjC,SAASzK,WAAW,KAAK,KAAKyK,SAAS,CAAC,KAAK;;AAE/E;AAGD,SAASY,kBAAkBZ,UAAe;AACxC,MAAI,OAAOA,SAAS,CAAC,MAAM,YAAYA,SAASzK,WAAW,KAAKyK,SAAS,CAAC,MAAM,KAAK;AACnF,WAAO,IAAIgC,WAAW,MAAM,GAAGhC,QAAQ;;AAGzC,MAAIkC,qBAAqB;AACzB,MAAID,aAAa;AAEjB,QAAMlH,MAAaiF,SAASqC,OAAO,CAACtH,MAAKuH,KAAKC,WAAU;AACtD,QAAI,OAAOD,QAAQ,YAAYA,OAAO,MAAM;AAC1C,UAAIA,IAAIhB,SAAS;AACf,cAAMA,UAA8B,CAAA;AACpCjN,eAAO2G,QAAQsH,IAAIhB,OAAO,EAAElH,QAAQ,CAAC,CAAChG,MAAM4L,SAAQ,MAAK;AACvDsB,kBAAQlN,IAAI,IAAI,OAAO4L,cAAa,WAAWA,UAAS1K,MAAM,GAAG,IAAI0K;QACvE,CAAC;AACD,eAAO,CAAC,GAAGjF,MAAK;UAACuG;QAAO,CAAC;;AAG3B,UAAIgB,IAAIf,aAAa;AACnB,eAAO,CAAC,GAAGxG,MAAKuH,IAAIf,WAAW;;;AAInC,QAAI,EAAE,OAAOe,QAAQ,WAAW;AAC9B,aAAO,CAAC,GAAGvH,MAAKuH,GAAG;;AAGrB,QAAIC,WAAW,GAAG;AAChBD,UAAIhN,MAAM,GAAG,EAAE8E,QAAQ,CAACoI,SAASC,cAAa;AAC5C,YAAIA,aAAa,KAAKD,YAAY,KAAK;mBAE5BC,aAAa,KAAKD,YAAY,IAAI;AAE3CP,uBAAa;mBACJO,YAAY,MAAM;AAE3BN;mBACSM,WAAW,IAAI;AACxBzH,UAAAA,KAAI4B,KAAK6F,OAAO;;MAEpB,CAAC;AAED,aAAOzH;;AAGT,WAAO,CAAC,GAAGA,MAAKuH,GAAG;KAClB,CAAA,CAAE;AAEL,SAAO,IAAIN,WAAWC,YAAYC,oBAAoBnH,GAAG;AAC3D;AAEA,IAAM2H,WAAN,MAAc;EACZzO,YACSiB,cACA+L,iBACAtL,OAAa;AAFb,SAAYT,eAAZA;AACA,SAAe+L,kBAAfA;AACA,SAAKtL,QAALA;;AAEV;AAED,SAASoL,mCACPJ,KACAlI,MACAkK,QAAuB;AAEvB,MAAIhC,IAAIsB,YAAY;AAClB,WAAO,IAAIS,SAASjK,MAAM,MAAM,CAAC;;AAGnC,MAAI,CAACkK,QAAQ;AAKX,WAAO,IAAID,SAASjK,MAAM,OAAOmK,GAAG;;AAEtC,MAAID,OAAOzI,WAAW,MAAM;AAC1B,WAAO,IAAIwI,SAASC,QAAQ,MAAM,CAAC;;AAGrC,QAAME,WAAWzB,eAAeT,IAAIX,SAAS,CAAC,CAAC,IAAI,IAAI;AACvD,QAAMrK,QAAQgN,OAAO1N,SAASM,SAAS,IAAIsN;AAC3C,SAAOC,iCAAiCH,QAAQhN,OAAOgL,IAAIuB,kBAAkB;AAC/E;AAEA,SAASY,iCACPC,OACApN,OACAuM,oBAA0B;AAE1B,MAAIc,IAAID;AACR,MAAIE,KAAKtN;AACT,MAAIuN,KAAKhB;AACT,SAAOgB,KAAKD,IAAI;AACdC,UAAMD;AACND,QAAIA,EAAE9I;AACN,QAAI,CAAC8I,GAAG;AACN,YAAM,IAAIpJ,aAER,OAAC,OAAOD,cAAc,eAAeA,cAAc,yBAAyB;;AAGhFsJ,SAAKD,EAAE/N,SAASM;;AAElB,SAAO,IAAImN,SAASM,GAAG,OAAOC,KAAKC,EAAE;AACvC;AAEA,SAASC,WAAWnD,UAAmB;AACrC,MAAIwB,qBAAqBxB,SAAS,CAAC,CAAC,GAAG;AACrC,WAAOA,SAAS,CAAC,EAAEsB;;AAGrB,SAAO;IAAC,CAACzN,cAAc,GAAGmM;EAAQ;AACpC;AAEA,SAASmB,mBACPjM,cACAkO,YACApD,UAAe;AAEf9K,mBAAiB,IAAIwE,gBAAgB,CAAA,GAAI,CAAA,CAAE;AAC3C,MAAIxE,aAAaD,SAASM,WAAW,KAAKL,aAAaO,YAAW,GAAI;AACpE,WAAOyL,2BAA2BhM,cAAckO,YAAYpD,QAAQ;;AAGtE,QAAMqD,IAAIC,aAAapO,cAAckO,YAAYpD,QAAQ;AACzD,QAAMuD,iBAAiBvD,SAAS/J,MAAMoN,EAAEG,YAAY;AACpD,MAAIH,EAAEzF,SAASyF,EAAEI,YAAYvO,aAAaD,SAASM,QAAQ;AACzD,UAAMyN,IAAI,IAAItJ,gBAAgBxE,aAAaD,SAASgB,MAAM,GAAGoN,EAAEI,SAAS,GAAG,CAAA,CAAE;AAC7ET,MAAE/J,SAASpF,cAAc,IAAI,IAAI6F,gBAC/BxE,aAAaD,SAASgB,MAAMoN,EAAEI,SAAS,GACvCvO,aAAa+D,QAAQ;AAEvB,WAAOiI,2BAA2B8B,GAAG,GAAGO,cAAc;aAC7CF,EAAEzF,SAAS2F,eAAehO,WAAW,GAAG;AACjD,WAAO,IAAImE,gBAAgBxE,aAAaD,UAAU,CAAA,CAAE;aAC3CoO,EAAEzF,SAAS,CAAC1I,aAAaO,YAAW,GAAI;AACjD,WAAOiO,sBAAsBxO,cAAckO,YAAYpD,QAAQ;aACtDqD,EAAEzF,OAAO;AAClB,WAAOsD,2BAA2BhM,cAAc,GAAGqO,cAAc;SAC5D;AACL,WAAOG,sBAAsBxO,cAAckO,YAAYpD,QAAQ;;AAEnE;AAEA,SAASkB,2BACPhM,cACAkO,YACApD,UAAe;AAEf,MAAIA,SAASzK,WAAW,GAAG;AACzB,WAAO,IAAImE,gBAAgBxE,aAAaD,UAAU,CAAA,CAAE;SAC/C;AACL,UAAMqM,UAAU6B,WAAWnD,QAAQ;AACnC,UAAM/G,WAA6C,CAAA;AAsBnD,QACE5E,OAAOS,KAAKwM,OAAO,EAAEqC,KAAMC,OAAMA,MAAM/P,cAAc,KACrDqB,aAAa+D,SAASpF,cAAc,KACpCqB,aAAa6D,qBAAqB,KAClC7D,aAAa+D,SAASpF,cAAc,EAAEoB,SAASM,WAAW,GAC1D;AACA,YAAMsO,uBAAuB3C,2BAC3BhM,aAAa+D,SAASpF,cAAc,GACpCuP,YACApD,QAAQ;AAEV,aAAO,IAAItG,gBAAgBxE,aAAaD,UAAU4O,qBAAqB5K,QAAQ;;AAGjF5E,WAAO2G,QAAQsG,OAAO,EAAElH,QAAQ,CAAC,CAACqG,QAAQT,SAAQ,MAAK;AACrD,UAAI,OAAOA,cAAa,UAAU;AAChCA,QAAAA,YAAW,CAACA,SAAQ;;AAEtB,UAAIA,cAAa,MAAM;AACrB/G,iBAASwH,MAAM,IAAIU,mBAAmBjM,aAAa+D,SAASwH,MAAM,GAAG2C,YAAYpD,SAAQ;;IAE7F,CAAC;AAED3L,WAAO2G,QAAQ9F,aAAa+D,QAAQ,EAAEmB,QAAQ,CAAC,CAACa,aAAaC,KAAK,MAAK;AACrE,UAAIoG,QAAQrG,WAAW,MAAMxE,QAAW;AACtCwC,iBAASgC,WAAW,IAAIC;;IAE5B,CAAC;AACD,WAAO,IAAIxB,gBAAgBxE,aAAaD,UAAUgE,QAAQ;;AAE9D;AAEA,SAASqK,aAAapO,cAA+BkO,YAAoBpD,UAAe;AACtF,MAAI8D,sBAAsB;AAC1B,MAAIC,mBAAmBX;AAEvB,QAAMY,WAAU;IAACpG,OAAO;IAAO6F,WAAW;IAAGD,cAAc;EAAC;AAC5D,SAAOO,mBAAmB7O,aAAaD,SAASM,QAAQ;AACtD,QAAIuO,uBAAuB9D,SAASzK,OAAQ,QAAOyO;AACnD,UAAM3O,OAAOH,aAAaD,SAAS8O,gBAAgB;AACnD,UAAM1C,UAAUrB,SAAS8D,mBAAmB;AAI5C,QAAItC,qBAAqBH,OAAO,GAAG;AACjC;;AAEF,UAAM4C,OAAO,GAAG5C,OAAO;AACvB,UAAMhI,OACJyK,sBAAsB9D,SAASzK,SAAS,IAAIyK,SAAS8D,sBAAsB,CAAC,IAAI;AAElF,QAAIC,mBAAmB,KAAKE,SAASxN,OAAW;AAEhD,QAAIwN,QAAQ5K,QAAQ,OAAOA,SAAS,YAAYA,KAAKiI,YAAY7K,QAAW;AAC1E,UAAI,CAACyN,QAAQD,MAAM5K,MAAMhE,IAAI,EAAG,QAAO2O;AACvCF,6BAAuB;WAClB;AACL,UAAI,CAACI,QAAQD,MAAM,CAAA,GAAI5O,IAAI,EAAG,QAAO2O;AACrCF;;AAEFC;;AAGF,SAAO;IAACnG,OAAO;IAAM6F,WAAWM;IAAkBP,cAAcM;EAAmB;AACrF;AAEA,SAASJ,sBACPxO,cACAkO,YACApD,UAAe;AAEf,QAAMxH,QAAQtD,aAAaD,SAASgB,MAAM,GAAGmN,UAAU;AAEvD,MAAI/M,IAAI;AACR,SAAOA,IAAI2J,SAASzK,QAAQ;AAC1B,UAAM8L,UAAUrB,SAAS3J,CAAC;AAC1B,QAAImL,qBAAqBH,OAAO,GAAG;AACjC,YAAMpI,WAAWkL,yBAAyB9C,QAAQC,OAAO;AACzD,aAAO,IAAI5H,gBAAgBlB,OAAOS,QAAQ;;AAI5C,QAAI5C,MAAM,KAAK+K,eAAepB,SAAS,CAAC,CAAC,GAAG;AAC1C,YAAMnE,IAAI3G,aAAaD,SAASmO,UAAU;AAC1C5K,YAAMmE,KAAK,IAAIrC,WAAWuB,EAAExG,MAAM+O,UAAUpE,SAAS,CAAC,CAAC,CAAC,CAAC;AACzD3J;AACA;;AAGF,UAAM4N,OAAOzC,qBAAqBH,OAAO,IAAIA,QAAQC,QAAQzN,cAAc,IAAI,GAAGwN,OAAO;AACzF,UAAMhI,OAAOhD,IAAI2J,SAASzK,SAAS,IAAIyK,SAAS3J,IAAI,CAAC,IAAI;AACzD,QAAI4N,QAAQ5K,QAAQ+H,eAAe/H,IAAI,GAAG;AACxCb,YAAMmE,KAAK,IAAIrC,WAAW2J,MAAMG,UAAU/K,IAAI,CAAC,CAAC;AAChDhD,WAAK;WACA;AACLmC,YAAMmE,KAAK,IAAIrC,WAAW2J,MAAM,CAAA,CAAE,CAAC;AACnC5N;;;AAGJ,SAAO,IAAIqD,gBAAgBlB,OAAO,CAAA,CAAE;AACtC;AAEA,SAAS2L,yBAAyB7C,SAA6C;AAG7E,QAAMrI,WAAgD,CAAA;AACtD5E,SAAO2G,QAAQsG,OAAO,EAAElH,QAAQ,CAAC,CAACqG,QAAQT,QAAQ,MAAK;AACrD,QAAI,OAAOA,aAAa,UAAU;AAChCA,iBAAW,CAACA,QAAQ;;AAEtB,QAAIA,aAAa,MAAM;AACrB/G,eAASwH,MAAM,IAAIiD,sBAAsB,IAAIhK,gBAAgB,CAAA,GAAI,CAAA,CAAE,GAAG,GAAGsG,QAAQ;;EAErF,CAAC;AACD,SAAO/G;AACT;AAEA,SAASmL,UAAUlQ,QAA4B;AAC7C,QAAM6G,MAA+B,CAAA;AACrC1G,SAAO2G,QAAQ9G,MAAM,EAAEkG,QAAQ,CAAC,CAACsC,GAAGhI,CAAC,MAAOqG,IAAI2B,CAAC,IAAI,GAAGhI,CAAC,EAAG;AAC5D,SAAOqG;AACT;AAEA,SAASmJ,QAAQ7O,MAAcnB,QAA8B2B,SAAmB;AAC9E,SAAOR,QAAQQ,QAAQR,QAAQiB,aAAapC,QAAQ2B,QAAQ2D,UAAU;AACxE;AClfO,IAAM6K,wBAAwB;IAOzBC;CAAZ,SAAYA,YAAS;AACnBA,EAAAA,WAAAA,WAAA,iBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,eAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,kBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,iBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,kBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,cAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,YAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,kBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,gBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,sBAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,oBAAA,IAAA,EAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,sBAAA,IAAA,EAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,oBAAA,IAAA,EAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,iBAAA,IAAA,EAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,eAAA,IAAA,EAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,QAAA,IAAA,EAAA,IAAA;AACAA,EAAAA,WAAAA,WAAA,mBAAA,IAAA,EAAA,IAAA;AACF,GAlBYA,cAAAA,YAkBX,CAAA,EAAA;IA0BYC,oBAAW;EACtBtQ,YAESuQ,IAEA5I,KAAW;AAFX,SAAE4I,KAAFA;AAEA,SAAG5I,MAAHA;;AAEV;AAOK,IAAO6I,kBAAP,cAA+BF,YAAW;EAgC9CtQ,YAEEuQ,IAEA5I,KAEA8I,oBAAuC,cAEvCC,gBAAiE,MAAI;AAErE,UAAMH,IAAI5I,GAAG;AAzCN,SAAAgJ,OAAON,UAAUG;AA0CxB,SAAKC,oBAAoBA;AACzB,SAAKC,gBAAgBA;;;EAId5K,WAAQ;AACf,WAAO,uBAAuB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG;;AAE3D;AAWK,IAAOiJ,gBAAP,cAA6BN,YAAW;EAG5CtQ,YAEEuQ,IAEA5I,KAEOkJ,mBAAyB;AAEhC,UAAMN,IAAI5I,GAAG;AAFN,SAAiBkJ,oBAAjBA;AARA,SAAAF,OAAON,UAAUO;;;EAcjB9K,WAAQ;AACf,WAAO,qBAAqB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,0BAA0B,KAAKkJ,iBAAiB;;AAEzG;IAQWC;CAAZ,SAAYA,6BAA0B;AAIpCA,EAAAA,4BAAAA,4BAAA,UAAA,IAAA,CAAA,IAAA;AAIAA,EAAAA,4BAAAA,4BAAA,2BAAA,IAAA,CAAA,IAAA;AAIAA,EAAAA,4BAAAA,4BAAA,oBAAA,IAAA,CAAA,IAAA;AAIAA,EAAAA,4BAAAA,4BAAA,eAAA,IAAA,CAAA,IAAA;AACF,GAjBYA,+BAAAA,6BAiBX,CAAA,EAAA;IAQWC;CAAZ,SAAYA,wBAAqB;AAI/BA,EAAAA,uBAAAA,uBAAA,0BAAA,IAAA,CAAA,IAAA;AAOAA,EAAAA,uBAAAA,uBAAA,8BAAA,IAAA,CAAA,IAAA;AACF,GAZYA,0BAAAA,wBAYX,CAAA,EAAA;AAaK,IAAOC,mBAAP,cAAgCV,YAAW;EAG/CtQ,YAEEuQ,IAEA5I,KAKOsJ,QAMEC,MAAiC;AAE1C,UAAMX,IAAI5I,GAAG;AARN,SAAMsJ,SAANA;AAME,SAAIC,OAAJA;AAjBF,SAAAP,OAAON,UAAUW;;;EAuBjBlL,WAAQ;AACf,WAAO,wBAAwB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG;;AAE5D;AAUK,IAAOwJ,oBAAP,cAAiCb,YAAW;EAGhDtQ,YAEEuQ,IAEA5I,KAKOsJ,QAMEC,MAA4B;AAErC,UAAMX,IAAI5I,GAAG;AARN,SAAMsJ,SAANA;AAME,SAAIC,OAAJA;AAjBF,SAAAP,OAAON,UAAUc;;AAqB3B;AAWK,IAAOC,kBAAP,cAA+Bd,YAAW;EAG9CtQ,YAEEuQ,IAEA5I,KAEO0J,OAOE3C,QAA4B;AAErC,UAAM6B,IAAI5I,GAAG;AATN,SAAK0J,QAALA;AAOE,SAAM3C,SAANA;AAfF,SAAAiC,OAAON,UAAUe;;;EAqBjBtL,WAAQ;AACf,WAAO,uBAAuB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,aAAa,KAAK0J,KAAK;;AAElF;AAOK,IAAOC,mBAAP,cAAgChB,YAAW;EAG/CtQ,YAEEuQ,IAEA5I,KAEOkJ,mBAEAU,OAA0B;AAEjC,UAAMhB,IAAI5I,GAAG;AAJN,SAAiBkJ,oBAAjBA;AAEA,SAAKU,QAALA;AAVA,SAAAZ,OAAON,UAAUiB;;;EAgBjBxL,WAAQ;AACf,WAAO,wBAAwB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,0BAA0B,KAAKkJ,iBAAiB,aAAa,KAAKU,KAAK;;AAEnI;AASK,IAAOC,mBAAP,cAAgClB,YAAW;EAG/CtQ,YAEEuQ,IAEA5I,KAEOkJ,mBAEAU,OAA0B;AAEjC,UAAMhB,IAAI5I,GAAG;AAJN,SAAiBkJ,oBAAjBA;AAEA,SAAKU,QAALA;AAVA,SAAAZ,OAAON,UAAUmB;;EAejB1L,WAAQ;AACf,WAAO,wBAAwB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,0BAA0B,KAAKkJ,iBAAiB,aAAa,KAAKU,KAAK;;AAEnI;AASK,IAAOE,iBAAP,cAA8BnB,YAAW;EAG7CtQ,YAEEuQ,IAEA5I,KAEOkJ,mBAEAU,OAEAG,gBAAuB;AAE9B,UAAMnB,IAAI5I,GAAG;AANN,SAAiBkJ,oBAAjBA;AAEA,SAAKU,QAALA;AAEA,SAAcG,iBAAdA;AAZA,SAAAf,OAAON,UAAUoB;;EAiBjB3L,WAAQ;AACf,WAAO,sBAAsB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,0BAA0B,KAAKkJ,iBAAiB,aAAa,KAAKU,KAAK,qBAAqB,KAAKG,cAAc;;AAEzK;AAYK,IAAOC,eAAP,cAA4BrB,YAAW;EAG3CtQ,YAEEuQ,IAEA5I,KAEOkJ,mBAEAU,OAA0B;AAEjC,UAAMhB,IAAI5I,GAAG;AAJN,SAAiBkJ,oBAAjBA;AAEA,SAAKU,QAALA;AAVA,SAAAZ,OAAON,UAAUsB;;EAejB7L,WAAQ;AACf,WAAO,oBAAoB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,0BAA0B,KAAKkJ,iBAAiB,aAAa,KAAKU,KAAK;;AAE/H;AAQK,IAAOK,aAAP,cAA0BtB,YAAW;EAGzCtQ,YAEEuQ,IAEA5I,KAEOkJ,mBAEAU,OAA0B;AAEjC,UAAMhB,IAAI5I,GAAG;AAJN,SAAiBkJ,oBAAjBA;AAEA,SAAKU,QAALA;AAVA,SAAAZ,OAAON,UAAUuB;;EAejB9L,WAAQ;AACf,WAAO,kBAAkB,KAAKyK,EAAE,WAAW,KAAK5I,GAAG,0BAA0B,KAAKkJ,iBAAiB,aAAa,KAAKU,KAAK;;AAE7H;IASYM,6BAAoB;EAG/B7R,YAESkB,OAAY;AAAZ,SAAKA,QAALA;AAJA,SAAAyP,OAAON,UAAUwB;;EAM1B/L,WAAQ;AACN,WAAO,8BAA8B,KAAK5E,MAAME,IAAI;;AAEvD;IASY0Q,2BAAkB;EAG7B9R,YAESkB,OAAY;AAAZ,SAAKA,QAALA;AAJA,SAAAyP,OAAON,UAAUyB;;EAM1BhM,WAAQ;AACN,WAAO,4BAA4B,KAAK5E,MAAME,IAAI;;AAErD;IAUY2Q,6BAAoB;EAG/B/R,YAESgS,UAAgC;AAAhC,SAAQA,WAARA;AAJA,SAAArB,OAAON,UAAU0B;;EAM1BjM,WAAQ;AACN,UAAM1E,OAAQ,KAAK4Q,SAASC,eAAe,KAAKD,SAASC,YAAY7Q,QAAS;AAC9E,WAAO,+BAA+BA,IAAI;;AAE7C;IASY8Q,2BAAkB;EAG7BlS,YAESgS,UAAgC;AAAhC,SAAQA,WAARA;AAJA,SAAArB,OAAON,UAAU6B;;EAM1BpM,WAAQ;AACN,UAAM1E,OAAQ,KAAK4Q,SAASC,eAAe,KAAKD,SAASC,YAAY7Q,QAAS;AAC9E,WAAO,6BAA6BA,IAAI;;AAE3C;IAUY+Q,wBAAe;EAG1BnS,YAESgS,UAAgC;AAAhC,SAAQA,WAARA;AAJA,SAAArB,OAAON,UAAU8B;;EAM1BrM,WAAQ;AACN,UAAM1E,OAAQ,KAAK4Q,SAASC,eAAe,KAAKD,SAASC,YAAY7Q,QAAS;AAC9E,WAAO,0BAA0BA,IAAI;;AAExC;IAUYgR,sBAAa;EAGxBpS,YAESgS,UAAgC;AAAhC,SAAQA,WAARA;AAJA,SAAArB,OAAON,UAAU+B;;EAM1BtM,WAAQ;AACN,UAAM1E,OAAQ,KAAK4Q,SAASC,eAAe,KAAKD,SAASC,YAAY7Q,QAAS;AAC9E,WAAO,wBAAwBA,IAAI;;AAEtC;IAOYiR,eAAM;EAGjBrS,YAEWsS,aAGAzF,UAGA0F,QAAqB;AANrB,SAAWD,cAAXA;AAGA,SAAQzF,WAARA;AAGA,SAAM0F,SAANA;AAVF,SAAA5B,OAAON,UAAUgC;;EAa1BvM,WAAQ;AACN,UAAM0M,MAAM,KAAK3F,WAAW,GAAG,KAAKA,SAAS,CAAC,CAAC,KAAK,KAAKA,SAAS,CAAC,CAAC,KAAK;AACzE,WAAO,mBAAmB,KAAK0F,MAAM,iBAAiBC,GAAG;;AAE5D;IAEYC,6BAAoB;AAAA;IACpBC,wBAAe;EAC1B1S,YACW2H,KACAgL,2BAAgE;AADhE,SAAGhL,MAAHA;AACA,SAAyBgL,4BAAzBA;;AAEZ;AAuDK,SAAUC,eAAeN,aAAkB;AAC/C,UAAQA,YAAY3B,MAAI;IACtB,KAAKN,UAAU+B;AACb,aAAO,wBAAwBE,YAAYN,SAASC,aAAa7Q,QAAQ,EAAE;IAC7E,KAAKiP,UAAU8B;AACb,aAAO,0BAA0BG,YAAYN,SAASC,aAAa7Q,QAAQ,EAAE;IAC/E,KAAKiP,UAAU6B;AACb,aAAO,6BAA6BI,YAAYN,SAASC,aAAa7Q,QAAQ,EAAE;IAClF,KAAKiP,UAAU0B;AACb,aAAO,+BAA+BO,YAAYN,SAASC,aAAa7Q,QAAQ,EAAE;IACpF,KAAKiP,UAAUoB;AACb,aAAO,sBAAsBa,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,0BAA0B2K,YAAYzB,iBAAiB,aAAayB,YAAYf,KAAK,qBAAqBe,YAAYZ,cAAc;IAC3M,KAAKrB,UAAUmB;AACb,aAAO,wBAAwBc,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,0BAA0B2K,YAAYzB,iBAAiB,aAAayB,YAAYf,KAAK;IAC9J,KAAKlB,UAAUW;AACb,aAAO,wBAAwBsB,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG;IACzE,KAAK0I,UAAUc;AACb,aAAO,yBAAyBmB,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG;IAC1E,KAAK0I,UAAUO;AACb,aAAO,qBAAqB0B,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,0BAA0B2K,YAAYzB,iBAAiB;IAC7H,KAAKR,UAAUe;AACb,aAAO,uBAAuBkB,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,aAAa2K,YAAYjB,KAAK;IACtG,KAAKhB,UAAUG;AACb,aAAO,uBAAuB8B,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG;IACxE,KAAK0I,UAAUuB;AACb,aAAO,kBAAkBU,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,0BAA0B2K,YAAYzB,iBAAiB,aAAayB,YAAYf,KAAK;IACxJ,KAAKlB,UAAUsB;AACb,aAAO,oBAAoBW,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,0BAA0B2K,YAAYzB,iBAAiB,aAAayB,YAAYf,KAAK;IAC1J,KAAKlB,UAAUyB;AACb,aAAO,4BAA4BQ,YAAYpR,MAAME,IAAI;IAC3D,KAAKiP,UAAUwB;AACb,aAAO,8BAA8BS,YAAYpR,MAAME,IAAI;IAC7D,KAAKiP,UAAUiB;AACb,aAAO,wBAAwBgB,YAAY/B,EAAE,WAAW+B,YAAY3K,GAAG,0BAA0B2K,YAAYzB,iBAAiB,aAAayB,YAAYf,KAAK;IAC9J,KAAKlB,UAAUgC;AACb,YAAMG,MAAMF,YAAYzF,WACpB,GAAGyF,YAAYzF,SAAS,CAAC,CAAC,KAAKyF,YAAYzF,SAAS,CAAC,CAAC,KACtD;AACJ,aAAO,mBAAmByF,YAAYC,MAAM,iBAAiBC,GAAG;;AAEtE;AC1qBgB,SAAAK,iCACd3R,OACA4R,iBAAoC;AAEpC,MAAI5R,MAAM6R,aAAa,CAAC7R,MAAM8R,WAAW;AACvC9R,UAAM8R,YAAYC,0BAChB/R,MAAM6R,WACND,iBACA,UAAU5R,MAAME,IAAI,EAAE;;AAG1B,SAAOF,MAAM8R,aAAaF;AAC5B;AAiBM,SAAUI,eACdC,QACAC,aAAqB,IACrBC,8BAA8B,OAAK;AAGnC,WAASC,IAAI,GAAGA,IAAIH,OAAOI,QAAQD,KAAK;AACtC,UAAME,QAAeL,OAAOG,CAAC;AAC7B,UAAMG,WAAmBC,YAAYN,YAAYI,KAAK;AACtDG,iBAAaH,OAAOC,UAAUJ,2BAA2B;;AAE7D;AAEgB,SAAAO,iBAAiBH,UAAkBI,WAAoC;AACrF,MAAIA,aAAaC,WAAWD,SAAS,GAAG;AACtC,UAAM,IAAIE,aAER,MAAA,mCAAmCN,QAAQ,6HACoC;aAExEI,aAAa,CAACG,aAAaH,SAAS,GAAG;AAChD,UAAM,IAAIE,aAAY,MAEpB,mCAAmCN,QAAQ,sCAAsC;;AAGvF;AAEA,SAASE,aAAaH,OAAcC,UAAkBJ,6BAAoC;AACxF,MAAI,OAAOY,cAAc,eAAeA,WAAW;AACjD,QAAI,CAACT,OAAO;AACV,YAAM,IAAIO,aAER,MAAA;wCACgCN,QAAQ;;;;;;;;;KAS3C;;AAGD,QAAIS,MAAMC,QAAQX,KAAK,GAAG;AACxB,YAAM,IAAIO,aAAY,MAEpB,mCAAmCN,QAAQ,8BAA8B;;AAG7E,QACE,CAACD,MAAMY,cACP,CAACZ,MAAMK,aACP,CAACL,MAAMa,iBACP,CAACb,MAAMc,YACP,CAACd,MAAMe,gBACPf,MAAMgB,UACNhB,MAAMgB,WAAWC,gBACjB;AACA,YAAM,IAAIV,aAAY,MAEpB,mCAAmCN,QAAQ,0FAA0F;;AAGzI,QAAID,MAAMY,cAAcZ,MAAMc,UAAU;AACtC,YAAM,IAAIP,aAAY,MAEpB,mCAAmCN,QAAQ,oDAAoD;;AAGnG,QAAID,MAAMY,cAAcZ,MAAMe,cAAc;AAC1C,YAAM,IAAIR,aAAY,MAEpB,mCAAmCN,QAAQ,wDAAwD;;AAGvG,QAAID,MAAMc,YAAYd,MAAMe,cAAc;AACxC,YAAM,IAAIR,aAAY,MAEpB,mCAAmCN,QAAQ,sDAAsD;;AAGrG,QAAID,MAAMY,eAAeZ,MAAMK,aAAaL,MAAMa,gBAAgB;AAChE,YAAM,IAAIN,aAAY,MAEpB,mCAAmCN,QAAQ,mEAAmE;;AAGlH,QAAID,MAAMK,aAAaL,MAAMa,eAAe;AAC1C,YAAM,IAAIN,aAAY,MAEpB,mCAAmCN,QAAQ,wDAAwD;;AAGvG,QAAID,MAAMY,cAAcZ,MAAMkB,aAAa;AACzC,YAAM,IAAIX,aAER,MAAA,mCAAmCN,QAAQ,kIACD;;AAG9C,QAAID,MAAMmB,QAAQnB,MAAMoB,SAAS;AAC/B,YAAM,IAAIb,aAAY,MAEpB,mCAAmCN,QAAQ,6CAA6C;;AAG5F,QACED,MAAMY,eAAe,UACrB,CAACZ,MAAMK,aACP,CAACL,MAAMa,iBACP,CAACb,MAAMc,YACP,CAACd,MAAMe,cACP;AACA,YAAM,IAAIR,aAAY,MAEpB,mCAAmCN,QAAQ,0GAA0G;;AAGzJ,QAAID,MAAMmB,SAAS,UAAUnB,MAAMoB,YAAY,QAAQ;AACrD,YAAM,IAAIb,aAAY,MAEpB,mCAAmCN,QAAQ,0DAA0D;;AAGzG,QAAI,OAAOD,MAAMmB,SAAS,YAAYnB,MAAMmB,KAAKE,OAAO,CAAC,MAAM,KAAK;AAClE,YAAM,IAAId,aAAY,MAEpB,mCAAmCN,QAAQ,mCAAmC;;AAGlF,QAAID,MAAMmB,SAAS,MAAMnB,MAAMY,eAAe,UAAUZ,MAAMsB,cAAc,QAAQ;AAClF,YAAMC,MAAM;AACZ,YAAM,IAAIhB,aAER,MAAA,2CAA2CN,QAAQ,mBAAmBD,MAAMY,UAAU,oCAAoCW,GAAG,EAAE;;AAGnI,QAAI1B,6BAA6B;AAC/BO,uBAAiBH,UAAUD,MAAMK,SAAS;;;AAG9C,MAAIL,MAAMc,UAAU;AAClBpB,mBAAeM,MAAMc,UAAUb,UAAUJ,2BAA2B;;AAExE;AAEA,SAASK,YAAYN,YAAoB4B,cAAmB;AAC1D,MAAI,CAACA,cAAc;AACjB,WAAO5B;;AAET,MAAI,CAACA,cAAc,CAAC4B,aAAaL,MAAM;AACrC,WAAO;aACEvB,cAAc,CAAC4B,aAAaL,MAAM;AAC3C,WAAO,GAAGvB,UAAU;aACX,CAACA,cAAc4B,aAAaL,MAAM;AAC3C,WAAOK,aAAaL;SACf;AACL,WAAO,GAAGvB,UAAU,IAAI4B,aAAaL,IAAI;;AAE7C;AAGM,SAAUM,UAAUzB,OAAY;AACpC,SAAOA,MAAMgB,UAAUC;AACzB;AAMgB,SAAAS,sBAAsBC,QAAgBC,YAAkB;AACtE,QAAMC,eAAeF,OAAOG,OAAQC,OAAMN,UAAUM,CAAC,MAAMH,UAAU;AACrEC,eAAaG,KAAK,GAAGL,OAAOG,OAAQC,OAAMN,UAAUM,CAAC,MAAMH,UAAU,CAAC;AACtE,SAAOC;AACT;AAcM,SAAUI,wBACdC,UAA4C;AAE5C,MAAI,CAACA,SAAU,QAAO;AAKtB,MAAIA,SAASC,aAAaC,WAAW;AACnC,WAAOF,SAASC,YAAYC;;AAG9B,WAASC,IAAIH,SAASI,QAAQD,GAAGA,IAAIA,EAAEC,QAAQ;AAC7C,UAAMtC,QAAQqC,EAAEF;AAKhB,QAAInC,OAAOuC,gBAAiB,QAAOvC,MAAMuC;AACzC,QAAIvC,OAAOoC,UAAW,QAAOpC,MAAMoC;;AAGrC,SAAO;AACT;IC9PaI,sBAAa;EAKxB,IAAIC,WAAQ;AACV,WAAOR,wBAAwB,KAAKjC,OAAOkC,QAAQ,KAAK,KAAKQ;;;EAG/D,IAAID,SAASE,GAAsB;EAAA;EAEnCC,YAA6BF,cAAiC;AAAjC,SAAYA,eAAZA;AAV7B,SAAM1B,SAAgC;AACtC,SAAKhB,QAA0B;AAC/B,SAAQc,WAAG,IAAI+B,uBAAuB,KAAKH,YAAY;AACvD,SAASI,YAA6B;;AAQvC;IAQYD,+BAAAA,wBAAsB;;EAKjCD,YAAoBF,cAAiC;AAAjC,SAAYA,eAAZA;AAHZ,SAAAK,WAAW,oBAAIC,IAAG;;;EAM1BC,qBAAqBC,WAAmBlC,QAA4B;AAClE,UAAMmC,UAAU,KAAKC,mBAAmBF,SAAS;AACjDC,YAAQnC,SAASA;AACjB,SAAK+B,SAASM,IAAIH,WAAWC,OAAO;;;;;;;EAQtCG,uBAAuBJ,WAAiB;AACtC,UAAMC,UAAU,KAAKI,WAAWL,SAAS;AACzC,QAAIC,SAAS;AACXA,cAAQnC,SAAS;AACjBmC,cAAQL,YAAY;;;;;;;EAQxBU,sBAAmB;AACjB,UAAMT,WAAW,KAAKA;AACtB,SAAKA,WAAW,oBAAIC,IAAG;AACvB,WAAOD;;EAGTU,mBAAmBV,UAAoC;AACrD,SAAKA,WAAWA;;EAGlBK,mBAAmBF,WAAiB;AAClC,QAAIC,UAAU,KAAKI,WAAWL,SAAS;AAEvC,QAAI,CAACC,SAAS;AACZA,gBAAU,IAAIX,cAAc,KAAKE,YAAY;AAC7C,WAAKK,SAASM,IAAIH,WAAWC,OAAO;;AAGtC,WAAOA;;EAGTI,WAAWL,WAAiB;AAC1B,WAAO,KAAKH,SAASW,IAAIR,SAAS,KAAK;;;;gEArD9B,SAAsBS,mBAAA,CAAA;IAAA;EAAA;EAAtB,OAAA;AAAA,SAAAC,QAAA,mBAAA;aAAAf;MAAAgB,SAAAhB,wBAAAiB;MAAAC,YAAsB;IAAA,CAAA;EADV;;;8FACU,CAAA;UADlCC;WAAW;MAACD,YAAY;IAAM,CAAC;;;;;IC9BnBE,aAAI;EAIfrB,YAAYsB,MAAiB;AAC3B,SAAKC,QAAQD;;EAGf,IAAIA,OAAI;AACN,WAAO,KAAKC,MAAMC;;;;;EAMpB9B,OAAO+B,GAAI;AACT,UAAMC,IAAI,KAAKC,aAAaF,CAAC;AAC7B,WAAOC,EAAEvE,SAAS,IAAIuE,EAAEA,EAAEvE,SAAS,CAAC,IAAI;;;;;EAM1Ce,SAASuD,GAAI;AACX,UAAMG,IAAIC,SAASJ,GAAG,KAAKF,KAAK;AAChC,WAAOK,IAAIA,EAAE1D,SAAS4D,IAAKL,CAAAA,OAAMA,GAAED,KAAK,IAAI,CAAA;;;;;EAM9CO,WAAWN,GAAI;AACb,UAAMG,IAAIC,SAASJ,GAAG,KAAKF,KAAK;AAChC,WAAOK,KAAKA,EAAE1D,SAASf,SAAS,IAAIyE,EAAE1D,SAAS,CAAC,EAAEsD,QAAQ;;;;;EAM5DQ,SAASP,GAAI;AACX,UAAMC,IAAIO,SAASR,GAAG,KAAKF,KAAK;AAChC,QAAIG,EAAEvE,SAAS,EAAG,QAAO,CAAA;AAEzB,UAAM+E,IAAIR,EAAEA,EAAEvE,SAAS,CAAC,EAAEe,SAAS4D,IAAKI,CAAAA,OAAMA,GAAEV,KAAK;AACrD,WAAOU,EAAEhD,OAAQiD,QAAOA,OAAOV,CAAC;;;;;EAMlCE,aAAaF,GAAI;AACf,WAAOQ,SAASR,GAAG,KAAKF,KAAK,EAAEO,IAAKrC,OAAMA,EAAE+B,KAAK;;AAEpD;AAGD,SAASK,SAAYL,OAAUY,MAAiB;AAC9C,MAAIZ,UAAUY,KAAKZ,MAAO,QAAOY;AAEjC,aAAWC,SAASD,KAAKlE,UAAU;AACjC,UAAMkE,QAAOP,SAASL,OAAOa,KAAK;AAClC,QAAID,MAAM,QAAOA;;AAGnB,SAAO;AACT;AAGA,SAASH,SAAYT,OAAUY,MAAiB;AAC9C,MAAIZ,UAAUY,KAAKZ,MAAO,QAAO,CAACY,IAAI;AAEtC,aAAWC,SAASD,KAAKlE,UAAU;AACjC,UAAMK,OAAO0D,SAAST,OAAOa,KAAK;AAClC,QAAI9D,KAAKpB,QAAQ;AACfoB,WAAK+D,QAAQF,IAAI;AACjB,aAAO7D;;;AAIX,SAAO,CAAA;AACT;IAEagE,iBAAQ;EACnBvC,YACSwB,OACAtD,UAAuB;AADvB,SAAKsD,QAALA;AACA,SAAQtD,WAARA;;EAGTsE,WAAQ;AACN,WAAO,YAAY,KAAKhB,KAAK;;AAEhC;AAGK,SAAUiB,kBAA8CL,MAAwB;AACpF,QAAMN,OAAuC,CAAA;AAE7C,MAAIM,MAAM;AACRA,SAAKlE,SAASwE,QAASL,WAAWP,KAAIO,MAAMb,MAAMpD,MAAM,IAAIiE,KAAM;;AAGpE,SAAOP;AACT;AC7DM,IAAOa,cAAP,cAA2BtB,KAAoB;;EAEnDrB,YACEsB,MAEOhC,UAA6B;AAEpC,UAAMgC,IAAI;AAFH,SAAQhC,WAARA;AAGPsD,mBAA4B,MAAMtB,IAAI;;EAG/BkB,WAAQ;AACf,WAAO,KAAKlD,SAASkD,SAAQ;;AAEhC;AAEK,SAAUK,iBAAiBC,eAA+B;AAC9D,QAAMxD,WAAWyD,yBAAyBD,aAAa;AACvD,QAAME,WAAW,IAAIC,gBAAgB,CAAC,IAAIC,WAAW,IAAI,CAAA,CAAE,CAAC,CAAC;AAC7D,QAAMC,cAAc,IAAIF,gBAAgB,CAAA,CAAE;AAC1C,QAAMG,YAAY,IAAIH,gBAAgB,CAAA,CAAE;AACxC,QAAMI,mBAAmB,IAAIJ,gBAAgB,CAAA,CAAE;AAC/C,QAAMK,WAAW,IAAIL,gBAA+B,EAAE;AACtD,QAAMM,YAAY,IAAIC,eACpBR,UACAG,aACAE,kBACAC,UACAF,WACA/E,gBACAyE,eACAxD,SAASgC,IAAI;AAEfiC,YAAUjE,WAAWA,SAASgC;AAC9B,SAAO,IAAIqB,YAAY,IAAIJ,SAAyBgB,WAAW,CAAA,CAAE,GAAGjE,QAAQ;AAC9E;AAEM,SAAUyD,yBAAyBD,eAA+B;AACtE,QAAMK,cAAc,CAAA;AACpB,QAAMC,YAAY,CAAA;AAClB,QAAMC,mBAAmB,CAAA;AACzB,QAAMC,WAAW;AACjB,QAAMC,YAAY,IAAIE,uBACpB,CAAA,GACAN,aACAE,kBACAC,UACAF,WACA/E,gBACAyE,eACA,MACA,CAAA,CAAE;AAEJ,SAAO,IAAIY,oBAAoB,IAAI,IAAInB,SAAiCgB,WAAW,CAAA,CAAE,CAAC;AACxF;IAqBaC,uBAAc;;EA2BzBxD,YAES2D,YAEAC,eAEAC,oBAEAC,iBAEAC,aAEA3F,QAEAX,WACPuG,gBAAsC;AAb/B,SAAUL,aAAVA;AAEA,SAAaC,gBAAbA;AAEA,SAAkBC,qBAAlBA;AAEA,SAAeC,kBAAfA;AAEA,SAAWC,cAAXA;AAEA,SAAM3F,SAANA;AAEA,SAASX,YAATA;AAGP,SAAKwG,kBAAkBD;AACvB,SAAKE,QAAQ,KAAKH,aAAaI,KAAKrC,IAAKsC,OAAYA,EAAEC,aAAa,CAAC,CAAC,KAAKC,GAAGC,MAAS;AAEvF,SAAKC,MAAMb;AACX,SAAKc,SAASb;AACd,SAAKc,cAAcb;AACnB,SAAKP,WAAWQ;AAChB,SAAKa,OAAOZ;;;EAId,IAAIxE,cAAW;AACb,WAAO,KAAK0E,gBAAgB1E;;;EAI9B,IAAI+B,OAAI;AACN,WAAO,KAAKsD,aAAatD;;;EAI3B,IAAI5B,SAAM;AACR,WAAO,KAAKkF,aAAalF,OAAO,IAAI;;;EAItC,IAAIqC,aAAU;AACZ,WAAO,KAAK6C,aAAa7C,WAAW,IAAI;;;EAI1C,IAAI7D,WAAQ;AACV,WAAO,KAAK0G,aAAa1G,SAAS,IAAI;;;EAIxC,IAAIyD,eAAY;AACd,WAAO,KAAKiD,aAAajD,aAAa,IAAI;;;;;;;EAQ5C,IAAIkD,WAAQ;AACV,SAAKC,cAAc,KAAKL,OAAON,KAAKrC,IAAKJ,OAAwBqD,kBAAkBrD,CAAC,CAAC,CAAC;AACtF,WAAO,KAAKoD;;;;;;EAOd,IAAIE,gBAAa;AACf,SAAKC,mBAAmB,KAAKP,YAAYP,KACvCrC,IAAKJ,OAAwBqD,kBAAkBrD,CAAC,CAAC,CAAC;AAEpD,WAAO,KAAKuD;;EAGdzC,WAAQ;AACN,WAAO,KAAKlD,WAAW,KAAKA,SAASkD,SAAQ,IAAK,UAAU,KAAKyB,eAAe;;AAEnF;AAiBK,SAAUiB,aACd9H,OACAsC,QACAyF,4BAAuD,aAAW;AAElE,MAAIC;AACJ,QAAM;IAAC7F;EAAW,IAAInC;AACtB,MACEsC,WAAW,SACVyF,8BAA8B;EAE7B5F,aAAahB,SAAS;EAErB,CAACmB,OAAOjC,aAAa,CAACiC,OAAOH,aAAatB,gBAC7C;AACAmH,gBAAY;MACVX,QAAQ,kCAAI/E,OAAO+E,SAAWrH,MAAMqH;MACpCE,MAAM,kCAAIjF,OAAOiF,OAASvH,MAAMuH;MAChCU,SAAS,gEAOJjI,MAAMuH,OAENjF,OAAOiF,OAEPpF,aAAaoF,OAEbvH,MAAMkI;;SAGR;AACLF,gBAAY;MACVX,QAAQ,mBAAIrH,MAAMqH;MAClBE,MAAM,mBAAIvH,MAAMuH;MAChBU,SAAS,kCAAIjI,MAAMuH,OAAUvH,MAAMkI,iBAAiB,CAAA;;;AAIxD,MAAI/F,eAAegG,eAAehG,WAAW,GAAG;AAC9C6F,cAAUC,QAAQhB,aAAa,IAAI9E,YAAY2E;;AAEjD,SAAOkB;AACT;IAyBa3B,+BAAsB;;EAejC,IAAIS,QAAK;AAGP,WAAO,KAAKS,OAAON,aAAa;;;EAIlCrE,YAESwE,KAoBAC,QAEAC,aAEApB,UAEAqB,MAEAvG,QAEAX,WACP8B,aACA8F,SAAoB;AAhCb,SAAGb,MAAHA;AAoBA,SAAMC,SAANA;AAEA,SAAWC,cAAXA;AAEA,SAAQpB,WAARA;AAEA,SAAIqB,OAAJA;AAEA,SAAMvG,SAANA;AAEA,SAASX,YAATA;AAIP,SAAK8B,cAAcA;AACnB,SAAKiG,WAAWH;;;EAIlB,IAAI/D,OAAI;AACN,WAAO,KAAKsD,aAAatD;;;EAI3B,IAAI5B,SAAM;AACR,WAAO,KAAKkF,aAAalF,OAAO,IAAI;;;EAItC,IAAIqC,aAAU;AACZ,WAAO,KAAK6C,aAAa7C,WAAW,IAAI;;;EAI1C,IAAI7D,WAAQ;AACV,WAAO,KAAK0G,aAAa1G,SAAS,IAAI;;;EAIxC,IAAIyD,eAAY;AACd,WAAO,KAAKiD,aAAajD,aAAa,IAAI;;EAG5C,IAAIkD,WAAQ;AACV,SAAKC,cAAcC,kBAAkB,KAAKN,MAAM;AAChD,WAAO,KAAKK;;EAGd,IAAIE,gBAAa;AACf,SAAKC,mBAAmBF,kBAAkB,KAAKL,WAAW;AAC1D,WAAO,KAAKO;;EAGdzC,WAAQ;AACN,UAAMgC,MAAM,KAAKA,IAAI1C,IAAK2D,aAAYA,QAAQjD,SAAQ,CAAE,EAAEkD,KAAK,GAAG;AAClE,UAAMC,UAAU,KAAKpG,cAAc,KAAKA,YAAYhB,OAAO;AAC3D,WAAO,cAAciG,GAAG,YAAYmB,OAAO;;AAE9C;AA6BK,IAAOjC,sBAAP,cAAmCrC,KAA4B;;EAEnErB,YAESwE,KACPlD,MAAsC;AAEtC,UAAMA,IAAI;AAHH,SAAGkD,MAAHA;AAIP5B,mBAAoC,MAAMtB,IAAI;;EAGvCkB,WAAQ;AACf,WAAOoD,cAAc,KAAKrE,KAAK;;AAElC;AAED,SAASqB,eAA+CiD,OAAUzD,MAAiB;AACjFA,OAAKZ,MAAMoD,eAAeiB;AAC1BzD,OAAKlE,SAASwE,QAASR,OAAMU,eAAeiD,OAAO3D,CAAC,CAAC;AACvD;AAEA,SAAS0D,cAAcxD,MAAsC;AAC3D,QAAMF,IAAIE,KAAKlE,SAASf,SAAS,IAAI,MAAMiF,KAAKlE,SAAS4D,IAAI8D,aAAa,EAAEF,KAAK,IAAI,CAAC,QAAQ;AAC9F,SAAO,GAAGtD,KAAKZ,KAAK,GAAGU,CAAC;AAC1B;AAOM,SAAU4D,sBAAsB1I,OAAqB;AACzD,MAAIA,MAAMkC,UAAU;AAClB,UAAMyG,kBAAkB3I,MAAMkC;AAC9B,UAAM0G,eAAe5I,MAAM6G;AAC3B7G,UAAMkC,WAAW0G;AACjB,QAAI,CAACC,aAAaF,gBAAgBrB,aAAasB,aAAatB,WAAW,GAAG;AACxEtH,YAAMyG,mBAAmBqC,KAAKF,aAAatB,WAAW;;AAExD,QAAIqB,gBAAgBzC,aAAa0C,aAAa1C,UAAU;AACtDlG,YAAM0G,gBAAgBoC,KAAKF,aAAa1C,QAAQ;;AAElD,QAAI,CAAC2C,aAAaF,gBAAgBtB,QAAQuB,aAAavB,MAAM,GAAG;AAC9DrH,YAAMwG,cAAcsC,KAAKF,aAAavB,MAAM;;AAE9C,QAAI,CAAC0B,mBAAmBJ,gBAAgBvB,KAAKwB,aAAaxB,GAAG,GAAG;AAC9DpH,YAAMuG,WAAWuC,KAAKF,aAAaxB,GAAG;;AAExC,QAAI,CAACyB,aAAaF,gBAAgBpB,MAAMqB,aAAarB,IAAI,GAAG;AAC1DvH,YAAM2G,YAAYmC,KAAKF,aAAarB,IAAI;;SAErC;AACLvH,UAAMkC,WAAWlC,MAAM6G;AAGvB7G,UAAM2G,YAAYmC,KAAK9I,MAAM6G,gBAAgBU,IAAI;;AAErD;AAEgB,SAAAyB,0BACdC,GACAC,GAAyB;AAEzB,QAAMC,iBAAiBN,aAAaI,EAAE5B,QAAQ6B,EAAE7B,MAAM,KAAK+B,cAAcH,EAAE7B,KAAK8B,EAAE9B,GAAG;AACrF,QAAMiC,kBAAkB,CAACJ,EAAE3G,WAAW,CAAC4G,EAAE5G;AAEzC,SACE6G,kBACA,CAACE,oBACA,CAACJ,EAAE3G,UAAU0G,0BAA0BC,EAAE3G,QAAQ4G,EAAE5G,MAAO;AAE/D;AAEM,SAAU6F,eAAexI,QAAa;AAC1C,SAAO,OAAOA,OAAOmH,UAAU,YAAYnH,OAAOmH,UAAU;AAC9D;ICvVawC,qBAAAA,cAAY;EALzB1G,cAAA;AAMU,SAASuD,YAA6B;AAKtC,SAAeoD,kBAA0B;AAKxC,SAAIC,OAAGvI;AAEI,SAAAwI,iBAAiB,IAAIC,aAAY;AAC/B,SAAAC,mBAAmB,IAAID,aAAY;AAKvC,SAAAE,eAAe,IAAIF,aAAY;AAK/B,SAAAG,eAAe,IAAIH,aAAY;AAEzC,SAAAI,iBAAiBC,OAAOlH,sBAAsB;AAC9C,SAAAmH,WAAWD,OAAOE,gBAAgB;AAClC,SAAAC,iBAAiBH,OAAOI,iBAAiB;AACzC,SAAWC,cAAGL,OAAOM,cAAc;MAACC,UAAU;IAAI,CAAC;AAElD,SAAgCC,mCAAG;EA6J7C;;EAzLC,IAAIC,wBAAqB;AACvB,WAAO,KAAKrE;;;EA8BdsE,YAAYC,SAAsB;AAChC,QAAIA,QAAQ,MAAM,GAAG;AACnB,YAAM;QAACC;QAAaC;MAAa,IAAIF,QAAQ,MAAM;AACnD,UAAIC,aAAa;AAGf;;AAIF,UAAI,KAAKE,0BAA0BD,aAAa,GAAG;AACjD,aAAKE,WAAU;AACf,aAAKhB,eAAexG,uBAAuBsH,aAAa;;AAG1D,WAAKG,yBAAwB;;;;EAKjCC,cAAW;AAET,QAAI,KAAKH,0BAA0B,KAAKrB,IAAI,GAAG;AAC7C,WAAKM,eAAexG,uBAAuB,KAAKkG,IAAI;;AAEtD,SAAKY,aAAaa,yBAAyB,IAAI;;EAGzCJ,0BAA0BjJ,YAAkB;AAClD,WAAO,KAAKkI,eAAevG,WAAW3B,UAAU,GAAGZ,WAAW;;;EAIhEkK,WAAQ;AACN,SAAKH,yBAAwB;;EAGvBA,2BAAwB;AAC9B,SAAKjB,eAAe7G,qBAAqB,KAAKuG,MAAM,IAAI;AACxD,QAAI,KAAKrD,WAAW;AAClB;;AAKF,UAAMhD,UAAU,KAAK2G,eAAevG,WAAW,KAAKiG,IAAI;AACxD,QAAIrG,SAASnD,OAAO;AAClB,UAAImD,QAAQL,WAAW;AAErB,aAAKqI,OAAOhI,QAAQL,WAAWK,QAAQnD,KAAK;aACvC;AAEL,aAAKoL,aAAajI,QAAQnD,OAAOmD,QAAQV,QAAQ;;;;EAKvD,IAAI4I,cAAW;AACb,WAAO,CAAC,CAAC,KAAKlF;;;;;;EAOhB,IAAI9F,YAAS;AACX,QAAI,CAAC,KAAK8F,UACR,OAAM,IAAI5F,aAER,OAAC,OAAOE,cAAc,eAAeA,cAAc,yBAAyB;AAEhF,WAAO,KAAK0F,UAAUmF;;EAGxB,IAAIC,iBAAc;AAChB,QAAI,CAAC,KAAKpF,UACR,OAAM,IAAI5F,aAER,OAAC,OAAOE,cAAc,eAAeA,cAAc,yBAAyB;AAEhF,WAAO,KAAK8I;;EAGd,IAAIiC,qBAAkB;AACpB,QAAI,KAAKjC,iBAAiB;AACxB,aAAO,KAAKA,gBAAgBrH,SAASqF;;AAEvC,WAAO,CAAA;;;;;EAMTkE,SAAM;AACJ,QAAI,CAAC,KAAKtF,UACR,OAAM,IAAI5F,aAER,OAAC,OAAOE,cAAc,eAAeA,cAAc,yBAAyB;AAEhF,SAAKuJ,SAASyB,OAAM;AACpB,UAAMC,MAAM,KAAKvF;AACjB,SAAKA,YAAY;AACjB,SAAKoD,kBAAkB;AACvB,SAAKM,aAAa8B,KAAKD,IAAIJ,QAAQ;AACnC,WAAOI;;;;;EAMTP,OAAOS,KAAwBL,gBAA8B;AAC3D,SAAKpF,YAAYyF;AACjB,SAAKrC,kBAAkBgC;AACvB,SAAKvB,SAAS6B,OAAOD,IAAIE,QAAQ;AACjC,SAAK1B,aAAa2B,oCAAoC,IAAI;AAC1D,SAAKnC,aAAa+B,KAAKC,IAAIN,QAAQ;;EAGrCR,aAAU;AACR,QAAI,KAAK3E,WAAW;AAClB,YAAMrB,IAAI,KAAKzE;AACf,WAAK8F,UAAU6F,QAAO;AACtB,WAAK7F,YAAY;AACjB,WAAKoD,kBAAkB;AACvB,WAAKI,iBAAiBgC,KAAK7G,CAAC;;;EAIhCsG,aAAaG,gBAAgCU,qBAAwC;AACnF,QAAI,KAAKZ,aAAa;AACpB,YAAM,IAAI9K,aAAY,OAEnB,OAAOE,cAAc,eAAeA,cACnC,6CAA6C;;AAGnD,SAAK8I,kBAAkBgC;AACvB,UAAMvB,WAAW,KAAKA;AACtB,UAAM9H,WAAWqJ,eAAerJ;AAChC,UAAM7B,YAAY6B,SAAS7B;AAC3B,UAAM6L,gBAAgB,KAAKpC,eAAe1G,mBAAmB,KAAKoG,IAAI,EAAE1I;AACxE,UAAM2B,WAAW,IAAI0J,eAAeZ,gBAAgBW,eAAelC,SAASvH,QAAQ;AAEpF,SAAK0D,YAAY6D,SAASoC,gBAAgB/L,WAAW;MACnDgM,OAAOrC,SAASjK;MAChB0C;MACAwJ;IACD,CAAA;AAGD,SAAK/B,eAAeoC,aAAY;AAChC,SAAKlC,aAAa2B,oCAAoC,IAAI;AAC1D,SAAKtC,eAAekC,KAAK,KAAKxF,UAAUmF,QAAQ;;;;sDA1LvC;IAAA;EAAY;;;;MAAZiB,WAAA,CAAA,CAAA,eAAA,CAAA;MAAAC,QAAA;QAAAhD,MAAA;MAAA;MAAAiD,SAAA;QAAAhD,gBAAA;QAAAE,kBAAA;QAAAC,cAAA;QAAAC,cAAA;MAAA;MAAA6C,UAAA,CAAA,QAAA;MAAAC,YAAA;MAAAC,UAAA,CAAA,oBAAA;;EAAY;;;oFAAA,CAAA;UALxBC;IAAUC,MAAA,CAAA;MACTC,UAAU;MACVL,UAAU;MACVC,YAAY;IACb,CAAA;;IAYUnD,MAAI,CAAA;YAAZwD;;IAEmBvD,gBAAc,CAAA;YAAjCwD;aAAO,UAAU;;IACItD,kBAAgB,CAAA;YAArCsD;aAAO,YAAY;;IAKFrD,cAAY,CAAA;YAA7BqD;aAAO,QAAQ;;IAKEpD,cAAY,CAAA;YAA7BoD;aAAO,QAAQ;;;;AAsKlB,IAAMd,iBAAN,MAAMA,gBAAc;;;;;;;;;;;;;;;;EAgBVe,mBAAmBC,gBAAwB;AACjD,WAAO,IAAIhB,gBAAe,KAAKnM,OAAO,KAAKkM,eAAeiB,cAAc;;EAG1EvK,YACU5C,OACAkM,eACA5J,QAAgB;AAFhB,SAAKtC,QAALA;AACA,SAAakM,gBAAbA;AACA,SAAM5J,SAANA;;EAGVoB,IAAI0J,OAAYC,eAAmB;AACjC,QAAID,UAAUhH,gBAAgB;AAC5B,aAAO,KAAKpG;;AAGd,QAAIoN,UAAUvK,wBAAwB;AACpC,aAAO,KAAKqJ;;AAGd,WAAO,KAAK5J,OAAOoB,IAAI0J,OAAOC,aAAa;;AAE9C;AAEM,IAAMhD,eAAe,IAAIiD,eAA2C,EAAE;IAiBhEC,mCAAAA,4BAA0B;EADvC3K,cAAA;AAEU,SAAA4K,0BAA0B,oBAAIxK,IAAG;EA2D1C;EAzDC+I,oCAAoC/K,QAAoB;AACtD,SAAKiK,yBAAyBjK,MAAM;AACpC,SAAKyM,qBAAqBzM,MAAM;;EAGlCiK,yBAAyBjK,QAAoB;AAC3C,SAAKwM,wBAAwB9J,IAAI1C,MAAM,GAAG0M,YAAW;AACrD,SAAKF,wBAAwBG,OAAO3M,MAAM;;EAGpCyM,qBAAqBzM,QAAoB;AAC/C,UAAM;MAACuK;IAAc,IAAIvK;AACzB,UAAM4M,mBAAmBC,cAAc,CACrCtC,eAAejE,aACfiE,eAAelE,QACfkE,eAAehE,IAAI,CACpB,EACER,KACC+G,UAAU,CAAC,CAACxG,aAAaD,QAAQE,IAAI,GAAG8E,UAAS;AAC/C9E,aAAO,iDAAID,cAAgBD,SAAWE;AAGtC,UAAI8E,UAAU,GAAG;AACf,eAAOnF,GAAGK,IAAI;;AAKhB,aAAOwG,QAAQ9F,QAAQV,IAAI;IAC7B,CAAC,CAAC,EAEHyG,UAAWzG,UAAQ;AAGlB,UACE,CAACvG,OAAOqK,eACR,CAACrK,OAAOwJ,yBACRxJ,OAAOuK,mBAAmBA,kBAC1BA,eAAelL,cAAc,MAC7B;AACA,aAAK4K,yBAAyBjK,MAAM;AACpC;;AAGF,YAAMiN,SAASC,qBAAqB3C,eAAelL,SAAS;AAC5D,UAAI,CAAC4N,QAAQ;AACX,aAAKhD,yBAAyBjK,MAAM;AACpC;;AAGF,iBAAW;QAACmN;MAAY,KAAKF,OAAOzB,QAAQ;AAC1CxL,eAAOwJ,sBAAsB4D,SAASD,cAAc5G,KAAK4G,YAAY,CAAC;;IAE1E,CAAC;AAEH,SAAKX,wBAAwBnK,IAAIrC,QAAQ4M,gBAAgB;;;;oEA1DhD;IAAA;EAA0B;;;;MAA1B/J,SAAA,4BAAAC;IAAA,CAAA;EAAA;;;kGAA0B,CAAA;UADtCE;;;SCzZeqK,kBACdC,oBACAC,MACAC,WAAsB;AAEtB,QAAMtK,OAAOuK,WAAWH,oBAAoBC,KAAKpK,OAAOqK,YAAYA,UAAUrK,QAAQgD,MAAS;AAC/F,SAAO,IAAI5B,YAAYrB,MAAMqK,IAAI;AACnC;AAEA,SAASE,WACPH,oBACAC,MACAC,WAAoC;AAGpC,MAAIA,aAAaF,mBAAmBI,iBAAiBH,KAAKnK,OAAOoK,UAAUpK,MAAMlC,QAAQ,GAAG;AAC1F,UAAMkC,QAAQoK,UAAUpK;AACxBA,UAAMyC,kBAAkB0H,KAAKnK;AAC7B,UAAMtD,WAAW6N,sBAAsBL,oBAAoBC,MAAMC,SAAS;AAC1E,WAAO,IAAIrJ,SAAyBf,OAAOtD,QAAQ;SAC9C;AACL,QAAIwN,mBAAmBM,aAAaL,KAAKnK,KAAK,GAAG;AAE/C,YAAMyK,sBAAsBP,mBAAmBQ,SAASP,KAAKnK,KAAK;AAClE,UAAIyK,wBAAwB,MAAM;AAChC,cAAME,QAAQF,oBAAoD7O;AAClE+O,QAAAA,MAAK3K,MAAMyC,kBAAkB0H,KAAKnK;AAClC2K,QAAAA,MAAKjO,WAAWyN,KAAKzN,SAAS4D,IAAKI,OAAM2J,WAAWH,oBAAoBxJ,CAAC,CAAC;AAC1E,eAAOiK;;;AAIX,UAAM3K,QAAQ4K,qBAAqBT,KAAKnK,KAAK;AAC7C,UAAMtD,WAAWyN,KAAKzN,SAAS4D,IAAKI,OAAM2J,WAAWH,oBAAoBxJ,CAAC,CAAC;AAC3E,WAAO,IAAIK,SAAyBf,OAAOtD,QAAQ;;AAEvD;AAEA,SAAS6N,sBACPL,oBACAC,MACAC,WAAmC;AAEnC,SAAOD,KAAKzN,SAAS4D,IAAKO,WAAS;AACjC,eAAWX,KAAKkK,UAAU1N,UAAU;AAClC,UAAIwN,mBAAmBI,iBAAiBzJ,MAAMb,OAAOE,EAAEF,MAAMlC,QAAQ,GAAG;AACtE,eAAOuM,WAAWH,oBAAoBrJ,OAAOX,CAAC;;;AAGlD,WAAOmK,WAAWH,oBAAoBrJ,KAAK;EAC7C,CAAC;AACH;AAEA,SAAS+J,qBAAqBlK,GAAyB;AACrD,SAAO,IAAIsB,eACT,IAAIP,gBAAgBf,EAAEsC,GAAG,GACzB,IAAIvB,gBAAgBf,EAAEuC,MAAM,GAC5B,IAAIxB,gBAAgBf,EAAEwC,WAAW,GACjC,IAAIzB,gBAAgBf,EAAEoB,QAAQ,GAC9B,IAAIL,gBAAgBf,EAAEyC,IAAI,GAC1BzC,EAAE9D,QACF8D,EAAEzE,WACFyE,CAAC;AAEL;ICsBamK,wBAAe;EAC1BrM,YACWhC,YACAsO,2BAAqD;AADrD,SAAUtO,aAAVA;AACA,SAAyBsO,4BAAzBA;;AAEZ;AClGM,IAAMC,6BAA6B;AAY1B,SAAAC,2BACdC,eACAC,UAAmC;AAEnC,QAAM;IAAC1O;IAAYsO;EAAyB,IAAIK,UAAUD,QAAQ,IAC9D;IAAC1O,YAAY0O;IAAUJ,2BAA2B/H;EAAS,IAC3DmI;AACJ,QAAME,QAAQC,yBACZhP,aAAa,mBAAmB4O,cAAcK,UAAU9O,UAAU,CAAC,KACnE+O,2BAA2BC,QAAQ;AAErCJ,QAAMpI,MAAMxG;AACZ4O,QAAMN,4BAA4BA;AAClC,SAAOM;AACT;AAEgB,SAAAC,yBACdI,SACAC,MAAgC;AAEhC,QAAMN,QAAQ,IAAIO,MAAM,6BAA6BF,WAAW,EAAE,EAAE;AACpEL,QAAML,0BAA0B,IAAI;AACpCK,QAAMQ,mBAAmBF;AACzB,SAAON;AACT;AAEM,SAAUS,sCACdT,OAAoD;AAEpD,SACEU,2BAA2BV,KAAK,KAChCD,UAAWC,MAA8CpI,GAAG;AAEhE;AAEM,SAAU8I,2BAA2BV,OAAc;AACvD,SAAO,CAAC,CAACA,SAAUA,MAAmCL,0BAA0B;AAClF;AC1CA,IAAIgB,qCAAqC;AAElC,IAAMC,iBAAiBA,CAC5BC,cACA/B,oBACAgC,cACAC,wBAEA7L,IAAKL,OAAK;AACR,MAAImM,eACFlC,oBACAjK,EAAEoM,mBACFpM,EAAEqM,oBACFJ,cACAC,mBAAmB,EACnBI,SAASN,YAAY;AACvB,SAAOhM;AACT,CAAC;IAEUmM,uBAAc;EACzB5N,YACU0L,oBACAsC,aACAC,WACAP,cACAC,qBAA4B;AAJ5B,SAAkBjC,qBAAlBA;AACA,SAAWsC,cAAXA;AACA,SAASC,YAATA;AACA,SAAYP,eAAZA;AACA,SAAmBC,sBAAnBA;;EAGVI,SAAS7G,gBAAsC;AAC7C,UAAMgH,aAAa,KAAKF,YAAYzM;AACpC,UAAM4M,WAAW,KAAKF,YAAY,KAAKA,UAAU1M,QAAQ;AAEzD,SAAK6M,sBAAsBF,YAAYC,UAAUjH,cAAc;AAC/DpB,0BAAsB,KAAKkI,YAAY1M,IAAI;AAC3C,SAAK+M,oBAAoBH,YAAYC,UAAUjH,cAAc;;;EAIvDkH,sBACNE,YACAC,UACApO,UAAgC;AAEhC,UAAMjC,WAA6DuE,kBAAkB8L,QAAQ;AAG7FD,eAAWpQ,SAASwE,QAAS8L,iBAAe;AAC1C,YAAMC,kBAAkBD,YAAYhN,MAAMpD;AAC1C,WAAKsQ,iBAAiBF,aAAatQ,SAASuQ,eAAe,GAAGtO,QAAQ;AACtE,aAAOjC,SAASuQ,eAAe;IACjC,CAAC;AAGDE,WAAOC,OAAO1Q,QAAQ,EAAEwE,QAASmM,OAA+B;AAC9D,WAAKC,8BAA8BD,GAAG1O,QAAQ;IAChD,CAAC;;EAGKuO,iBACNJ,YACAC,UACAQ,eAAqC;AAErC,UAAMC,SAASV,WAAW9M;AAC1B,UAAMmK,OAAO4C,WAAWA,SAAS/M,QAAQ;AAEzC,QAAIwN,WAAWrD,MAAM;AAEnB,UAAIqD,OAAOvR,WAAW;AAEpB,cAAM8C,UAAUwO,cAAcpO,WAAWqO,OAAO5Q,MAAM;AACtD,YAAImC,SAAS;AACX,eAAK6N,sBAAsBE,YAAYC,UAAUhO,QAAQrC,QAAQ;;aAE9D;AAEL,aAAKkQ,sBAAsBE,YAAYC,UAAUQ,aAAa;;WAE3D;AACL,UAAIpD,MAAM;AAER,aAAKmD,8BAA8BP,UAAUQ,aAAa;;;;EAKxDD,8BACN1R,OACA8J,gBAAsC;AAItC,QAAI9J,MAAMoE,MAAM/D,aAAa,KAAKiO,mBAAmBuD,aAAa7R,MAAMoE,MAAMlC,QAAQ,GAAG;AACvF,WAAK4P,2BAA2B9R,OAAO8J,cAAc;WAChD;AACL,WAAKiI,yBAAyB/R,OAAO8J,cAAc;;;EAI/CgI,2BACN9R,OACA8J,gBAAsC;AAEtC,UAAM3G,UAAU2G,eAAevG,WAAWvD,MAAMoE,MAAMpD,MAAM;AAC5D,UAAM+B,WAAWI,WAAWnD,MAAMoE,MAAM/D,YAAY8C,QAAQrC,WAAWgJ;AACvE,UAAMhJ,WAA6DuE,kBAAkBrF,KAAK;AAE1F,eAAWgS,YAAYT,OAAOC,OAAO1Q,QAAQ,GAAG;AAC9C,WAAK4Q,8BAA8BM,UAAUjP,QAAQ;;AAGvD,QAAII,WAAWA,QAAQnC,QAAQ;AAC7B,YAAMiR,eAAe9O,QAAQnC,OAAOyK,OAAM;AAC1C,YAAM1I,YAAWI,QAAQrC,SAAS0C,oBAAmB;AACrD,WAAK8K,mBAAmB4D,MAAMlS,MAAMoE,MAAMlC,UAAU;QAAC+P;QAAcjS;QAAO+C,UAAAA;MAAQ,CAAC;;;EAI/EgP,yBACN/R,OACA8J,gBAAsC;AAEtC,UAAM3G,UAAU2G,eAAevG,WAAWvD,MAAMoE,MAAMpD,MAAM;AAG5D,UAAM+B,WAAWI,WAAWnD,MAAMoE,MAAM/D,YAAY8C,QAAQrC,WAAWgJ;AACvE,UAAMhJ,WAA6DuE,kBAAkBrF,KAAK;AAE1F,eAAWgS,YAAYT,OAAOC,OAAO1Q,QAAQ,GAAG;AAC9C,WAAK4Q,8BAA8BM,UAAUjP,QAAQ;;AAGvD,QAAII,SAAS;AACX,UAAIA,QAAQnC,QAAQ;AAElBmC,gBAAQnC,OAAO8J,WAAU;AAEzB3H,gBAAQrC,SAAS0C,oBAAmB;;AAKtCL,cAAQL,YAAY;AACpBK,cAAQnD,QAAQ;;;EAIZiR,oBACNC,YACAC,UACApO,UAAgC;AAEhC,UAAMjC,WAAyDuE,kBAAkB8L,QAAQ;AACzFD,eAAWpQ,SAASwE,QAASR,OAAK;AAChC,WAAKsL,eAAetL,GAAGhE,SAASgE,EAAEV,MAAMpD,MAAM,GAAG+B,QAAQ;AACzD,WAAKuN,aAAa,IAAI6B,cAAcrN,EAAEV,MAAMlC,QAAQ,CAAC;IACvD,CAAC;AACD,QAAIgP,WAAWpQ,SAASf,QAAQ;AAC9B,WAAKuQ,aAAa,IAAI8B,mBAAmBlB,WAAW9M,MAAMlC,QAAQ,CAAC;;;EAI/DkO,eACNc,YACAC,UACArH,gBAAsC;AAEtC,UAAM8H,SAASV,WAAW9M;AAC1B,UAAMmK,OAAO4C,WAAWA,SAAS/M,QAAQ;AAEzCsE,0BAAsBkJ,MAAM;AAG5B,QAAIA,WAAWrD,MAAM;AACnB,UAAIqD,OAAOvR,WAAW;AAEpB,cAAM8C,UAAU2G,eAAe1G,mBAAmBwO,OAAO5Q,MAAM;AAC/D,aAAKiQ,oBAAoBC,YAAYC,UAAUhO,QAAQrC,QAAQ;aAC1D;AAEL,aAAKmQ,oBAAoBC,YAAYC,UAAUrH,cAAc;;WAE1D;AACL,UAAI8H,OAAOvR,WAAW;AAEpB,cAAM8C,UAAU2G,eAAe1G,mBAAmBwO,OAAO5Q,MAAM;AAE/D,YAAI,KAAKsN,mBAAmBM,aAAagD,OAAO1P,QAAQ,GAAG;AACzD,gBAAMmQ,SACJ,KAAK/D,mBAAmBQ,SAAS8C,OAAO1P,QAAQ;AAElD,eAAKoM,mBAAmB4D,MAAMN,OAAO1P,UAAU,IAAI;AACnDiB,kBAAQrC,SAAS2C,mBAAmB4O,OAAOtP,QAAQ;AACnDI,kBAAQL,YAAYuP,OAAOJ;AAC3B9O,kBAAQnD,QAAQqS,OAAOrS,MAAMoE;AAC7B,cAAIjB,QAAQnC,QAAQ;AAGlBmC,oBAAQnC,OAAOmK,OAAOkH,OAAOJ,cAAcI,OAAOrS,MAAMoE,KAAK;;AAG/DsE,gCAAsB2J,OAAOrS,MAAMoE,KAAK;AACxC,eAAK6M,oBAAoBC,YAAY,MAAM/N,QAAQrC,QAAQ;eACtD;AACLqC,kBAAQL,YAAY;AACpBK,kBAAQnD,QAAQ4R;AAChB,cAAIzO,QAAQnC,QAAQ;AAGlBmC,oBAAQnC,OAAOoK,aAAawG,QAAQzO,QAAQV,QAAQ;;AAGtD,eAAKwO,oBAAoBC,YAAY,MAAM/N,QAAQrC,QAAQ;;aAExD;AAEL,aAAKmQ,oBAAoBC,YAAY,MAAMpH,cAAc;;;AAG7D,QAAI,OAAOrJ,cAAc,eAAeA,WAAW;AACjD,YAAM0C,UAAU2G,eAAe1G,mBAAmBwO,OAAO5Q,MAAM;AAC/D,YAAMA,SAASmC,QAAQnC;AACvB,UACEA,UACA,KAAKuP,uBACL,CAACvP,OAAOuJ,oCACR,CAAC4F,oCACD;AACAmC,gBAAQC,KACN,0IACyF;AAE3FpC,6CAAqC;;;;AAI5C;IC1OYqC,oBAAW;EAEtB5P,YAAmBzB,MAA8B;AAA9B,SAAIA,OAAJA;AACjB,SAAKnB,QAAQ,KAAKmB,KAAK,KAAKA,KAAKpB,SAAS,CAAC;;AAE9C;IAEY0S,sBAAa;EACxB7P,YACSvC,WACAL,OAA6B;AAD7B,SAASK,YAATA;AACA,SAAKL,QAALA;;AAEV;SAOe0S,kBACdd,QACArD,MACAzE,gBAAsC;AAEtC,QAAMgH,aAAac,OAAOzN;AAC1B,QAAM4M,WAAWxC,OAAOA,KAAKpK,QAAQ;AAErC,SAAOwO,oBAAoB7B,YAAYC,UAAUjH,gBAAgB,CAACgH,WAAW1M,KAAK,CAAC;AACrF;AAEM,SAAUwO,oBACdtO,GAAyB;AAEzB,QAAMuO,mBAAmBvO,EAAEnC,cAAcmC,EAAEnC,YAAY0Q,mBAAmB;AAC1E,MAAI,CAACA,oBAAoBA,iBAAiB9S,WAAW,EAAG,QAAO;AAC/D,SAAO;IAACiF,MAAMV;IAAGwO,QAAQD;EAAgB;AAC3C;AAEgB,SAAAE,2BACdC,iBACAvQ,UAAkB;AAElB,QAAMwQ,YAAYC,OAAM;AACxB,QAAMC,SAAS1Q,SAASiB,IAAgBsP,iBAAiBC,SAAS;AAClE,MAAIE,WAAWF,WAAW;AACxB,QAAI,OAAOD,oBAAoB,cAAc,CAACI,aAAaJ,eAAe,GAAG;AAE3E,aAAOA;WACF;AAEL,aAAOvQ,SAASiB,IAAOsP,eAAe;;;AAG1C,SAAOG;AACT;AAEA,SAASR,oBACPzB,YACAC,UACApO,UACAsQ,YACAC,SAAiB;EACfC,qBAAqB,CAAA;EACrBC,mBAAmB,CAAA;AACpB,GAAA;AAED,QAAMC,eAAepO,kBAAkB8L,QAAQ;AAG/CD,aAAWpQ,SAASwE,QAASR,OAAK;AAChC4O,mBAAe5O,GAAG2O,aAAa3O,EAAEV,MAAMpD,MAAM,GAAG+B,UAAUsQ,WAAWM,OAAO,CAAC7O,EAAEV,KAAK,CAAC,GAAGkP,MAAM;AAC9F,WAAOG,aAAa3O,EAAEV,MAAMpD,MAAM;EACpC,CAAC;AAGDuQ,SAAOqC,QAAQH,YAAY,EAAEnO,QAAQ,CAAC,CAACuO,GAAGpC,CAAC,MACzCC,8BAA8BD,GAAG1O,SAAUQ,WAAWsQ,CAAC,GAAGP,MAAM,CAAC;AAGnE,SAAOA;AACT;AAEA,SAASI,eACPxC,YACAC,UACArH,gBACAuJ,YACAC,SAAiB;EACfC,qBAAqB,CAAA;EACrBC,mBAAmB,CAAA;AACpB,GAAA;AAED,QAAM5B,SAASV,WAAW9M;AAC1B,QAAMmK,OAAO4C,WAAWA,SAAS/M,QAAQ;AACzC,QAAMjB,UAAU2G,iBAAiBA,eAAevG,WAAW2N,WAAW9M,MAAMpD,MAAM,IAAI;AAGtF,MAAIuN,QAAQqD,OAAOzP,gBAAgBoM,KAAKpM,aAAa;AACnD,UAAM2R,YAAYC,4BAChBxF,MACAqD,QACAA,OAAOzP,YAAa6R,qBAAqB;AAE3C,QAAIF,WAAW;AACbR,aAAOE,kBAAkBxR,KAAK,IAAIwQ,YAAYa,UAAU,CAAC;WACpD;AAELzB,aAAOrK,OAAOgH,KAAKhH;AACnBqK,aAAO1J,gBAAgBqG,KAAKrG;;AAI9B,QAAI0J,OAAOvR,WAAW;AACpBsS,0BACEzB,YACAC,UACAhO,UAAUA,QAAQrC,WAAW,MAC7BuS,YACAC,MAAM;WAIH;AACLX,0BAAoBzB,YAAYC,UAAUrH,gBAAgBuJ,YAAYC,MAAM;;AAG9E,QAAIQ,aAAa3Q,WAAWA,QAAQnC,UAAUmC,QAAQnC,OAAOqK,aAAa;AACxEiI,aAAOC,oBAAoBvR,KAAK,IAAIyQ,cAActP,QAAQnC,OAAOX,WAAWkO,IAAI,CAAC;;SAE9E;AACL,QAAIA,MAAM;AACRmD,oCAA8BP,UAAUhO,SAASmQ,MAAM;;AAGzDA,WAAOE,kBAAkBxR,KAAK,IAAIwQ,YAAYa,UAAU,CAAC;AAEzD,QAAIzB,OAAOvR,WAAW;AACpBsS,0BAAoBzB,YAAY,MAAM/N,UAAUA,QAAQrC,WAAW,MAAMuS,YAAYC,MAAM;WAGtF;AACLX,0BAAoBzB,YAAY,MAAMpH,gBAAgBuJ,YAAYC,MAAM;;;AAI5E,SAAOA;AACT;AAEA,SAASS,4BACPxF,MACAqD,QACAqC,MAAuC;AAEvC,MAAI,OAAOA,SAAS,YAAY;AAC9B,WAAOA,KAAK1F,MAAMqD,MAAM;;AAE1B,UAAQqC,MAAI;IACV,KAAK;AACH,aAAO,CAACC,UAAU3F,KAAKnH,KAAKwK,OAAOxK,GAAG;IAExC,KAAK;AACH,aACE,CAAC8M,UAAU3F,KAAKnH,KAAKwK,OAAOxK,GAAG,KAAK,CAACyB,aAAa0F,KAAKjH,aAAasK,OAAOtK,WAAW;IAG1F,KAAK;AACH,aAAO;IAET,KAAK;AACH,aACE,CAAC0B,0BAA0BuF,MAAMqD,MAAM,KACvC,CAAC/I,aAAa0F,KAAKjH,aAAasK,OAAOtK,WAAW;IAGtD,KAAK;IACL;AACE,aAAO,CAAC0B,0BAA0BuF,MAAMqD,MAAM;;AAEpD;AAEA,SAASF,8BACP1R,OACAmD,SACAmQ,QAAc;AAEd,QAAMxS,WAAWuE,kBAAkBrF,KAAK;AACxC,QAAM+B,IAAI/B,MAAMoE;AAEhBmN,SAAOqC,QAAQ9S,QAAQ,EAAEwE,QAAQ,CAAC,CAACpC,WAAW8B,IAAI,MAAK;AACrD,QAAI,CAACjD,EAAE1B,WAAW;AAChBqR,oCAA8B1M,MAAM7B,SAASmQ,MAAM;eAC1CnQ,SAAS;AAClBuO,oCAA8B1M,MAAM7B,QAAQrC,SAASyC,WAAWL,SAAS,GAAGoQ,MAAM;WAC7E;AACL5B,oCAA8B1M,MAAM,MAAMsO,MAAM;;EAEpD,CAAC;AAED,MAAI,CAACvR,EAAE1B,WAAW;AAChBiT,WAAOC,oBAAoBvR,KAAK,IAAIyQ,cAAc,MAAM1Q,CAAC,CAAC;aACjDoB,WAAWA,QAAQnC,UAAUmC,QAAQnC,OAAOqK,aAAa;AAClEiI,WAAOC,oBAAoBvR,KAAK,IAAIyQ,cAActP,QAAQnC,OAAOX,WAAW0B,CAAC,CAAC;SACzE;AACLuR,WAAOC,oBAAoBvR,KAAK,IAAIyQ,cAAc,MAAM1Q,CAAC,CAAC;;AAE9D;ACnMM,SAAUoS,WAAc1C,GAAM;AAClC,SAAO,OAAOA,MAAM;AACtB;AAEM,SAAU2C,UAAU3C,GAAM;AAC9B,SAAO,OAAOA,MAAM;AACtB;AAEM,SAAU4C,UAAUC,OAAU;AAClC,SAAOA,SAASH,WAAsBG,MAAMC,OAAO;AACrD;AAEM,SAAUC,cAAcF,OAAU;AACtC,SAAOA,SAASH,WAA0BG,MAAMpT,WAAW;AAC7D;AAEM,SAAUuT,mBAAmBH,OAAU;AAC3C,SAAOA,SAASH,WAA+BG,MAAMzB,gBAAgB;AACvE;AAEM,SAAU6B,gBAAmBJ,OAAU;AAC3C,SAAOA,SAASH,WAA+BG,MAAMK,aAAa;AACpE;AACM,SAAUC,WAAWN,OAAU;AACnC,SAAOA,SAASH,WAAuBG,MAAMO,QAAQ;AACvD;AAEM,SAAUC,aAAaC,GAAQ;AACnC,SAAOA,aAAaC,cAAcD,GAAGvL,SAAS;AAChD;AC9CA,IAAMyL,gBAAgC/B,OAAO,eAAe;SAG5CgC,wBAAqB;AACnC,SAAOpH,UAAWqH,SAAO;AACvB,WAAOtH,cACLsH,IAAIzQ,IAAK0Q,OAAMA,EAAErO,KAAKsO,KAAK,CAAC,GAAGC,UAAUL,aAA+B,CAAC,CAAC,CAAC,EAC3ElO,KACArC,IAAK6Q,aAA6B;AAChC,iBAAWpC,UAAUoC,SAAS;AAC5B,YAAIpC,WAAW,MAAM;AAEnB;mBACSA,WAAW8B,eAAe;AAEnC,iBAAOA;mBACE9B,WAAW,SAASqC,WAAWrC,MAAM,GAAG;AAIjD,iBAAOA;;;AAIX,aAAO;IACT,CAAC,GACDrR,OAAQ2T,UAA8BA,SAASR,aAAa,GAC5DI,KAAK,CAAC,CAAC;EAEX,CAAC;AACH;AAEA,SAASG,WAAWE,KAAmB;AACrC,SAAOnG,UAAUmG,GAAG,KAAKA,eAAezG;AAC1C;ACMgB,SAAA0G,YACdlT,UACA6N,cAAmC;AAEnC,SAAOsF,SAAUvR,OAAK;AACpB,UAAM;MACJwR;MACAlN;MACAmK,QAAQ;QAACU;QAAmBD;MAAmB;IAAC,IAC9ClP;AACJ,QAAIkP,oBAAoBxT,WAAW,KAAKyT,kBAAkBzT,WAAW,GAAG;AACtE,aAAOmH,GAAG,iCAAI7C,IAAJ;QAAOyR,cAAc;MAAI,EAAC;;AAGtC,WAAOC,uBACLxC,qBACAsC,gBACAlN,iBACAlG,QAAQ,EACRsE,KACA6O,SAAUjB,mBAAiB;AACzB,aAAOA,iBAAiBP,UAAUO,aAAa,IAC3CqB,qBAAqBH,gBAAiBrC,mBAAmB/Q,UAAU6N,YAAY,IAC/EpJ,GAAGyN,aAAa;IACtB,CAAC,GACDjQ,IAAKoR,kBAAkB,iCAAIzR,IAAJ;MAAOyR;IAAY,EAAE,CAAC;EAEjD,CAAC;AACH;AAEA,SAASC,uBACPzC,QACA2C,WACAC,SACAzT,UAA6B;AAE7B,SAAO0T,KAAK7C,MAAM,EAAEvM,KAClB6O,SAAUQ,WACRC,iBAAiBD,MAAM/V,WAAW+V,MAAMpW,OAAOkW,SAASD,WAAWxT,QAAQ,CAAC,GAE9E6T,MAAOnD,YAAU;AACf,WAAOA,WAAW;EACpB,GAAG,IAAI,CAAC;AAEZ;AAEA,SAAS6C,qBACPpP,gBACA0M,QACA7Q,UACA6N,cAAmC;AAEnC,SAAO6F,KAAK7C,MAAM,EAAEvM,KAClBwP,UAAWH,WAAsB;AAC/B,WAAOzC,OACL6C,yBAAyBJ,MAAMpW,MAAMsC,QAAQgO,YAAY,GACzDmG,oBAAoBL,MAAMpW,OAAOsQ,YAAY,GAC7CoG,oBAAoB9P,gBAAgBwP,MAAMjV,MAAMsB,QAAQ,GACxDkU,eAAe/P,gBAAgBwP,MAAMpW,OAAOyC,QAAQ,CAAC;EAEzD,CAAC,GACD6T,MAAOnD,YAAU;AACf,WAAOA,WAAW;EACpB,GAAG,IAAI,CAAC;AAEZ;AAUA,SAASsD,oBACPvU,UACAoO,cAAmC;AAEnC,MAAIpO,aAAa,QAAQoO,cAAc;AACrCA,iBAAa,IAAIsG,gBAAgB1U,QAAQ,CAAC;;AAE5C,SAAOgF,GAAG,IAAI;AAChB;AAUA,SAASsP,yBACPtU,UACAoO,cAAmC;AAEnC,MAAIpO,aAAa,QAAQoO,cAAc;AACrCA,iBAAa,IAAIuG,qBAAqB3U,QAAQ,CAAC;;AAEjD,SAAOgF,GAAG,IAAI;AAChB;AAEA,SAASyP,eACPV,WACAa,WACArU,UAA6B;AAE7B,QAAMvB,cAAc4V,UAAU3U,cAAc2U,UAAU3U,YAAYjB,cAAc;AAChF,MAAI,CAACA,eAAeA,YAAYnB,WAAW,EAAG,QAAOmH,GAAG,IAAI;AAE5D,QAAM6P,yBAAyB7V,YAAYwD,IACxCxD,CAAAA,iBAAuD;AACtD,WAAO8V,MAAM,MAAK;AAChB,YAAMC,kBAAkBhV,wBAAwB6U,SAAS,KAAKrU;AAC9D,YAAM6R,QAAQvB,2BAAwC7R,cAAa+V,eAAe;AAClF,YAAMC,WAAW1C,cAAcF,KAAK,IAChCA,MAAMpT,YAAY4V,WAAWb,SAAS,IACtCkB,sBAAsBF,iBAAiB,MACpC3C,MAAwBwC,WAAWb,SAAS,CAAC;AAEpD,aAAOmB,mBAAmBF,QAAQ,EAAEnQ,KAAKuP,MAAK,CAAE;IAClD,CAAC;EACH,CAAC;AAEH,SAAOpP,GAAG6P,sBAAsB,EAAEhQ,KAAKmO,sBAAqB,CAAE;AAChE;AAEA,SAASwB,oBACPT,WACA9U,MACAsB,UAA6B;AAE7B,QAAMqU,YAAY3V,KAAKA,KAAKpB,SAAS,CAAC;AAEtC,QAAMsX,yBAAyBlW,KAC5BmW,MAAM,GAAGnW,KAAKpB,SAAS,CAAC,EACxBwX,QAAO,EACP7S,IAAKJ,OAAMsO,oBAAoBtO,CAAC,CAAC,EACjCxC,OAAQa,OAAMA,MAAM,IAAI;AAE3B,QAAM6U,+BAA+BH,uBAAuB3S,IAAKsC,OAAU;AACzE,WAAOgQ,MAAM,MAAK;AAChB,YAAMS,eAAezQ,EAAE8L,OAAOpO,IAC3BmO,sBAAiE;AAChE,cAAMoE,kBAAkBhV,wBAAwB+E,EAAEhC,IAAI,KAAKvC;AAC3D,cAAM6R,QAAQvB,2BACZF,kBACAoE,eAAe;AAEjB,cAAMC,WAAWzC,mBAAmBH,KAAK,IACrCA,MAAMzB,iBAAiBiE,WAAWb,SAAS,IAC3CkB,sBAAsBF,iBAAiB,MACpC3C,MAA6BwC,WAAWb,SAAS,CAAC;AAEzD,eAAOmB,mBAAmBF,QAAQ,EAAEnQ,KAAKuP,MAAK,CAAE;MAClD,CAAC;AAEH,aAAOpP,GAAGuQ,YAAY,EAAE1Q,KAAKmO,sBAAqB,CAAE;IACtD,CAAC;EACH,CAAC;AACD,SAAOhO,GAAGsQ,4BAA4B,EAAEzQ,KAAKmO,sBAAqB,CAAE;AACtE;AAEA,SAASmB,iBACPhW,WACAqX,SACAxB,SACAD,WACAxT,UAA6B;AAE7B,QAAMkS,gBAAgB+C,WAAWA,QAAQvV,cAAcuV,QAAQvV,YAAYwS,gBAAgB;AAC3F,MAAI,CAACA,iBAAiBA,cAAc5U,WAAW,EAAG,QAAOmH,GAAG,IAAI;AAChE,QAAMyQ,2BAA2BhD,cAAcjQ,IAAKI,OAAU;AAC5D,UAAMmS,kBAAkBhV,wBAAwByV,OAAO,KAAKjV;AAC5D,UAAM6R,QAAQvB,2BAAgCjO,GAAGmS,eAAe;AAChE,UAAMC,WAAWxC,gBAAgBJ,KAAK,IAClCA,MAAMK,cAActU,WAAWqX,SAASxB,SAASD,SAAS,IAC1DkB,sBAAsBF,iBAAiB,MACpC3C,MAA+BjU,WAAWqX,SAASxB,SAASD,SAAS,CAAC;AAE7E,WAAOmB,mBAAmBF,QAAQ,EAAEnQ,KAAKuP,MAAK,CAAE;EAClD,CAAC;AACD,SAAOpP,GAAGyQ,wBAAwB,EAAE5Q,KAAKmO,sBAAqB,CAAE;AAClE;AAEM,SAAU0C,iBACdnV,UACAzC,OACA6X,UACAxI,eAA4B;AAE5B,QAAMkF,UAAUvU,MAAMuU;AACtB,MAAIA,YAAYpN,UAAaoN,QAAQxU,WAAW,GAAG;AACjD,WAAOmH,GAAG,IAAI;;AAGhB,QAAM4Q,qBAAqBvD,QAAQ7P,IAAKqT,oBAAuB;AAC7D,UAAMzD,QAAQvB,2BAAgCgF,gBAAgBtV,QAAQ;AACtE,UAAMyU,WAAW7C,UAAUC,KAAK,IAC5BA,MAAMC,QAAQvU,OAAO6X,QAAQ,IAC7BV,sBAAsB1U,UAAU,MAAO6R,MAAoBtU,OAAO6X,QAAQ,CAAC;AAC/E,WAAOT,mBAAmBF,QAAQ;EACpC,CAAC;AAED,SAAOhQ,GAAG4Q,kBAAkB,EAAE/Q,KAAKmO,sBAAqB,GAAI8C,kBAAkB3I,aAAa,CAAC;AAC9F;AAEA,SAAS2I,kBAAkB3I,eAA4B;AACrD,SAAOtI,KACLkR,IAAK9E,YAAuB;AAC1B,QAAI,OAAOA,WAAW,UAAW;AAEjC,UAAM/D,2BAA2BC,eAAe8D,MAAM;EACxD,CAAC,GACDzO,IAAKyO,YAAWA,WAAW,IAAI,CAAC;AAEpC;AAEM,SAAU+E,kBACdzV,UACAzC,OACA6X,UACAxI,eAA4B;AAE5B,QAAMwF,WAAW7U,MAAM6U;AACvB,MAAI,CAACA,YAAYA,SAAS9U,WAAW,EAAG,QAAOmH,GAAG,IAAI;AAEtD,QAAMiR,sBAAsBtD,SAASnQ,IAAKqT,oBAAkB;AAC1D,UAAMzD,QAAQvB,2BAA2BgF,gBAAgBtV,QAAQ;AACjE,UAAMyU,WAAWtC,WAAWN,KAAK,IAC7BA,MAAMO,SAAS7U,OAAO6X,QAAQ,IAC9BV,sBAAsB1U,UAAU,MAAO6R,MAAqBtU,OAAO6X,QAAQ,CAAC;AAChF,WAAOT,mBAAmBF,QAAQ;EACpC,CAAC;AAED,SAAOhQ,GAAGiR,mBAAmB,EAAEpR,KAAKmO,sBAAqB,GAAI8C,kBAAkB3I,aAAa,CAAC;AAC/F;IChRa+I,gBAAO;EAGlBxV,YAAYyV,cAA8B;AACxC,SAAKA,eAAeA,gBAAgB;;AAEvC;AAEK,IAAOC,mBAAP,cAAgCvI,MAAK;EACzCnN,YAAmB2V,SAAgB;AACjC,UAAK;AADY,SAAOA,UAAPA;;AAGpB;AAEK,SAAUC,UAAQH,cAA6B;AACnD,SAAOI,WAAW,IAAIL,QAAQC,YAAY,CAAC;AAC7C;AAMM,SAAUK,qBAAqBC,YAAkB;AACrD,SAAOC,WACL,IAAIC,aAEF,MAAC,OAAOC,cAAc,eAAeA,cACnC,gEAAgEH,UAAU,GAAG,CAChF;AAEL;AAEM,SAAUI,aAAaC,OAAY;AACvC,SAAOJ,WACLK,0BACG,OAAOH,cAAc,eAAeA,cACnC,+DAA+DE,MAAME,IAAI,qBAC3EC,2BAA2BC,aAAa,CACzC;AAEL;IAEaC,uBAAc;EACzBC,YACUC,eACAC,SAAgB;AADhB,SAAaD,gBAAbA;AACA,SAAOC,UAAPA;;EAGVC,mBAAmBT,OAAcQ,SAAgB;AAC/C,QAAIE,MAAoB,CAAA;AACxB,QAAIC,IAAIH,QAAQI;AAChB,WAAO,MAAM;AACXF,YAAMA,IAAIG,OAAOF,EAAEG,QAAQ;AAC3B,UAAIH,EAAEI,qBAAqB,GAAG;AAC5B,eAAOC,GAAGN,GAAG;;AAGf,UAAIC,EAAEI,mBAAmB,KAAK,CAACJ,EAAEM,SAASC,cAAc,GAAG;AACzD,eAAOxB,qBAAqB,GAAGM,MAAML,UAAW,EAAE;;AAGpDgB,UAAIA,EAAEM,SAASC,cAAc;;;EAIjCC,sBACEL,UACAnB,YACAyB,WACAC,iBACAC,UAAkB;AAElB,QAAI,OAAO3B,eAAe,UAAU;AAClC,YAAM4B,eAAe5B;AACrB,YAAM;QAAC6B;QAAaC;QAAUC;QAAaC;QAAKC;QAAQC;QAAQC;QAAMC;MAAK,IACzEV;AACF,YAAMW,cAAcC,sBAAsBX,UAAU,MAClDC,aAAa;QAACM;QAAQC;QAAMN;QAAaC;QAAUC;QAAaC;QAAKC;QAAQG;MAAK,CAAC,CAAC;AAEtF,UAAIC,uBAAuBE,SAAS;AAClC,cAAM,IAAIC,iBAAiBH,WAAW;;AAGxCrC,mBAAaqC;;AAGf,UAAMI,UAAU,KAAKC,2BACnB1C,YACA,KAAKY,cAAc+B,MAAM3C,UAAU,GACnCmB,UACAM,SAAS;AAEX,QAAIzB,WAAW,CAAC,MAAM,KAAK;AACzB,YAAM,IAAIwC,iBAAiBC,OAAO;;AAEpC,WAAOA;;EAGTC,2BACE1C,YACAa,SACAM,UACAM,WAAoC;AAEpC,UAAMmB,UAAU,KAAKC,mBAAmB7C,YAAYa,QAAQI,MAAME,UAAUM,SAAS;AACrF,WAAO,IAAIc,QACTK,SACA,KAAKE,kBAAkBjC,QAAQgB,aAAa,KAAKhB,QAAQgB,WAAW,GACpEhB,QAAQiB,QAAQ;;EAIpBgB,kBAAkBC,kBAA0BC,cAAoB;AAC9D,UAAMjC,MAAc,CAAA;AACpBkC,WAAOC,QAAQH,gBAAgB,EAAEI,QAAQ,CAAC,CAACC,GAAGC,CAAC,MAAK;AAClD,YAAMC,kBAAkB,OAAOD,MAAM,YAAYA,EAAE,CAAC,MAAM;AAC1D,UAAIC,iBAAiB;AACnB,cAAMC,aAAaF,EAAEG,UAAU,CAAC;AAChCzC,YAAIqC,CAAC,IAAIJ,aAAaO,UAAU;aAC3B;AACLxC,YAAIqC,CAAC,IAAIC;;IAEb,CAAC;AACD,WAAOtC;;EAGT8B,mBACE7C,YACAyD,OACAtC,UACAM,WAAoC;AAEpC,UAAMiC,kBAAkB,KAAKC,eAAe3D,YAAYyD,MAAMtC,UAAUA,UAAUM,SAAS;AAE3F,QAAIH,WAA2C,CAAA;AAC/C2B,WAAOC,QAAQO,MAAMnC,QAAQ,EAAE6B,QAAQ,CAAC,CAACS,MAAMC,KAAK,MAAK;AACvDvC,eAASsC,IAAI,IAAI,KAAKf,mBAAmB7C,YAAY6D,OAAO1C,UAAUM,SAAS;IACjF,CAAC;AAED,WAAO,IAAIqC,gBAAgBJ,iBAAiBpC,QAAQ;;EAGtDqC,eACE3D,YACA+D,oBACAC,gBACAvC,WAAoC;AAEpC,WAAOsC,mBAAmBE,IAAKC,OAC7BA,EAAE3D,KAAK,CAAC,MAAM,MACV,KAAK4D,aAAanE,YAAYkE,GAAGzC,SAAS,IAC1C,KAAK2C,aAAaF,GAAGF,cAAc,CAAC;;EAI5CG,aACEnE,YACAqE,sBACA5C,WAAoC;AAEpC,UAAM6C,MAAM7C,UAAU4C,qBAAqB9D,KAAKiD,UAAU,CAAC,CAAC;AAC5D,QAAI,CAACc,IACH,OAAM,IAAIpE,aAAY,OAEnB,OAAOC,cAAc,eAAeA,cACnC,uBAAuBH,UAAU,mBAAmBqE,qBAAqB9D,IAAI,IAAI;AAEvF,WAAO+D;;EAGTF,aAAaC,sBAAkCL,gBAA4B;AACzE,QAAIO,MAAM;AACV,eAAWL,KAAKF,gBAAgB;AAC9B,UAAIE,EAAE3D,SAAS8D,qBAAqB9D,MAAM;AACxCyD,uBAAeQ,OAAOD,GAAG;AACzB,eAAOL;;AAETK;;AAEF,WAAOF;;AAEV;AC5KD,IAAMI,UAAuB;EAC3BC,SAAS;EACTC,kBAAkB,CAAA;EAClBC,mBAAmB,CAAA;EACnBC,YAAY,CAAA;EACZC,yBAAyB,CAAA;;AAGrB,SAAUC,gBACdC,cACA3E,OACAc,UACAQ,UACAf,eAA4B;AAE5B,QAAMqE,SAASC,MAAMF,cAAc3E,OAAOc,QAAQ;AAClD,MAAI,CAAC8D,OAAOP,SAAS;AACnB,WAAOrD,GAAG4D,MAAM;;AAKlBtD,aAAWwD,iCAAiC9E,OAAOsB,QAAQ;AAC3D,SAAOyD,kBAAkBzD,UAAUtB,OAAOc,UAAUP,aAAa,EAAEyE,KACjEpB,IAAKZ,OAAOA,MAAM,OAAO4B,SAAS,mBAAIR,QAAS,CAAC;AAEpD;SAEgBS,MACdF,cACA3E,OACAc,UAAsB;AAEtB,MAAId,MAAME,SAAS,MAAM;AACvB,WAAO+E,0BAA0BnE,QAAQ;;AAG3C,MAAId,MAAME,SAAS,IAAI;AACrB,QAAIF,MAAMkF,cAAc,WAAWP,aAAaQ,YAAW,KAAMrE,SAASsE,SAAS,IAAI;AACrF,aAAO,mBAAIhB;;AAGb,WAAO;MACLC,SAAS;MACTC,kBAAkB,CAAA;MAClBC,mBAAmBzD;MACnB0D,YAAY,CAAA;MACZC,yBAAyB,CAAA;;;AAI7B,QAAMY,UAAUrF,MAAMqF,WAAWC;AACjC,QAAM5E,MAAM2E,QAAQvE,UAAU6D,cAAc3E,KAAK;AACjD,MAAI,CAACU,IAAK,QAAO,mBAAI0D;AAErB,QAAMhD,YAAmC,CAAA;AACzCwB,SAAOC,QAAQnC,IAAIU,aAAa,CAAA,CAAE,EAAE0B,QAAQ,CAAC,CAACC,GAAGC,CAAC,MAAK;AACrD5B,cAAU2B,CAAC,IAAIC,EAAE9C;EACnB,CAAC;AACD,QAAMsE,aACJ9D,IAAI6E,SAASH,SAAS,IAClB,kCAAIhE,YAAcV,IAAI6E,SAAS7E,IAAI6E,SAASH,SAAS,CAAC,EAAEZ,cACxDpD;AAEN,SAAO;IACLiD,SAAS;IACTC,kBAAkB5D,IAAI6E;IACtBhB,mBAAmBzD,SAAS0E,MAAM9E,IAAI6E,SAASH,MAAM;;IAErDZ;IACAC,yBAAyB/D,IAAIU,aAAa,CAAA;;AAE9C;AAEA,SAAS6D,0BAA0BnE,UAAsB;AACvD,SAAO;IACLuD,SAAS;IACTG,YAAY1D,SAASsE,SAAS,IAAIK,MAAK3E,QAAQ,EAAG0D,aAAa,CAAA;IAC/DF,kBAAkBxD;IAClByD,mBAAmB,CAAA;IACnBE,yBAAyB,CAAA;;AAE7B;AAEM,SAAUiB,MACdf,cACAL,kBACAqB,gBACAC,QAAe;AAEf,MACED,eAAeP,SAAS,KACxBS,yCAAyClB,cAAcgB,gBAAgBC,MAAM,GAC7E;AACA,UAAM/B,KAAI,IAAIJ,gBACZa,kBACAwB,4BACEF,QACA,IAAInC,gBAAgBkC,gBAAgBhB,aAAa1D,QAAQ,CAAC,CAC3D;AAEH,WAAO;MAAC0D,cAAcd;MAAG8B,gBAAgB,CAAA;IAAE;;AAG7C,MACEA,eAAeP,WAAW,KAC1BW,yBAAyBpB,cAAcgB,gBAAgBC,MAAM,GAC7D;AACA,UAAM/B,KAAI,IAAIJ,gBACZkB,aAAa7D,UACbkF,gCAAgCrB,cAAcgB,gBAAgBC,QAAQjB,aAAa1D,QAAQ,CAAC;AAE9F,WAAO;MAAC0D,cAAcd;MAAG8B;IAAc;;AAGzC,QAAM9B,IAAI,IAAIJ,gBAAgBkB,aAAa7D,UAAU6D,aAAa1D,QAAQ;AAC1E,SAAO;IAAC0D,cAAcd;IAAG8B;EAAc;AACzC;AAEA,SAASK,gCACPrB,cACAgB,gBACAM,QACAhF,UAA2C;AAE3C,QAAMP,MAAyC,CAAA;AAC/C,aAAWwF,KAAKD,QAAQ;AACtB,QAAIE,eAAexB,cAAcgB,gBAAgBO,CAAC,KAAK,CAACjF,SAASmF,UAAUF,CAAC,CAAC,GAAG;AAC9E,YAAMrC,IAAI,IAAIJ,gBAAgB,CAAA,GAAI,CAAA,CAAE;AACpC/C,UAAI0F,UAAUF,CAAC,CAAC,IAAIrC;;;AAGxB,SAAO,kCAAI5C,WAAaP;AAC1B;AAEA,SAASoF,4BACPG,QACAI,gBAA+B;AAE/B,QAAM3F,MAAyC,CAAA;AAC/CA,MAAIQ,cAAc,IAAImF;AAEtB,aAAWH,KAAKD,QAAQ;AACtB,QAAIC,EAAEhG,SAAS,MAAMkG,UAAUF,CAAC,MAAMhF,gBAAgB;AACpD,YAAM2C,IAAI,IAAIJ,gBAAgB,CAAA,GAAI,CAAA,CAAE;AACpC/C,UAAI0F,UAAUF,CAAC,CAAC,IAAIrC;;;AAGxB,SAAOnD;AACT;AAEA,SAASmF,yCACPlB,cACAgB,gBACAM,QAAe;AAEf,SAAOA,OAAOK,KACXJ,OAAMC,eAAexB,cAAcgB,gBAAgBO,CAAC,KAAKE,UAAUF,CAAC,MAAMhF,cAAc;AAE7F;AAEA,SAAS6E,yBACPpB,cACAgB,gBACAM,QAAe;AAEf,SAAOA,OAAOK,KAAMJ,OAAMC,eAAexB,cAAcgB,gBAAgBO,CAAC,CAAC;AAC3E;SAEgBC,eACdxB,cACAgB,gBACAO,GAAQ;AAER,OAAKvB,aAAaQ,YAAW,KAAMQ,eAAeP,SAAS,MAAMc,EAAEhB,cAAc,QAAQ;AACvF,WAAO;;AAGT,SAAOgB,EAAEhG,SAAS;AACpB;SAEgBqG,iBACd5B,cACA7D,UACAc,QAAc;AAEd,SAAOd,SAASsE,WAAW,KAAK,CAACT,aAAa1D,SAASW,MAAM;AAC/D;AClKA,IAAM4E,mBAAN,MAAsB;AAAA;SAENC,YACdnF,UACAoF,cACAC,mBACAf,QACApF,SACAD,eACAqG,4BAAuD,aAAW;AAElE,SAAO,IAAIC,WACTvF,UACAoF,cACAC,mBACAf,QACApF,SACAoG,2BACArG,aAAa,EACbuG,UAAS;AACb;AAEA,IAAMC,wBAAwB;IAEjBF,mBAAU;EAKrBvG,YACUgB,UACAoF,cACAC,mBACAf,QACApF,SACAoG,2BACSrG,eAA4B;AANrC,SAAQe,WAARA;AACA,SAAYoF,eAAZA;AACA,SAAiBC,oBAAjBA;AACA,SAAMf,SAANA;AACA,SAAOpF,UAAPA;AACA,SAAyBoG,4BAAzBA;AACS,SAAarG,gBAAbA;AAXX,SAAAyG,iBAAiB,IAAI3G,eAAe,KAAKE,eAAe,KAAKC,OAAO;AACpE,SAAqByG,wBAAG;AAChC,SAAcC,iBAAG;;EAYTC,aAAaC,GAAU;AAC7B,WAAO,IAAIvH,aAET,MAAA,OAAOC,cAAc,eAAeA,YAChC,0CAA0CsH,EAAEzC,YAAY,MACxD,IAAIyC,EAAEzC,YAAY,GAAG;;EAI7BmC,YAAS;AACP,UAAMO,mBAAmB3B,MAAM,KAAKlF,QAAQI,MAAM,CAAA,GAAI,CAAA,GAAI,KAAKgF,MAAM,EAAEjB;AAEvE,WAAO,KAAKE,MAAMwC,gBAAgB,EAAErC,KAClCpB,IAAI,CAAC;MAAC3C;MAAUqG;IAAY,MAAK;AAC/B,YAAMC,WAAW,IAAIC,SAASF,cAAcrG,QAAQ;AACpD,YAAMwG,aAAa,IAAIC,oBAAoB,IAAIH,QAAQ;AACvD,YAAMI,QAAOC,0BACXN,cACA,CAAA,GACA,KAAK9G,QAAQgB,aACb,KAAKhB,QAAQiB,QAAQ;AAKvBkG,MAAAA,MAAKnG,cAAc,KAAKhB,QAAQgB;AAChCiG,iBAAW9F,MAAM,KAAKpB,cAAcsH,UAAUF,KAAI;AAClD,aAAO;QAACG,OAAOL;QAAYE,MAAAA;MAAI;KAChC,CAAC;;EAIE9C,MAAMwC,kBAAiC;AAM7C,UAAMC,eAAe,IAAIS,uBACvB,CAAA,GACAnF,OAAOoF,OAAO,CAAA,CAAE,GAChBpF,OAAOoF,OAAO,mBAAI,KAAKxH,QAAQgB,YAAY,GAC3C,KAAKhB,QAAQiB,UACbmB,OAAOoF,OAAO,CAAA,CAAE,GAChB9G,gBACA,KAAKyF,mBACL,MACA,CAAA,CAAE;AAEJ,WAAO,KAAKsB,oBACV,KAAK3G,UACL,KAAKsE,QACLyB,kBACAnG,gBACAoG,YAAY,EACZtC,KACApB,IAAK3C,cAAY;AACf,aAAO;QAACA;QAAUqG;MAAY;IAChC,CAAC,GACDY,WAAYd,OAAU;AACpB,UAAIA,aAAajF,kBAAkB;AACjC,aAAK3B,UAAU4G,EAAE5G;AACjB,eAAO,KAAKqE,MAAMuC,EAAE5G,QAAQI,IAAI;;AAElC,UAAIwG,aAAae,SAAS;AACxB,cAAM,KAAKhB,aAAaC,CAAC;;AAG3B,YAAMA;KACP,CAAC;;EAINa,oBACE3G,UACAsE,QACAjB,cACA/C,QACAwG,aAAmC;AAEnC,QAAIzD,aAAa7D,SAASsE,WAAW,KAAKT,aAAaQ,YAAW,GAAI;AACpE,aAAO,KAAKkD,gBAAgB/G,UAAUsE,QAAQjB,cAAcyD,WAAW;;AAGzE,WAAO,KAAKE,eACVhH,UACAsE,QACAjB,cACAA,aAAa7D,UACbc,QACA,MACAwG,WAAW,EACXpD,KAAKpB,IAAKJ,WAAWA,iBAAiBgE,WAAW,CAAChE,KAAK,IAAI,CAAA,CAAG,CAAC;;;;;;;;;;EAWnE6E,gBACE/G,UACAsE,QACAjB,cACAyD,aAAmC;AAInC,UAAMG,eAAyB,CAAA;AAC/B,eAAW/E,SAASZ,OAAO4F,KAAK7D,aAAa1D,QAAQ,GAAG;AACtD,UAAIuC,UAAU,WAAW;AACvB+E,qBAAaE,QAAQjF,KAAK;aACrB;AACL+E,qBAAaG,KAAKlF,KAAK;;;AAG3B,WAAOmF,KAAKJ,YAAY,EAAEvD,KACxB4D,UAAWC,iBAAe;AACxB,YAAMrF,QAAQmB,aAAa1D,SAAS4H,WAAW;AAI/C,YAAMC,eAAeC,sBAAsBnD,QAAQiD,WAAW;AAC9D,aAAO,KAAKZ,oBAAoB3G,UAAUwH,cAActF,OAAOqF,aAAaT,WAAW;KACxF,GACDY,KAAK,CAAC/H,UAAUgI,mBAAkB;AAChChI,eAASyH,KAAK,GAAGO,cAAc;AAC/B,aAAOhI;IACT,CAAC,GACDiI,eAAe,IAAiD,GAChEC,KAAI,GACJC,SAAUnI,cAAY;AACpB,UAAIA,aAAa,KAAM,QAAOoI,UAAQ1E,YAAY;AAIlD,YAAM2E,iBAAiBC,sBAAsBtI,QAAQ;AACrD,UAAI,OAAOnB,cAAc,eAAeA,WAAW;AAGjD0J,kCAA0BF,cAAc;;AAE1CG,kCAA4BH,cAAc;AAC1C,aAAOtI,GAAGsI,cAAc;KACzB,CAAC;;EAINhB,eACEhH,UACA2E,QACAtB,cACA7D,UACAc,QACAsF,gBACAkB,aAAmC;AAEnC,WAAOO,KAAK1C,MAAM,EAAEjB,KAClB4D,UAAW1C,OAAK;AACd,aAAO,KAAKwD,2BACVxD,EAAEyD,aAAarI,UACf2E,QACAC,GACAvB,cACA7D,UACAc,QACAsF,gBACAkB,WAAW,EACXpD,KACAkD,WAAYd,OAAU;AACpB,YAAIA,aAAae,SAAS;AACxB,iBAAOnH,GAAG,IAAI;;AAEhB,cAAMoG;OACP,CAAC;IAEN,CAAC,GACDwC,MAAOC,OAAgE,CAAC,CAACA,CAAC,GAC1E3B,WAAYd,OAAK;AACf,UAAI0C,aAAa1C,CAAC,GAAG;AACnB,YAAIb,iBAAiB5B,cAAc7D,UAAUc,MAAM,GAAG;AACpD,iBAAOZ,GAAG,IAAIwF,iBAAgB,CAAE;;AAElC,eAAO6C,UAAQ1E,YAAY;;AAE7B,YAAMyC;KACP,CAAC;;EAINsC,2BACEpI,UACA2E,QACAjG,OACA+J,YACAjJ,UACAc,QACAsF,gBACAkB,aAAmC;AAanC,QACEhC,UAAUpG,KAAK,MAAM4B,WACpBA,WAAWV,kBAAkB,CAACiF,eAAe4D,YAAYjJ,UAAUd,KAAK,IACzE;AACA,aAAOqJ,UAAQU,UAAU;;AAG3B,QAAI/J,MAAML,eAAeqK,QAAW;AAClC,aAAO,KAAKC,yBACV3I,UACAyI,YACA/J,OACAc,UACAc,QACAwG,WAAW;;AAIf,QAAI,KAAKlB,kBAAkBA,gBAAgB;AACzC,aAAO,KAAKgD,uCACV5I,UACAyI,YACA9D,QACAjG,OACAc,UACAc,QACAwG,WAAW;;AAIf,WAAOiB,UAAQU,UAAU;;EAGnBG,uCACN5I,UACAqD,cACAsB,QACAjG,OACAc,UACAc,QACAwG,aAAmC;AAEnC,UAAM;MAAC/D;MAASG;MAAYF;MAAkBG;MAAyBF;IAAiB,IACtFM,MAAMF,cAAc3E,OAAOc,QAAQ;AACrC,QAAI,CAACuD,QAAS,QAAOgF,UAAQ1E,YAAY;AAIzC,QAAI,OAAO3E,MAAML,eAAe,YAAYK,MAAML,WAAW,CAAC,MAAM,KAAK;AACvE,WAAKsH;AACL,UAAI,KAAKA,wBAAwBF,uBAAuB;AACtD,YAAIjH,WAAW;AACb,gBAAM,IAAID,aAAY,MAEpB,8DAA8D,KAAKW,OAAO,SAASR,MAAML,UAAU;kIAEvB;;AAGhF,aAAKuH,iBAAiB;;;AAG1B,UAAM7F,kBAAkB,IAAI0G,uBAC1BjH,UACA0D,YACA5B,OAAOoF,OAAO,mBAAI,KAAKxH,QAAQgB,YAAY,GAC3C,KAAKhB,QAAQiB,UACb0I,QAAQnK,KAAK,GACboG,UAAUpG,KAAK,GACfA,MAAMoK,aAAapK,MAAMqK,oBAAoB,MAC7CrK,OACAsK,WAAWtK,KAAK,CAAC;AAEnB,UAAMuK,YAAYC,aAAanJ,iBAAiB+G,aAAa,KAAKxB,yBAAyB;AAC3FvF,oBAAgBQ,SAASe,OAAOoF,OAAOuC,UAAU1I,MAAM;AACvDR,oBAAgBS,OAAOc,OAAOoF,OAAOuC,UAAUzI,IAAI;AACnD,UAAMM,UAAU,KAAK4E,eAAe7F,sBAClCmD,kBACAtE,MAAML,YACN8E,yBACApD,iBACAC,QAAQ;AAGV,WAAO,KAAK0F,eAAevG,mBAAmBT,OAAOoC,OAAO,EAAE4C,KAC5DoE,SAAUqB,iBAA6B;AACrC,aAAO,KAAKnC,eACVhH,UACA2E,QACAtB,cACA8F,YAAY5J,OAAO0D,iBAAiB,GACpC3C,QACA,OACAwG,WAAW;KAEd,CAAC;;EAIN6B,yBACE3I,UACAyI,YACA/J,OACAc,UACAc,QACAwG,aAAmC;AAEnC,UAAMsC,cAAchG,gBAAgBqF,YAAY/J,OAAOc,UAAUQ,UAAU,KAAKf,aAAa;AAC7F,QAAIP,MAAME,SAAS,MAAM;AAKvB6J,iBAAW9I,WAAW,CAAA;;AAGxB,WAAOyJ,YAAY1F,KACjB2F,UAAW/F,YAAU;AACnB,UAAI,CAACA,OAAOP,SAAS;AACnB,eAAOgF,UAAQU,UAAU;;AAG3BzI,iBAAWtB,MAAM2J,aAAarI;AAC9B,aAAO,KAAKsJ,eAAetJ,UAAUtB,OAAOc,QAAQ,EAAEkE,KACpD2F,UAAU,CAAC;QAAC1E,QAAQ4E;MAAW,MAAK;AAClC,cAAMC,gBAAgB9K,MAAM+K,mBAAmBzJ;AAE/C,cAAM;UAACkD;UAAYF;UAAkBC;QAAiB,IAAIK;AAC1D,cAAMoG,WAAW,IAAIjD,uBACnBzD,kBACAE,YACA5B,OAAOoF,OAAO,mBAAI,KAAKxH,QAAQgB,YAAY,GAC3C,KAAKhB,QAAQiB,UACb0I,QAAQnK,KAAK,GACboG,UAAUpG,KAAK,GACfA,MAAMoK,aAAapK,MAAMqK,oBAAoB,MAC7CrK,OACAsK,WAAWtK,KAAK,CAAC;AAEnB,cAAMuK,YAAYC,aAAaQ,UAAU5C,aAAa,KAAKxB,yBAAyB;AACpFoE,iBAASnJ,SAASe,OAAOoF,OAAOuC,UAAU1I,MAAM;AAChDmJ,iBAASlJ,OAAOc,OAAOoF,OAAOuC,UAAUzI,IAAI;AAE5C,cAAM;UAAC6C;UAAcgB;QAAc,IAAID,MACrCqE,YACAzF,kBACAC,mBACAsG,WAAW;AAGb,YAAIlF,eAAeP,WAAW,KAAKT,aAAaQ,YAAW,GAAI;AAC7D,iBAAO,KAAKkD,gBAAgByC,eAAeD,aAAalG,cAAcqG,QAAQ,EAAEhG,KAC9EpB,IAAK3C,cAAY;AACf,mBAAO,IAAIuG,SAASwD,UAAU/J,QAAQ;WACvC,CAAC;;AAIN,YAAI4J,YAAYzF,WAAW,KAAKO,eAAeP,WAAW,GAAG;AAC3D,iBAAOpE,GAAG,IAAIwG,SAASwD,UAAU,CAAA,CAAE,CAAC;;AAGtC,cAAMC,kBAAkB7E,UAAUpG,KAAK,MAAM4B;AAS7C,eAAO,KAAK0G,eACVwC,eACAD,aACAlG,cACAgB,gBACAsF,kBAAkB/J,iBAAiBU,QACnC,MACAoJ,QAAQ,EACRhG,KACApB,IAAKJ,WAAS;AACZ,iBAAO,IAAIgE,SAASwD,UAAUxH,iBAAiBgE,WAAW,CAAChE,KAAK,IAAI,CAAA,CAAE;SACvE,CAAC;OAEL,CAAC;KAEL,CAAC;;EAGEoH,eACNtJ,UACAtB,OACAc,UAAsB;AAEtB,QAAId,MAAMiB,UAAU;AAElB,aAAOD,GAAG;QAACiF,QAAQjG,MAAMiB;QAAUK;MAAQ,CAAC;;AAG9C,QAAItB,MAAMkL,cAAc;AAEtB,UAAIlL,MAAMmL,kBAAkBnB,QAAW;AACrC,eAAOhJ,GAAG;UAACiF,QAAQjG,MAAMmL;UAAe7J,UAAUtB,MAAM+K;QAAe,CAAC;;AAG1E,aAAOK,iBAAiB9J,UAAUtB,OAAOc,UAAU,KAAKP,aAAa,EAAEyE,KACrEoE,SAAUiC,sBAA6B;AACrC,YAAIA,kBAAkB;AACpB,iBAAO,KAAK3E,aAAawE,aAAa5J,UAAUtB,KAAK,EAAEgF,KACrDsG,IAAKC,SAA2B;AAC9BvL,kBAAMmL,gBAAgBI,IAAItF;AAC1BjG,kBAAM+K,kBAAkBQ,IAAIjK;WAC7B,CAAC;;AAGN,eAAOvB,aAAaC,KAAK;OAC1B,CAAC;;AAIN,WAAOgB,GAAG;MAACiF,QAAQ,CAAA;MAAI3E;IAAQ,CAAC;;AAEnC;AAED,SAASmI,4BAA4B+B,OAAyC;AAC5EA,QAAMC,KAAK,CAACC,GAAGC,MAAK;AAClB,QAAID,EAAEE,MAAMhK,WAAWV,eAAgB,QAAO;AAC9C,QAAIyK,EAAEC,MAAMhK,WAAWV,eAAgB,QAAO;AAC9C,WAAOwK,EAAEE,MAAMhK,OAAOiK,cAAcF,EAAEC,MAAMhK,MAAM;EACpD,CAAC;AACH;AAEA,SAASkK,mBAAmBC,MAAsC;AAChE,QAAMnG,SAASmG,KAAKH,MAAMlK;AAC1B,SAAOkE,UAAUA,OAAO1F,SAAS;AACnC;AAOA,SAASqJ,sBACPiC,OAA8C;AAE9C,QAAM5G,SAAkD,CAAA;AAExD,QAAMoH,cAAqD,oBAAIC,IAAG;AAElE,aAAWF,QAAQP,OAAO;AACxB,QAAI,CAACM,mBAAmBC,IAAI,GAAG;AAC7BnH,aAAO8D,KAAKqD,IAAI;AAChB;;AAGF,UAAMG,yBAAyBtH,OAAOuH,KACnCC,gBAAeL,KAAKH,MAAMlK,gBAAgB0K,WAAWR,MAAMlK,WAAW;AAEzE,QAAIwK,2BAA2BlC,QAAW;AACxCkC,6BAAuBjL,SAASyH,KAAK,GAAGqD,KAAK9K,QAAQ;AACrD+K,kBAAYK,IAAIH,sBAAsB;WACjC;AACLtH,aAAO8D,KAAKqD,IAAI;;;AAOpB,aAAWO,cAAcN,aAAa;AACpC,UAAM1C,iBAAiBC,sBAAsB+C,WAAWrL,QAAQ;AAChE2D,WAAO8D,KAAK,IAAIlB,SAAS8E,WAAWV,OAAOtC,cAAc,CAAC;;AAE5D,SAAO1E,OAAO2H,OAAQC,OAAM,CAACR,YAAYS,IAAID,CAAC,CAAC;AACjD;AAEA,SAAShD,0BAA0BgC,OAAyC;AAC1E,QAAMkB,QAA+C,CAAA;AACrDlB,QAAM1I,QAAS0J,OAAK;AAClB,UAAMG,0BAA0BD,MAAMF,EAAEZ,MAAMhK,MAAM;AACpD,QAAI+K,yBAAyB;AAC3B,YAAMC,IAAID,wBAAwBhL,IAAIiC,IAAKC,OAAMA,EAAEgJ,SAAQ,CAAE,EAAEC,KAAK,GAAG;AACvE,YAAMnM,IAAI6L,EAAEZ,MAAMjK,IAAIiC,IAAKC,OAAMA,EAAEgJ,SAAQ,CAAE,EAAEC,KAAK,GAAG;AACvD,YAAM,IAAIjN,aAAY,OAEnB,OAAOC,cAAc,eAAeA,cACnC,mDAAmD8M,CAAC,UAAUjM,CAAC,IAAI;;AAGzE+L,UAAMF,EAAEZ,MAAMhK,MAAM,IAAI4K,EAAEZ;EAC5B,CAAC;AACH;AAEA,SAASzB,QAAQnK,OAAY;AAC3B,SAAOA,MAAM8B,QAAQ,CAAA;AACvB;AAEA,SAASwI,WAAWtK,OAAY;AAC9B,SAAOA,MAAM+M,WAAW,CAAA;AAC1B;AC3kBgB,SAAAjG,UACdxF,UACAoF,cACAC,mBACAf,QACAoH,YACApG,2BAAiD;AAEjD,SAAOwC,SAAU6D,OACfxG,YACEnF,UACAoF,cACAC,mBACAf,QACAqH,EAAEC,cACFF,YACApG,yBAAyB,EACzB5B,KACApB,IAAI,CAAC;IAACkE,OAAOqF;IAAgBxF,MAAMyF;EAAiB,MAAK;AACvD,WAAO,iCAAIH,IAAJ;MAAOE;MAAgBC;IAAiB;GAChD,CAAC,CACH;AAEL;ACbgB,SAAAC,YACdzG,2BACAtF,UAA6B;AAE7B,SAAO8H,SAAU6D,OAAK;AACpB,UAAM;MACJE;MACAG,QAAQ;QAACC;MAAiB;IAAC,IACzBN;AAEJ,QAAI,CAACM,kBAAkBnI,QAAQ;AAC7B,aAAOpE,GAAGiM,CAAC;;AAKb,UAAMO,2BAA2B,IAAIvB,IAAIsB,kBAAkB3J,IAAK6J,WAAUA,MAAMzN,KAAK,CAAC;AACtF,UAAM0N,2BAA2B,oBAAIzB,IAAG;AACxC,eAAWjM,SAASwN,0BAA0B;AAC5C,UAAIE,yBAAyBjB,IAAIzM,KAAK,GAAG;AACvC;;AAGF,iBAAW2N,YAAYC,iBAAiB5N,KAAK,GAAG;AAC9C0N,iCAAyBrB,IAAIsB,QAAQ;;;AAGzC,QAAIE,kBAAkB;AACtB,WAAOlF,KAAK+E,wBAAwB,EAAE1I,KACpC4D,UAAW5I,WAAS;AAClB,UAAIwN,yBAAyBf,IAAIzM,KAAK,GAAG;AACvC,eAAO8N,WAAW9N,OAAOmN,gBAAiBvG,2BAA2BtF,QAAQ;aACxE;AACLtB,cAAM8B,OAAO0I,aAAaxK,OAAOA,MAAM+N,QAAQnH,yBAAyB,EAAEmG;AAC1E,eAAO/L,GAAG,MAAM;;IAEpB,CAAC,GACDsK,IAAI,MAAMuC,iBAAiB,GAC3BG,SAAS,CAAC,GACV5E,SAAU6E,OAAOJ,oBAAoBH,yBAAyBQ,OAAOlN,GAAGiM,CAAC,IAAIkB,KAAM,CAAC;EAExF,CAAC;AACH;AAKA,SAASP,iBAAiB5N,OAA6B;AACrD,QAAMoO,cAAcpO,MAAMiB,SAAS2C,IAAKJ,WAAUoK,iBAAiBpK,KAAK,CAAC,EAAE6K,KAAI;AAC/E,SAAO,CAACrO,OAAO,GAAGoO,WAAW;AAC/B;AAEA,SAASN,WACPQ,WACAC,WACA3H,2BACAtF,UAA6B;AAE7B,QAAMsE,SAAS0I,UAAU5M;AACzB,QAAMqL,UAAUuB,UAAUE;AAC1B,MAAI5I,QAAQ7D,UAAUiI,UAAa,CAACyE,eAAe7I,MAAM,GAAG;AAC1DmH,YAAQ2B,aAAa,IAAI9I,OAAO7D;;AAElC,SAAO4M,YAAY5B,SAASuB,WAAWC,WAAWjN,QAAQ,EAAE0D,KAC1DpB,IAAKgL,kBAAqB;AACxBN,cAAUO,gBAAgBD;AAC1BN,cAAUxM,OAAO0I,aAAa8D,WAAWA,UAAUP,QAAQnH,yBAAyB,EAAEmG;AACtF,WAAO;GACR,CAAC;AAEN;AAEA,SAAS4B,YACP5B,SACAuB,WACAC,WACAjN,UAA6B;AAE7B,QAAMkH,OAAOsG,YAAY/B,OAAO;AAChC,MAAIvE,KAAKpD,WAAW,GAAG;AACrB,WAAOpE,GAAG,CAAA,CAAE;;AAEd,QAAMc,OAAoC,CAAA;AAC1C,SAAO6G,KAAKH,IAAI,EAAExD,KAChBoE,SAAU2F,SACRC,YAAYjC,QAAQgC,GAAG,GAAGT,WAAWC,WAAWjN,QAAQ,EAAE0D,KACxD4E,MAAK,GACL0B,IAAKM,WAAc;AACjB,QAAIA,iBAAiBqD,iBAAiB;AACpC,YAAMC,2BAA2B,IAAIC,qBAAoB,GAAIvD,KAAK;;AAEpE9J,SAAKiN,GAAG,IAAInD;EACd,CAAC,CAAC,CACH,GAEHoC,SAAS,CAAC,GACVoB,MAAMtN,IAAI,GACVoG,WAAYd,OAAgB0C,aAAa1C,CAAU,IAAI+G,QAAQvO,WAAWwH,CAAC,CAAE,CAAC;AAElF;AAEA,SAAS4H,YACPK,gBACAf,WACAC,WACAjN,UAA6B;AAE7B,QAAMgO,kBAAkBC,wBAAwBjB,SAAS,KAAKhN;AAC9D,QAAMkO,WAAWC,2BAA2BJ,gBAAgBC,eAAe;AAC3E,QAAMI,gBAAgBF,SAASzC,UAC3ByC,SAASzC,QAAQuB,WAAWC,SAAS,IACrCtM,sBAAsBqN,iBAAiB,MAAME,SAASlB,WAAWC,SAAS,CAAC;AAC/E,SAAOoB,mBAAmBD,aAAa;AACzC;AC5HM,SAAUE,UACdC,MAA2C;AAE3C,SAAOlF,UAAW3H,OAAK;AACrB,UAAM8M,aAAaD,KAAK7M,CAAC;AACzB,QAAI8M,YAAY;AACd,aAAOnH,KAAKmH,UAAU,EAAE9K,KAAKpB,IAAI,MAAMZ,CAAC,CAAC;;AAE3C,WAAOhC,GAAGgC,CAAC;EACb,CAAC;AACH;ICWsB+M,sBAAAA,eAAa;;;;EAOjCC,WAAWhF,UAA6B;AACtC,QAAIiF;AACJ,QAAIjQ,QAA4CgL,SAASpK;AACzD,WAAOZ,UAAUgK,QAAW;AAC1BiG,kBAAY,KAAKC,yBAAyBlQ,KAAK,KAAKiQ;AACpDjQ,cAAQA,MAAMiB,SAASkL,KAAM3I,WAAUA,MAAM5B,WAAWV,cAAc;;AAExE,WAAO+O;;;;;;EAOTC,yBAAyBlF,UAAgC;AACvD,WAAOA,SAASlJ,KAAK4M,aAAa;;;;uDAtBhB;IAAA;EAAa;;;;MAAbyB,SAAAA,OADuB,MAAAC,OAAAC,oBAAa,GAAA;MAAAC,YACvB;IAAA,CAAA;EADuB;;;qFACvB,CAAA;UADlCC;IAAWC,MAAA,CAAA;MAACF,YAAY;MAAQG,YAAYA,MAAML,OAAOC,oBAAoB;IAAC,CAAC;;;AA+B1E,IAAOA,uBAAP,MAAOA,8BAA6BN,cAAa;EACrDzP,YAAqByB,OAAY;AAC/B,UAAK;AADc,SAAKA,QAALA;;;;;;;EASZ2O,YAAY1F,UAA6B;AAChD,UAAMjJ,QAAQ,KAAKiO,WAAWhF,QAAQ;AACtC,QAAIjJ,UAAUiI,QAAW;AACvB,WAAKjI,MAAM4O,SAAS5O,KAAK;;;;;8DAblB,SAAoB6O,KAAA,CAAA;IAAA;EAAA;EAApB,OAAA;AAAA,SAAAC,QAAA,mBAAA;aAAAR;MAAAF,SAAAE,sBAAAS;MAAAR,YAAoB;IAAA,CAAA;EADR;;;4FACQ,CAAA;UADhCC;WAAW;MAACD,YAAY;IAAM,CAAC;;;;;ICqNnBS,uBAAuB,IAAIC,eACtC,OAAOlR,cAAc,eAAeA,YAAY,kBAAkB,IAClE;EACEwQ,YAAY;EACZH,SAASA,OAAO,CAAA;AACjB,CAAA;IChQUc,8BAAAA,uBAAqB;;;+DAArB;IAAA;EAAqB;;;;MAArBC,WAAA,CAAA,CAAA,cAAA,CAAA;MAAAC,YAAA;MAAAC,UAAA,CAAA,mBAAA;;;;;sCAJgC;QAAA;MAAA;MAAAC,cAAA,CAAAC,YACjC;MAAAC,eAAA;IAAA,CAAA;EAAY;;;6FAGU,CAAA;UALjCC;IAAUhB,MAAA,CAAA;MACTiB,UAAU;MACVC,SAAS,CAACJ,YAAY;MACtBH,YAAY;IACb,CAAA;;;AAMK,SAAUQ,kBAAkBzL,GAAQ;AACxC,QAAMjF,WAAWiF,EAAEjF,YAAYiF,EAAEjF,SAAS2C,IAAI+N,iBAAiB;AAC/D,QAAMhR,IAAIM,WAAW,iCAAIiF,IAAJ;IAAOjF;EAAQ,KAAI,mBAAIiF;AAC5C,MACE,CAACvF,EAAEyJ,aACH,CAACzJ,EAAEiR,kBACF3Q,YAAYN,EAAEuK,iBACfvK,EAAEiB,UACFjB,EAAEiB,WAAWV,gBACb;AACAP,MAAEyJ,YAAY6G;;AAEhB,SAAOtQ;AACT;ACXa,IAAAkR,SAAS,IAAIb,eAA0BlR,YAAY,WAAW,EAAE;IAKhEgS,2BAAAA,oBAAkB;EAD/BxR,cAAA;AAEU,SAAAyR,mBAAmB,oBAAIC,QAAO;AAC9B,SAAAC,kBAAkB,oBAAID,QAAO;AAGpB,SAAAE,WAAW9B,OAAO+B,QAAQ;EA+D5C;EA7DCP,cAAc5R,OAAY;AACxB,QAAI,KAAK+R,iBAAiBK,IAAIpS,KAAK,GAAG;AACpC,aAAO,KAAK+R,iBAAiBK,IAAIpS,KAAK;eAC7BA,MAAMqK,kBAAkB;AACjC,aAAOrJ,GAAGhB,MAAMqK,gBAAgB;;AAGlC,QAAI,KAAKgI,qBAAqB;AAC5B,WAAKA,oBAAoBrS,KAAK;;AAEhC,UAAMsS,aAAa3C,mBAAmB3P,MAAM4R,cAAc,CAAE,EAAE5M,KAC5DpB,IAAI2O,wBAAwB,GAC5BjH,IAAKlB,eAAa;AAChB,UAAI,KAAKoI,mBAAmB;AAC1B,aAAKA,kBAAkBxS,KAAK;;AAE9B,OAAC,OAAOF,cAAc,eAAeA,cACnC2S,iBAAiBzS,MAAME,QAAQ,IAAIkK,SAAS;AAC9CpK,YAAMqK,mBAAmBD;IAC3B,CAAC,GACDsI,SAAS,MAAK;AACZ,WAAKX,iBAAiBY,OAAO3S,KAAK;KACnC,CAAC;AAGJ,UAAM4S,SAAS,IAAIC,sBAAsBP,YAAY,MAAM,IAAIQ,QAAO,CAAiB,EAAE9N,KACvF+N,SAAQ,CAAE;AAEZ,SAAKhB,iBAAiBiB,IAAIhT,OAAO4S,MAAM;AACvC,WAAOA;;EAGT1H,aAAa+H,gBAA0BjT,OAAY;AACjD,QAAI,KAAKiS,gBAAgBG,IAAIpS,KAAK,GAAG;AACnC,aAAO,KAAKiS,gBAAgBG,IAAIpS,KAAK;eAC5BA,MAAMmL,eAAe;AAC9B,aAAOnK,GAAG;QAACiF,QAAQjG,MAAMmL;QAAe7J,UAAUtB,MAAM+K;MAAe,CAAC;;AAG1E,QAAI,KAAKsH,qBAAqB;AAC5B,WAAKA,oBAAoBrS,KAAK;;AAEhC,UAAMkT,yBAAyBhI,aAC7BlL,OACA,KAAKkS,UACLe,gBACA,KAAKT,iBAAiB;AAExB,UAAMF,aAAaY,uBAAuBlO,KACxC0N,SAAS,MAAK;AACZ,WAAKT,gBAAgBU,OAAO3S,KAAK;KAClC,CAAC;AAGJ,UAAM4S,SAAS,IAAIC,sBACjBP,YACA,MAAM,IAAIQ,QAAO,CAAsB,EACvC9N,KAAK+N,SAAQ,CAAE;AACjB,SAAKd,gBAAgBe,IAAIhT,OAAO4S,MAAM;AACtC,WAAOA;;;;4DAlEE;IAAA;EAAkB;EAAlB,OAAA;AAAA,SAAA/B,QAAA,mBAAA;aAAAiB;MAAA3B,SAAA2B,oBAAAhB;MAAAR,YAAkB;IAAA,CAAA;EADN;;;0FACM,CAAA;UAD9BC;WAAW;MAACD,YAAY;IAAM,CAAC;;;AA+E1B,SAAUpF,aACdlL,OACAkS,UACAe,gBACAT,mBAAsC;AAEtC,SAAO7C,mBAAmB3P,MAAMkL,aAAa,CAAE,EAAElG,KAC/CpB,IAAI2O,wBAAwB,GAC5BnJ,SAAU6D,OAAK;AACb,QAAIA,aAAakG,qBAAmBC,MAAMC,QAAQpG,CAAC,GAAG;AACpD,aAAOjM,GAAGiM,CAAC;WACN;AACL,aAAOtE,KAAKuJ,SAASoB,mBAAmBrG,CAAC,CAAC;;EAE9C,CAAC,GACDrJ,IAAK2P,qBAAkD;AACrD,QAAIf,mBAAmB;AACrBA,wBAAkBxS,KAAK;;AAIzB,QAAIsB;AACJ,QAAIkS;AACJ,QAAIC,8BAA8B;AAClC,QAAIL,MAAMC,QAAQE,eAAe,GAAG;AAClCC,kBAAYD;AACZE,oCAA8B;WACzB;AACLnS,iBAAWiS,gBAAgBG,OAAOT,cAAc,EAAE3R;AAKlDkS,kBAAYlS,SAAS8Q,IAAIP,QAAQ,CAAA,GAAI;QAAC8B,UAAU;QAAMC,MAAM;MAAI,CAAC,EAAEvF,KAAI;;AAEzE,UAAMpI,SAASuN,UAAU5P,IAAI+N,iBAAiB;AAC9C,KAAC,OAAO7R,cAAc,eAAeA,cACnC+T,eAAe5N,QAAQjG,MAAME,MAAMuT,2BAA2B;AAChE,WAAO;MAACxN;MAAQ3E;IAAQ;GACzB,CAAC;AAEN;AAEA,SAASwS,uBAA0BlI,OAA2B;AAI5D,SAAOA,SAAS,OAAOA,UAAU,YAAY,aAAaA;AAC5D;AAEA,SAAS2G,yBAA4BwB,OAA2B;AAG9D,SAAOD,uBAAuBC,KAAK,IAAIA,MAAM,SAAS,IAAIA;AAC5D;ICzJsBC,4BAAAA,qBAAmB;;;6DAAnB;IAAA;EAAmB;;;;MAAnB7D,SAAAA,OADuB,MAAAC,OAAA6D,0BAAa,GAAA;MAAA3D,YACjB;IAAA,CAAA;EADiB;;;2FACjB,CAAA;UADxCC;IAAWC,MAAA,CAAA;MAACF,YAAY;MAAQG,YAAYA,MAAML,OAAO6D,0BAA0B;IAAC,CAAC;;;IA4BzEA,mCAAAA,4BAA0B;EACrCC,iBAAiBvS,KAAY;AAC3B,WAAO;;EAETwS,QAAQxS,KAAY;AAClB,WAAOA;;EAETyS,MAAMC,YAAqBC,UAAiB;AAC1C,WAAOD;;;;oEARE;IAAA;EAA0B;EAA1B,OAAA;AAAA,SAAAxD,QAAA,mBAAA;aAAAoD;MAAA9D,SAAA8D,4BAAAnD;MAAAR,YAA0B;IAAA,CAAA;EADd;;;kGACc,CAAA;UADtCC;WAAW;MAACD,YAAY;IAAM,CAAC;;;ACzBzB,IAAMiE,yBAAyB,IAAIvD,eACxClR,YAAY,2BAA2B,EAAE;AAEpC,IAAM0U,0BAA0B,IAAIxD,eAEzClR,YAAY,4BAA4B,EAAE;SAyE5B2U,qBACdnT,UACAqH,OACA+L,IAA0B;AAE1B,QAAMC,oBAAoBrT,SAAS8Q,IAAIoC,uBAAuB;AAC9D,QAAMI,WAAWtT,SAAS8Q,IAAIyC,QAAQ;AAEtC,SAAOvT,SAAS8Q,IAAI0C,MAAM,EAAEC,kBAAkB,MAAK;AACjD,QAAI,CAACH,SAASI,uBAAuBL,kBAAkBM,oBAAoB;AACzEN,wBAAkBM,qBAAqB;AAIvC,aAAO,IAAIC,QAASnI,aAAYoI,WAAWpI,OAAO,CAAC;;AAGrD,QAAIqI;AACJ,UAAMC,wBAAwB,IAAIH,QAAenI,aAAW;AAC1DqI,qCAA+BrI;IACjC,CAAC;AACD,UAAMuI,aAAaV,SAASI,oBAAoB,MAAK;AACnDI,mCAA4B;AAK5B,aAAOG,oBAAoBjU,QAAQ;IACrC,CAAC;AACD,UAAM;MAACkU;IAAuB,IAAIb;AAClC,QAAIa,yBAAyB;AAC3BvT,4BAAsBX,UAAU,MAAMkU,wBAAwB;QAACF;QAAY3M,MAAAA;QAAM+L;MAAE,CAAC,CAAC;;AAEvF,WAAOW;EACT,CAAC;AACH;AAKA,SAASE,oBAAoBjU,UAAkB;AAC7C,SAAO,IAAI4T,QAAenI,aAAW;AAInC0I,oBAAgB;MAACC,MAAMA,MAAMP,WAAWpI,OAAO;IAAC,GAAG;MAACzL;IAAQ,CAAC;EAC/D,CAAC;AACH;ACiMO,IAAMqU,2BAA2B,IAAI3E,eAE1C,OAAOlR,cAAc,eAAeA,YAAY,6BAA6B,EAAE;IAGpE8V,8BAAAA,uBAAqB;EA6BhC,IAAIC,yBAAsB;AACxB,WAAO,KAAKC,iBAAiB;;EAa/BxV,cAAA;AA1CA,SAAiByV,oBAAsB;AACvC,SAAiBC,oBAAgC;AACjD,SAAwBC,2BAAsB;AAMrC,SAAAC,SAAS,IAAIpD,QAAO;AAIpB,SAAAqD,yBAAyB,IAAIrD,QAAO;AAC5B,SAAApM,eAAe0J,OAAO0B,kBAAkB;AACxC,SAAAsE,sBAAsBhG,OAAOiG,mBAAmB;AAChD,SAAA9V,gBAAgB6P,OAAOkG,aAAa;AACpC,SAAAC,eAAenG,OAAOoG,sBAAsB;AAC5C,SAAAC,WAAWrG,OAAOsG,QAAQ;AAC1B,SAAAC,sBAAsBvG,OAAOwG,cAAc;MAACjD,UAAU;IAAI,CAAC,MAAM;AACjE,SAAAkD,gBAAgCzG,OAAOL,aAAa;AACpD,SAAA+G,UAAU1G,OAAOW,sBAAsB;MAAC4C,UAAU;IAAI,CAAC,KAAK,CAAA;AAC5D,SAAyB/M,4BACxC,KAAKkQ,QAAQlQ,6BAA6B;AAC3B,SAAAmQ,sBAAsB3G,OAAO4D,mBAAmB;AAChD,SAAoBS,uBAAGrE,OAAOmE,wBAAwB;MAACZ,UAAU;IAAI,CAAC;AACtE,SAAsBqD,yBAAG5G,OAAOuF,0BAA0B;MAAChC,UAAU;IAAI,CAAC;AAE3F,SAAYmC,eAAG;AAWf,SAAkBmB,qBAA2B,MAAMjW,GAAG,MAAM;AAE5D,SAAiB2F,oBAAqB;AAGpC,UAAMuQ,cAAehR,OAAa,KAAKgQ,OAAOrG,KAAK,IAAIsH,qBAAqBjR,CAAC,CAAC;AAC9E,UAAMkR,YAAalR,OAAa,KAAKgQ,OAAOrG,KAAK,IAAIwH,mBAAmBnR,CAAC,CAAC;AAC1E,SAAKQ,aAAa8L,oBAAoB4E;AACtC,SAAK1Q,aAAa2L,sBAAsB6E;;EAG1CI,WAAQ;AACN,SAAKC,aAAaD,SAAQ;;EAG5BE,wBACEC,SAaC;AAED,UAAMC,KAAK,EAAE,KAAK5B;AAClB,SAAKyB,aAAa1H,KAAK,gDAAI,KAAK0H,YAAY3L,QAAU6L,UAA/B;MAAwCC;IAAE,EAAC;;EAGpEC,iBACEC,QACAC,gBACAC,oBAA+B;AAE/B,SAAKP,cAAc,IAAIQ,gBAAsC;MAC3DL,IAAI;MACJM,gBAAgBH;MAChBI,eAAeJ;MACf3K,cAAc,KAAK6J,oBAAoB5C,QAAQ0D,cAAc;MAC7DzK,mBAAmB,KAAK2J,oBAAoB5C,QAAQ0D,cAAc;MAClEK,QAAQL;MACRM,QAAQ,CAAA;MACRpL,SAASA,MAAK;MAAA;MACdqL,QAAQA,MAAK;MAAA;MACbC,SAASnD,QAAQnI,QAAQ,IAAI;MAC7BuL,QAAQC;MACRC,eAAe;MACfnX,iBAAiByW,mBAAmB9M;MACpCmC,gBAAgB;MAChBsL,oBAAoBX;MACpBY,mBAAmB;MACnBpL,QAAQ;QAACC,mBAAmB,CAAA;QAAIoL,qBAAqB,CAAA;MAAE;MACvDC,cAAc;IACf,CAAA;AACD,WAAO,KAAKrB,YAAYvS;MACtBuH,OAAQU,OAAMA,EAAEyK,OAAO,CAAC;;MAGxB9T,IACGqJ,OACE,iCACIA,IADJ;QAECC,cAAc,KAAK6J,oBAAoB5C,QAAQlH,EAAEiL,MAAM;MACxD,EAAyB;;MAI9BvN,UAAWkO,4BAA0B;AACnC,YAAIC,YAAY;AAChB,YAAIC,UAAU;AACd,eAAO/X,GAAG6X,sBAAsB,EAAE7T;UAChC2F,UAAWsC,OAAK;AAKd,gBAAI,KAAK6I,eAAe+C,uBAAuBnB,IAAI;AACjD,oBAAMsB,qBACJ,OAAOlZ,cAAc,eAAeA,YAChC,iBAAiB+Y,uBAAuBnB,EAAE,8CAA8C,KAAK5B,YAAY,KACzG;AACN,mBAAKmD,2BACHJ,wBACAG,oBACA7Y,2BAA2B+Y,yBAAyB;AAEtD,qBAAO/K;;AAET,iBAAK6H,oBAAoB6C;AAEzB,iBAAK9C,oBAAoB;cACvB2B,IAAIzK,EAAEyK;cACNyB,YAAYlM,EAAEiL;cACdhL,cAAcD,EAAEC;cAChBkM,kBACE,OAAOnM,EAAEkL,OAAOkB,eAAe,WAC3B,KAAK9Y,cAAc+B,MAAM2K,EAAEkL,OAAOkB,UAAU,IAC5CpM,EAAEkL,OAAOkB;cACfC,SAASrM,EAAEqL;cACXH,QAAQlL,EAAEkL;cACVoB,oBAAoB,CAAC,KAAKtD,2BACtB,OACA,iCACK,KAAKA,2BADV;gBAEEsD,oBAAoB;cACrB;;AAEP,kBAAMC,gBACJ,CAAC5B,OAAO6B,aAAa,KAAKC,wBAAuB,KAAM,KAAKC,oBAAmB;AAEjF,kBAAMC,sBAAsB3M,EAAEkL,OAAOyB,uBAAuBhC,OAAOgC;AACnE,gBAAI,CAACJ,iBAAiBI,wBAAwB,UAAU;AACtD,oBAAMC,SACJ,OAAO/Z,cAAc,eAAeA,YAChC,iBAAiBmN,EAAEiL,MAAM,mEACzB;AACN,mBAAKhC,OAAOrG,KACV,IAAIiK,kBACF7M,EAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,EAAEiL,MAAM,GACrC2B,QACAE,sBAAsBC,wBAAwB,CAC/C;AAEH/M,gBAAEF,QAAQ,KAAK;AACf,qBAAOoB;;AAGT,gBAAI,KAAK4I,oBAAoB7C,iBAAiBjH,EAAEiL,MAAM,GAAG;AACvD,qBAAOlX,GAAGiM,CAAC,EAAEjI;;gBAEX2F,UAAWsC,CAAAA,OAAK;AACd,wBAAMqI,aAAa,KAAKiC,aAAa0C,SAAQ;AAC7C,uBAAK/D,OAAOrG,KACV,IAAIqK,gBACFjN,GAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,GAAEC,YAAY,GAC3CD,GAAEqL,QACFrL,GAAEuL,aAAa,CAChB;AAEH,sBAAIlD,eAAe,KAAKiC,aAAa0C,SAAQ,GAAI;AAC/C,2BAAO9L;;AAKT,yBAAO+G,QAAQnI,QAAQE,EAAC;gBAC1B,CAAC;;gBAGDnG,UACE,KAAKsP,qBACL,KAAK1P,cACL,KAAKC,mBACLiR,OAAOhS,QACP,KAAKrF,eACL,KAAKqG,yBAAyB;;gBAIhC0E,IAAK2B,CAAAA,OAAK;AACR4L,yCAAuB1L,iBAAiBF,GAAEE;AAC1C0L,yCAAuBzL,oBAAoBH,GAAEG;AAC7C,uBAAK2I,oBAAoB,iCACpB,KAAKA,oBADe;oBAEvBoE,UAAUlN,GAAEG;;AAId,wBAAMgN,mBAAmB,IAAIC,iBAC3BpN,GAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,GAAEC,YAAY,GAC3C,KAAK3M,cAAcsH,UAAUoF,GAAEG,iBAAkB,GACjDH,GAAEE,cAAe;AAEnB,uBAAK+I,OAAOrG,KAAKuK,gBAAgB;iBAClC;cAAC;uBAGJZ,iBACA,KAAKzC,oBAAoB7C,iBAAiBjH,EAAEgL,aAAa,GACzD;AAIA,oBAAM;gBAACP;gBAAIxK;gBAAcoL;gBAAQE;gBAAeL;cAAM,IAAIlL;AAC1D,oBAAMqN,WAAW,IAAIJ,gBACnBxC,IACA,KAAKnX,cAAcsH,UAAUqF,YAAY,GACzCoL,QACAE,aAAa;AAEf,mBAAKtC,OAAOrG,KAAKyK,QAAQ;AACzB,oBAAMnN,iBAAiBoN,iBAAiB,KAAK5T,iBAAiB,EAAEqE;AAEhE,mBAAKgL,oBAAoB6C,yBAAyB,iCAC7C5L,IAD6C;gBAEhDE;gBACAC,mBAAmBF;gBACnBiL,QAAQ,iCAAIA,SAAJ;kBAAYqC,oBAAoB;kBAAOC,YAAY;gBAAK;;AAElE,mBAAK1E,kBAAmBoE,WAAWjN;AACnC,qBAAOlM,GAAG6X,sBAAsB;mBAC3B;AAML,oBAAMgB,SACJ,OAAO/Z,cAAc,eAAeA,YAChC,4FACsCmN,EAAEgL,aAAa,mBAAmBhL,EAAEiL,MAAM,0BAChF;AACN,mBAAKhC,OAAOrG,KACV,IAAIiK,kBACF7M,EAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,EAAEC,YAAY,GAC3C2M,QACAE,sBAAsBW,4BAA4B,CACnD;AAEHzN,gBAAEF,QAAQ,KAAK;AACf,qBAAOoB;;UAEX,CAAC;;UAGD7C,IAAK2B,OAAK;AACR,kBAAM0N,cAAc,IAAIC,iBACtB3N,EAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,EAAEC,YAAY,GAC3C,KAAK3M,cAAcsH,UAAUoF,EAAEG,iBAAkB,GACjDH,EAAEE,cAAe;AAEnB,iBAAK+I,OAAOrG,KAAK8K,WAAW;UAC9B,CAAC;UAED/W,IAAKqJ,OAAK;AACR,iBAAK+I,oBAAoB6C,yBAAyB,iCAC7C5L,IAD6C;cAEhDK,QAAQuN,kBAAkB5N,EAAEE,gBAAiBF,EAAE5L,iBAAiB,KAAKkV,YAAY;;AAEnF,mBAAOsC;UACT,CAAC;UAEDiC,YAAY,KAAK1E,qBAAsB2E,SAAe,KAAK7E,OAAOrG,KAAKkL,GAAG,CAAC;UAC3EzP,IAAK2B,OAAK;AACR4L,mCAAuBD,eAAe3L,EAAE2L;AACxC,gBAAI3L,EAAE2L,gBAAgB,OAAO3L,EAAE2L,iBAAiB,WAAW;AACzD,oBAAM1J,2BAA2B,KAAK3O,eAAe0M,EAAE2L,YAAY;;AAGrE,kBAAMoC,YAAY,IAAIC,eACpBhO,EAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,EAAEC,YAAY,GAC3C,KAAK3M,cAAcsH,UAAUoF,EAAEG,iBAAkB,GACjDH,EAAEE,gBACF,CAAC,CAACF,EAAE2L,YAAY;AAElB,iBAAK1C,OAAOrG,KAAKmL,SAAS;UAC5B,CAAC;UAEDzO,OAAQU,OAAK;AACX,gBAAI,CAACA,EAAE2L,cAAc;AACnB,mBAAKK,2BAA2BhM,GAAG,IAAI9M,2BAA2BC,aAAa;AAC/E,qBAAO;;AAET,mBAAO;UACT,CAAC;;UAGDwP,UAAW3C,OAAK;AACd,gBAAIA,EAAEK,OAAOC,kBAAkBnI,QAAQ;AACrC,qBAAOpE,GAAGiM,CAAC,EAAEjI,KACXsG,IAAK2B,CAAAA,OAAK;AACR,sBAAMiO,eAAe,IAAIC,aACvBlO,GAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,GAAEC,YAAY,GAC3C,KAAK3M,cAAcsH,UAAUoF,GAAEG,iBAAkB,GACjDH,GAAEE,cAAe;AAEnB,qBAAK+I,OAAOrG,KAAKqL,YAAY;cAC/B,CAAC,GACDvQ,UAAWsC,CAAAA,OAAK;AACd,oBAAImO,eAAe;AACnB,uBAAOpa,GAAGiM,EAAC,EAAEjI,KACXqI,YAAY,KAAKzG,2BAA2B,KAAKwP,mBAAmB,GACpE9K,IAAI;kBACFuE,MAAMA,MAAOuL,eAAe;kBAC5B9D,UAAUA,MAAK;AACb,wBAAI,CAAC8D,cAAc;AACjB,2BAAKnC,2BACHhM,IACA,OAAOnN,cAAc,eAAeA,YAChC,uDACA,IACJK,2BAA2Bkb,kBAAkB;;;gBAIpD,CAAA,CAAC;cAEN,CAAC,GACD/P,IAAK2B,CAAAA,OAAK;AACR,sBAAMqO,aAAa,IAAIC,WACrBtO,GAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,GAAEC,YAAY,GAC3C,KAAK3M,cAAcsH,UAAUoF,GAAEG,iBAAkB,GACjDH,GAAEE,cAAe;AAEnB,qBAAK+I,OAAOrG,KAAKyL,UAAU;eAC5B,CAAC;;AAGN,mBAAOtR;UACT,CAAC;;UAGD4F,UAAW3C,OAA2B;AACpC,kBAAMuO,iBAAkBxb,WAA0D;AAChF,oBAAMyb,UAAmC,CAAA;AACzC,kBAAIzb,MAAM0B,aAAakQ,iBAAiB,CAAC5R,MAAM0B,YAAY2I,kBAAkB;AAC3EoR,wBAAQ/S,KACN,KAAKhC,aAAakL,cAAc5R,MAAM0B,WAAW,EAAEsD,KACjDsG,IAAKoQ,qBAAmB;AACtB1b,wBAAMoK,YAAYsR;gBACpB,CAAC,GACD9X,IAAI,MAAM,MAAM,CAAC,CAClB;;AAGL,yBAAWJ,SAASxD,MAAMiB,UAAU;AAClCwa,wBAAQ/S,KAAK,GAAG8S,eAAehY,KAAK,CAAC;;AAEvC,qBAAOiY;YACT;AACA,mBAAOE,cAAcH,eAAevO,EAAEE,eAAgBvM,IAAI,CAAC,EAAEoE,KAC3DkE,eAAe,IAAI,GACnB0S,KAAK,CAAC,CAAC;UAEX,CAAC;UAEDhM,UAAU,MAAM,KAAKqH,mBAAkB,CAAE;UAEzCtM,UAAU,MAAK;AACb,kBAAM;cAACtJ;cAAiB8L;YAAc,IAAI0L;AAC1C,kBAAMxD,wBAAwB,KAAKZ,uBACjC,KAAK2B,qBACL/U,gBAAgBT,MAChBuM,eAAgBvM,IAAI;AAKtB,mBAAOyU,wBACH1M,KAAK0M,qBAAqB,EAAErQ,KAAKpB,IAAI,MAAMiV,sBAAsB,CAAC,IAClE7X,GAAG6X,sBAAsB;UAC/B,CAAC;UAEDjV,IAAKqJ,OAA2B;AAC9B,kBAAMyL,oBAAoBmD,kBACxBjE,OAAOkE,oBACP7O,EAAEE,gBACFF,EAAEwL,kBAAkB;AAEtB,iBAAKzC,oBAAoB6C,yBAAyB,iCAAI5L,IAAJ;cAAOyL;YAAiB;AAC1E,iBAAK3C,kBAAmB2C,oBAAoBA;AAC5C,mBAAOG;UACT,CAAC;UAEDvN,IAAI,MAAK;AACP,iBAAK4K,OAAOrG,KAAK,IAAIkM,qBAAoB,CAAE;UAC7C,CAAC;UAEDC,eACE,KAAKzF,cACLqB,OAAOkE,oBACNf,SAAe,KAAK7E,OAAOrG,KAAKkL,GAAG,GACpC,KAAKpE,mBAAmB;;;;UAM1BiF,KAAK,CAAC;UAENtQ,IAAI;YACFuE,MAAO5C,OAA2B;AAChC6L,0BAAY;AACZ,mBAAK7C,2BAA2B,KAAKF;AACrC,mBAAKG,OAAOrG,KACV,IAAIoM,cACFhP,EAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,EAAEC,YAAY,GAC3C,KAAK3M,cAAcsH,UAAUoF,EAAEG,iBAAkB,CAAC,CACnD;AAEH,mBAAKyJ,eAAenG,YAAYzD,EAAEyL,kBAAmB1N,QAAQ;AAC7DiC,gBAAEF,QAAQ,IAAI;;YAEhBuK,UAAUA,MAAK;AACbwB,0BAAY;;WAEf;;;;;;;;UASDoD,UACE,KAAK/F,uBAAuBnR,KAC1BsG,IAAK6Q,SAAO;AACV,kBAAMA;UACR,CAAC,CAAC,CACH;UAGHzJ,SAAS,MAAK;AAOZ,gBAAI,CAACoG,aAAa,CAACC,SAAS;AAC1B,oBAAMqD,oBACJ,OAAOtc,cAAc,eAAeA,YAChC,iBAAiB+Y,uBAAuBnB,EAAE,8CAA8C,KAAK5B,YAAY,KACzG;AACN,mBAAKmD,2BACHJ,wBACAuD,mBACAjc,2BAA2B+Y,yBAAyB;;AAKxD,gBAAI,KAAKlD,mBAAmB0B,OAAOmB,uBAAuBnB,IAAI;AAC5D,mBAAK3B,oBAAoB;AACzB,mBAAKC,oBAAoB;;UAE7B,CAAC;UACD9N,WAAYd,OAAK;AACf2R,sBAAU;AAGV,gBAAIsD,2BAA2BjV,CAAC,GAAG;AACjC,mBAAK8O,OAAOrG,KACV,IAAIyM,iBACFzD,uBAAuBnB,IACvB,KAAKnX,cAAcsH,UAAUgR,uBAAuB3L,YAAY,GAChE9F,EAAEmV,SACFnV,EAAEoV,gBAAgB,CACnB;AAKH,kBAAI,CAACC,sCAAsCrV,CAAC,GAAG;AAC7CyR,uCAAuB9L,QAAQ,KAAK;qBAC/B;AACL,qBAAKmJ,OAAOrG,KAAK,IAAI6M,gBAAgBtV,EAAEzF,KAAKyF,EAAEuV,yBAAyB,CAAC;;mBAKrE;AACL,oBAAMC,kBAAkB,IAAIC,gBAC1BhE,uBAAuBnB,IACvB,KAAKnX,cAAcsH,UAAUgR,uBAAuB3L,YAAY,GAChE9F,GACAyR,uBAAuB1L,kBAAkBnD,MAAS;AAGpD,kBAAI;AACF,sBAAM8S,+BAA+B7a,sBACnC,KAAKmU,qBACL,MAAM,KAAKY,yBAAyB4F,eAAe,CAAC;AAGtD,oBAAIE,wCAAwC7N,iBAAiB;AAC3D,wBAAM;oBAACsN;oBAASC;kBAAgB,IAAItN,2BAClC,KAAK3O,eACLuc,4BAA4B;AAE9B,uBAAK5G,OAAOrG,KACV,IAAIyM,iBACFzD,uBAAuBnB,IACvB,KAAKnX,cAAcsH,UAAUgR,uBAAuB3L,YAAY,GAChEqP,SACAC,gBAAgB,CACjB;AAEH,uBAAKtG,OAAOrG,KACV,IAAI6M,gBACFI,6BAA6Bnd,YAC7Bmd,6BAA6BH,yBAAyB,CACvD;uBAEE;AACL,uBAAKzG,OAAOrG,KAAK+M,eAAe;AAGhC,wBAAMG,qBAAqBnF,OAAOoF,aAAa5V,CAAC;AAChDyR,yCAAuB9L,QAAQ,CAAC,CAACgQ,kBAAkB;;uBAE9CE,IAAI;AAUX,oBAAI,KAAKnG,QAAQoG,iCAAiC;AAChDrE,yCAAuB9L,QAAQ,KAAK;uBAC/B;AACL8L,yCAAuBT,OAAO6E,EAAE;;;;AAKtC,mBAAO9O;WACR;QAAC;OAGL;IAAC;;EAIE8K,2BACNhM,GACA4M,QACAsD,MAAgC;AAEhC,UAAMC,YAAY,IAAId,iBACpBrP,EAAEyK,IACF,KAAKnX,cAAcsH,UAAUoF,EAAEC,YAAY,GAC3C2M,QACAsD,IAAI;AAEN,SAAKjH,OAAOrG,KAAKuN,SAAS;AAC1BnQ,MAAEF,QAAQ,KAAK;;;;;;EAOT2M,0BAAuB;AAO7B,WACE,KAAK1D,mBAAmB9I,aAAaL,SAAQ,MAC7C,KAAKmJ,mBAAmBgC,eAAenL,SAAQ;;;;;;;EAS3C8M,sBAAmB;AAIzB,UAAM0D,oBAAoB,KAAKtG,oBAAoB5C,QACjD,KAAK5T,cAAc+B,MAAM,KAAKmU,SAASvW,KAAK,IAAI,CAAC,CAAC;AAEpD,UAAMkZ,mBACJ,KAAKrD,mBAAmBqD,oBAAoB,KAAKrD,mBAAmB7I;AACtE,WACEmQ,kBAAkBxQ,SAAQ,MAAOuM,kBAAkBvM,SAAQ,KAC3D,CAAC,KAAKkJ,mBAAmBoC,OAAOqC;;;;+DAtnBzB;IAAA;EAAqB;EAArB,OAAA;AAAA,SAAA3J,QAAA,mBAAA;aAAA+E;MAAAzF,SAAAyF,uBAAA9E;MAAAR,YAAqB;IAAA,CAAA;EADT;;;6FACS,CAAA;UADjCC;WAAW;MAACD,YAAY;IAAM,CAAC;;;AA4nB1B,SAAUgN,6BAA6BhF,QAAyB;AACpE,SAAOA,WAAWC;AACpB;IC56BsBgF,2BAAAA,oBAAkB;;;4DAAlB;IAAA;EAAkB;;;;MAAlBpN,SAAAA,OADuB,MAAAC,OAAAoN,yBAAa,GAAA;MAAAlN,YAClB;IAAA,CAAA;EADkB;;;0FAClB,CAAA;UADvCC;IAAWC,MAAA,CAAA;MAACF,YAAY;MAAQG,YAAYA,MAAML,OAAOoN,yBAAyB;IAAC,CAAC;;;IAuC/DC,+BAAsB;;;;;EAK1CC,aAAa1d,OAA6B;AACxC,WAAO;;;;;EAMT2d,MAAM3d,OAA+B4d,cAAiC;EAAA;;EAGtEC,aAAa7d,OAA6B;AACxC,WAAO;;;EAIT8d,SAAS9d,OAA6B;AACpC,WAAO;;;;;;;EAQT+d,iBAAiBC,QAAgCC,MAA4B;AAC3E,WAAOD,OAAOtc,gBAAgBuc,KAAKvc;;AAEtC;AAGK,IAAO8b,4BAAP,MAAOA,mCAAkCC,uBAAsB;;;;;oJAAxD,IAAAS,qBAAA,0BAAA;MAAA;IAAA,GAAA;EAAyB;EAAzB,OAAA;AAAA,SAAArN,QAAA,mBAAA;aAAA2M;MAAArN,SAAAqN,2BAAA1M;MAAAR,YAAyB;IAAA,CAAA;EADb;;;iGACa,CAAA;UADrCC;WAAW;MAACD,YAAY;IAAM,CAAC;;;IClFV6N,qBAAAA,cAAY;;;sDAAZ;IAAA;EAAY;;;;MAAZhO,SAAAA,OADuB,MAAAC,OAAAgO,mBAAa,GAAA;MAAA9N,YACxB;IAAA,CAAA;EADwB;;;oFACxB,CAAA;UADjCC;IAAWC,MAAA,CAAA;MAACF,YAAY;MAAQG,YAAYA,MAAML,OAAOgO,mBAAmB;IAAC,CAAC;;;AA+DzE,IAAOA,sBAAP,MAAOA,6BAA4BD,aAAY;EADrD7d,cAAA;;AAEmB,SAAAmW,WAAWrG,OAAOsG,QAAQ;AAC1B,SAAAnW,gBAAgB6P,OAAOkG,aAAa;AACpC,SAAAQ,UAAU1G,OAAOW,sBAAsB;MAAC4C,UAAU;IAAI,CAAC,KAAK,CAAA;AAC5D,SAA4B0K,+BAC3C,KAAKvH,QAAQuH,gCAAgC;AAEvC,SAAAtH,sBAAsB3G,OAAO4D,mBAAmB;AAChD,SAAiBsK,oBAAG,KAAKxH,QAAQwH,qBAAqB;AAEtD,SAAAtG,iBAAiB,IAAI9V,QAAO;AAM5B,SAAAqc,aAAa,KAAKvG;AAclB,SAAawG,gBAAW;AACxB,SAAgBC,mBAAW;AAkB3B,SAAAC,cAAcnE,iBAAiB,IAAI;AAMnC,SAAAoE,eAAe,KAAKC,mBAAkB;EA6I/C;EAxLUC,oBAAiB;AACxB,WAAO,KAAK7G;;EAKL8G,gBAAa;AACpB,WAAO,KAAKP;;EAcL/F,gBAAa;AACpB,WAAO,KAAK/B,SAASsI,SAAQ;;;;;;;EAQ/B,IAAYC,gBAAa;AACvB,QAAI,KAAKX,iCAAiC,YAAY;AACpD,aAAO,KAAKG;;AAEd,WAAO,KAAKhG,cAAa,GAAIyG,iBAAiB,KAAKT;;EAK5CU,iBAAc;AACrB,WAAO,KAAKR;;EAKNE,qBAAkB;AACxB,WAAO;MACLL,YAAY,KAAKA;MACjBvG,gBAAgB,KAAKA;MACrB0G,aAAa,KAAKA;;;EAIbS,4CACPC,UAAwE;AAExE,WAAO,KAAK3I,SAAS4I,UAAWC,WAAS;AACvC,UAAIA,MAAM,MAAM,MAAM,YAAY;AAChCF,iBAASE,MAAM,KAAK,GAAIA,MAAMxX,KAAyC;;IAE3E,CAAC;;EAGMyX,kBAAkBnY,GAAgC4O,mBAA6B;AACtF,QAAI5O,aAAa8S,iBAAiB;AAChC,WAAKyE,eAAe,KAAKC,mBAAkB;eAClCxX,aAAa0S,mBAAmB;AACzC,WAAKyE,aAAavI,kBAAkBmD;eAC3B/R,aAAaiT,kBAAkB;AACxC,UAAI,KAAKiE,sBAAsB,SAAS;AACtC,YAAI,CAACtI,kBAAkBmC,OAAOqC,oBAAoB;AAChD,gBAAMtC,SAAS,KAAKnB,oBAAoB3C,MACtC4B,kBAAkBmE,UAClBnE,kBAAkBmD,UAAU;AAE9B,eAAKqG,cAAcxJ,kBAAkBoD,oBAAoBlB,QAAQlC,iBAAiB;;;eAG7E5O,aAAa2U,sBAAsB;AAC5C,WAAK/D,iBAAiBhC,kBAAkBmE;AACxC,WAAKoE,aAAa,KAAKxH,oBAAoB3C,MACzC4B,kBAAkBmE,UAClBnE,kBAAkBmD,UAAU;AAE9B,WAAKuF,cAAc1I,kBAAkB0C;AACrC,UAAI,KAAK4F,sBAAsB,cAAc,CAACtI,kBAAkBmC,OAAOqC,oBAAoB;AACzF,aAAKgF,cACHxJ,kBAAkBoD,oBAAoB,KAAKmF,YAC3CvI,iBAAiB;;eAIrB5O,aAAakV,qBACZlV,EAAE+V,SAAShd,2BAA2BC,iBACrCgH,EAAE+V,SAAShd,2BAA2Bkb,qBACxC;AACA,WAAKoE,eAAezJ,iBAAiB;eAC5B5O,aAAayV,iBAAiB;AACvC,WAAK4C,eAAezJ,mBAAmB,IAAI;eAClC5O,aAAa6U,eAAe;AACrC,WAAKwC,mBAAmBrX,EAAEsQ;AAC1B,WAAK8G,gBAAgB,KAAKQ;;;EAItBQ,cAAc7d,KAAuB2T,YAAsB;AACjE,UAAMpV,OAAOyB,eAAeO,UAAU,KAAK3B,cAAcsH,UAAUlG,GAAG,IAAIA;AAC1E,QAAI,KAAK8U,SAASiJ,qBAAqBxf,IAAI,KAAK,CAAC,CAACoV,WAAW6C,OAAOsC,YAAY;AAE9E,YAAMkF,uBAAuB,KAAKX;AAClC,YAAMlX,QAAQ,kCACTwN,WAAW6C,OAAOrQ,QAClB,KAAK8X,sBAAsBtK,WAAWoC,IAAIiI,oBAAoB;AAEnE,WAAKlJ,SAASoJ,aAAa3f,MAAM,IAAI4H,KAAK;WACrC;AACL,YAAMA,QAAQ,kCACTwN,WAAW6C,OAAOrQ,QAClB,KAAK8X,sBAAsBtK,WAAWoC,IAAI,KAAKsH,gBAAgB,CAAC;AAErE,WAAKvI,SAASqJ,GAAG5f,MAAM,IAAI4H,KAAK;;;;;;;EAQ5B2X,eAAeM,YAAwBC,2BAA2B,OAAK;AAC7E,QAAI,KAAK3B,iCAAiC,YAAY;AACpD,YAAMsB,uBAAuB,KAAKX;AAClC,YAAMiB,qBAAqB,KAAKzB,gBAAgBmB;AAChD,UAAIM,uBAAuB,GAAG;AAC5B,aAAKxJ,SAASyJ,UAAUD,kBAAkB;iBACjC,KAAKjI,mBAAmB+H,WAAW5F,YAAY8F,uBAAuB,GAAG;AAIlF,aAAKE,WAAWJ,UAAU;AAC1B,aAAKK,yBAAwB;aACxB;;eAIE,KAAK/B,iCAAiC,WAAW;AAK1D,UAAI2B,0BAA0B;AAC5B,aAAKG,WAAWJ,UAAU;;AAE5B,WAAKK,yBAAwB;;;EAIzBD,WAAWJ,YAAsB;AACvC,SAAKrB,cAAc,KAAKC,aAAaD;AACrC,SAAK1G,iBAAiB,KAAK2G,aAAa3G;AAMxC,SAAKuG,aAAa,KAAKxH,oBAAoB3C,MACzC,KAAK4D,gBACL+H,WAAW5F,YAAY,KAAKoE,UAAU;;EAIlC6B,2BAAwB;AAC9B,SAAK3J,SAASoJ,aACZ,KAAKtf,cAAcsH,UAAU,KAAK0W,UAAU,GAC5C,IACA,KAAKqB,sBAAsB,KAAKnB,kBAAkB,KAAKD,aAAa,CAAC;;EAIjEoB,sBAAsB9J,cAAsBuK,cAAoB;AACtE,QAAI,KAAKhC,iCAAiC,YAAY;AACpD,aAAO;QAACvI;QAAcmJ,eAAeoB;MAAY;;AAEnD,WAAO;MAACvK;IAAY;;;;;;kIAlMX,IAAAoI,qBAAA,oBAAA;MAAA;IAAA,GAAA;EAAmB;EAAnB,OAAA;AAAA,SAAArN,QAAA,mBAAA;aAAAuN;MAAAjO,SAAAiO,qBAAAtN;MAAAR,YAAmB;IAAA,CAAA;EADP;;;2FACO,CAAA;UAD/BC;WAAW;MAACD,YAAY;IAAM,CAAC;;;ACxEhC,IAAKgQ;CAAL,SAAKA,mBAAgB;AACnBA,EAAAA,kBAAAA,kBAAA,UAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,kBAAAA,kBAAA,QAAA,IAAA,CAAA,IAAA;AACAA,EAAAA,kBAAAA,kBAAA,aAAA,IAAA,CAAA,IAAA;AACF,GAJKA,qBAAAA,mBAIJ,CAAA,EAAA;AAWe,SAAAC,oBAAoB3I,QAAqC4I,QAAkB;AACzF5I,SAAO1B,OACJlR,KACCuH,OACGnF,OACCA,aAAa6U,iBACb7U,aAAakV,oBACblV,aAAayV,mBACbzV,aAAa0S,iBAAiB,GAElClW,IAAKwD,OAAK;AACR,QAAIA,aAAa6U,iBAAiB7U,aAAa0S,mBAAmB;AAChE,aAAOwG,iBAAiBG;;AAE1B,UAAMC,cACJtZ,aAAakV,mBACTlV,EAAE+V,SAAShd,2BAA2BwgB,YACtCvZ,EAAE+V,SAAShd,2BAA2B+Y,4BACtC;AACN,WAAOwH,cAAcJ,iBAAiBM,cAAcN,iBAAiBO;GACtE,GACDtU,OACG3H,YACCA,WAAW0b,iBAAiBM,WAAW,GAE3ChF,KAAK,CAAC,CAAC,EAERyD,UAAU,MAAK;AACdmB,WAAM;EACR,CAAC;AACL;ACLA,SAASM,oBAAoBC,OAAU;AACrC,QAAMA;AACR;AAMO,IAAMC,oBAA0C;EACrDC,OAAO;EACPxf,UAAU;EACVyf,cAAc;EACd1f,aAAa;;AAOR,IAAM2f,qBAA2C;EACtDF,OAAO;EACPxf,UAAU;EACVyf,cAAc;EACd1f,aAAa;;IAkBF4f,eAAAA,QAAM;EACjB,IAAYpJ,iBAAc;AACxB,WAAO,KAAKqJ,aAAaxC,kBAAiB;;EAE5C,IAAYN,aAAU;AACpB,WAAO,KAAK8C,aAAavC,cAAa;;;;;EAwBxC,IAAW5I,SAAM;AAKf,WAAO,KAAKoL;;;;;EAKd,IAAI5C,cAAW;AACb,WAAO,KAAK2C,aAAanC,eAAc;;EA+CzC5e,cAAA;AAhFQ,SAAQihB,WAAG;AAGF,SAAAC,UAAUpR,OAAOqR,OAAO;AACxB,SAAAJ,eAAejR,OAAO+N,YAAY;AAClC,SAAArH,UAAU1G,OAAOW,sBAAsB;MAAC4C,UAAU;IAAI,CAAC,KAAK,CAAA;AAC5D,SAAA+N,eAAetR,OAAOuR,YAAY;AAClC,SAAiBrD,oBAAG,KAAKxH,QAAQwH,qBAAqB;AACtD,SAAAsD,wBAAwBxR,OAAOwF,qBAAqB;AACpD,SAAArV,gBAAgB6P,OAAOkG,aAAa;AACpC,SAAAG,WAAWrG,OAAOsG,QAAQ;AAC1B,SAAAK,sBAAsB3G,OAAO4D,mBAAmB;AAOzD,SAAAsN,UAAU,IAAIxO,QAAO;AAyB7B,SAAYkK,eAAwB,KAAKlG,QAAQkG,gBAAgB8D;AAMjE,SAASrH,YAAY;AAQrB,SAAAqC,qBAAyC1L,OAAOmN,kBAAkB;AAWlE,SAAmB3D,sBAAwB,KAAK9C,QAAQ8C,uBAAuB;AAE/E,SAAAhU,SAAiBwK,OAAOyB,QAAQ;MAAC8B,UAAU;IAAI,CAAC,GAAGtF,KAAI,KAAM,CAAA;AAQpD,SAAAwT,+BAAwC,CAAC,CAACzR,OAAOwG,cAAc;MAACjD,UAAU;IAAI,CAAC;AAehF,SAAAmO,qBAAqB,IAAIC,aAAY;AAZ3C,SAAKC,YAAY,KAAKpc,MAAM;AAE5B,SAAKgc,sBACFjK,iBAAiB,MAAM,KAAKK,gBAAgB,KAAK0G,WAAW,EAC5DW,UAAU;MACT0B,OAAQ3Z,OAAK;AACX,aAAKoa,QAAQS,KAAKniB,YAAY,+BAA+BsH,CAAC,KAAKA,CAAC;;IAEvE,CAAA;AACH,SAAK8a,4BAA2B;;EAI1BA,8BAA2B;AACjC,UAAMC,eAAe,KAAKP,sBAAsB1L,OAAOmJ,UAAWjY,OAAK;AACrE,UAAI;AACF,cAAM4O,oBAAoB,KAAK4L,sBAAsB5L;AACrD,cAAMD,oBAAoB,KAAK6L,sBAAsB7L;AACrD,YAAIC,sBAAsB,QAAQD,sBAAsB,MAAM;AAC5D,eAAKsL,aAAa9B,kBAAkBnY,GAAG2O,iBAAiB;AACxD,cACE3O,aAAakV,oBACblV,EAAE+V,SAAShd,2BAA2BwgB,YACtCvZ,EAAE+V,SAAShd,2BAA2B+Y,2BACtC;AAIA,iBAAKO,YAAY;qBACRrS,aAAa6U,eAAe;AACrC,iBAAKxC,YAAY;qBACRrS,aAAasV,iBAAiB;AACvC,kBAAM0F,OAAOhb,EAAEuV;AACf,kBAAM0F,aAAa,KAAKtL,oBAAoB3C,MAC1ChN,EAAEzF,KACFqU,kBAAkBiC,aAAa;AAEjC,kBAAME,SAAS;cACbkB,YAAYrD,kBAAkBmC,OAAOkB;cACrCiJ,MAAMtM,kBAAkBmC,OAAOmK;cAC/B9H,oBAAoBxE,kBAAkBmC,OAAOqC;;;;;cAK7CC,YACEzE,kBAAkBmC,OAAOsC,cACzB,KAAK6D,sBAAsB,WAC3BhB,6BAA6BtH,kBAAkBsC,MAAM;eAEpD8J;AAGL,iBAAKG,mBAAmBF,YAAY9J,uBAAuB,MAAMJ,QAAQ;cACvEpL,SAASiJ,kBAAkBjJ;cAC3BqL,QAAQpC,kBAAkBoC;cAC1BC,SAASrC,kBAAkBqC;YAC5B,CAAA;;;AAML,YAAImK,oBAAoBpb,CAAC,GAAG;AAC1B,eAAKka,QAAQzR,KAAKzI,CAAC;;eAEdA,IAAY;AACnB,aAAKwa,sBAAsBzL,uBAAuBtG,KAAKzI,EAAU;;IAErE,CAAC;AACD,SAAK0a,mBAAmBzV,IAAI8V,YAAY;;;EAI1CM,uBAAuB9b,mBAA4B;AAGjD,SAAK+X,YAAY9d,KAAKwJ,YAAYzD;AAClC,SAAKib,sBAAsBjb,oBAAoBA;;;;;EAMjD+b,oBAAiB;AACf,SAAKC,4BAA2B;AAChC,QAAI,CAAC,KAAKf,sBAAsB/L,wBAAwB;AACtD,WAAK+M,0BACH,KAAKnM,SAASvW,KAAK,IAAI,GACvBqY,uBACA,KAAK8I,aAAa7I,cAAa,CAAE;;;;;;;;EAUvCmK,8BAA2B;AAIzB,SAAKE,4CACH,KAAKxB,aAAalC,4CAA4C,CAACxd,KAAKmG,UAAS;AAG3EqN,iBAAW,MAAK;AACd,aAAKyN,0BAA0BjhB,KAAK,YAAYmG,KAAK;SACpD,CAAC;IACN,CAAC;;;;;;;;;EAUG8a,0BACNjhB,KACA2W,QACAxQ,OAAuC;AAEvC,UAAMqQ,SAA2B;MAACsC,YAAY;IAAI;AAUlD,UAAMjC,gBAAgB1Q,OAAOgO,eAAehO,QAAQ;AAIpD,QAAIA,OAAO;AACT,YAAMgb,YAAY,mBAAIhb;AACtB,aAAOgb,UAAUhN;AACjB,aAAOgN,UAAU7D;AACjB,UAAIrc,OAAO4F,KAAKsa,SAAS,EAAE1d,WAAW,GAAG;AACvC+S,eAAOrQ,QAAQgb;;;AAInB,UAAMtiB,UAAU,KAAKuiB,SAASphB,GAAG;AACjC,SAAK4gB,mBAAmB/hB,SAAS8X,QAAQE,eAAeL,MAAM;;;EAIhE,IAAIxW,MAAG;AACL,WAAO,KAAKqhB,aAAa,KAAKhL,cAAc;;;;;;EAO9CiL,uBAAoB;AAClB,WAAO,KAAKrB,sBAAsB7L;;;;;;EAOpC,IAAIE,2BAAwB;AAC1B,WAAO,KAAK2L,sBAAsB3L;;;;;;;;;;;;;;;;;;EAmBpC+L,YAAYpc,QAAc;AACxB,KAAC,OAAO9F,cAAc,eAAeA,cAAc+T,eAAejO,MAAM;AACxE,SAAKA,SAASA,OAAOhC,IAAI+N,iBAAiB;AAC1C,SAAK8H,YAAY;;;EAInByJ,cAAW;AACT,SAAKC,QAAO;;;EAIdA,UAAO;AACL,SAAKvB,sBAAsBtK,SAAQ;AACnC,QAAI,KAAKuL,yCAAyC;AAChD,WAAKA,wCAAwCO,YAAW;AACxD,WAAKP,0CAA0C7Y;;AAEjD,SAAKuX,WAAW;AAChB,SAAKO,mBAAmBsB,YAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDrCC,cAAcC,UAAiBC,mBAAuC,CAAA,GAAE;AACtE,UAAM;MAACC;MAAYhiB;MAAaC;MAAUgiB;MAAqBC;IAAgB,IAC7EH;AACF,UAAMI,IAAID,mBAAmB,KAAK1L,eAAevW,WAAWA;AAC5D,QAAImiB,IAAmB;AACvB,YAAQH,uBAAuB,KAAK3M,QAAQ+M,4BAA0B;MACpE,KAAK;AACHD,YAAI,kCAAI,KAAK5L,eAAexW,cAAgBA;AAC5C;MACF,KAAK;AACHoiB,YAAI,KAAK5L,eAAexW;AACxB;MACF;AACEoiB,YAAIpiB,eAAe;;AAEvB,QAAIoiB,MAAM,MAAM;AACdA,UAAI,KAAKE,iBAAiBF,CAAC;;AAG7B,QAAIG;AACJ,QAAI;AACF,YAAMC,qBAAqBR,aAAaA,WAAWxY,WAAW,KAAK0T,YAAY1T,SAASpK;AACxFmjB,kCAA4BE,4BAA4BD,kBAAkB;aACnE5c,GAAY;AAMnB,UAAI,OAAOkc,SAAS,CAAC,MAAM,YAAYA,SAAS,CAAC,EAAE,CAAC,MAAM,KAAK;AAQ7DA,mBAAW,CAAA;;AAEbS,kCAA4B,KAAK/L,eAAepX;;AAElD,WAAOsjB,8BAA8BH,2BAA2BT,UAAUM,GAAGD,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BxFQ,cACExiB,KACAwW,SAAoC;IAClCqC,oBAAoB;EACrB,GAAA;AAED,UAAMha,UAAU4jB,UAAUziB,GAAG,IAAIA,MAAM,KAAKohB,SAASphB,GAAG;AACxD,UAAM0gB,aAAa,KAAKtL,oBAAoB3C,MAAM5T,SAAS,KAAK+d,UAAU;AAE1E,WAAO,KAAKgE,mBAAmBF,YAAY9J,uBAAuB,MAAMJ,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiChFkM,SACEf,UACAnL,SAA2B;IAACqC,oBAAoB;EAAK,GAAC;AAEtD8J,qBAAiBhB,QAAQ;AACzB,WAAO,KAAKa,cAAc,KAAKd,cAAcC,UAAUnL,MAAM,GAAGA,MAAM;;;EAIxE6K,aAAarhB,KAAY;AACvB,WAAO,KAAKpB,cAAcsH,UAAUlG,GAAG;;;EAIzCohB,SAASphB,KAAW;AAClB,QAAI;AACF,aAAO,KAAKpB,cAAc+B,MAAMX,GAAG;YAC7B;AACN,aAAO,KAAKpB,cAAc+B,MAAM,GAAG;;;EAsBvCiiB,SAAS5iB,KAAuB6iB,cAA4C;AAC1E,QAAI1N;AACJ,QAAI0N,iBAAiB,MAAM;AACzB1N,gBAAU,mBAAIkK;eACLwD,iBAAiB,OAAO;AACjC1N,gBAAU,mBAAIqK;WACT;AACLrK,gBAAU0N;;AAEZ,QAAIJ,UAAUziB,GAAG,GAAG;AAClB,aAAO8iB,aAAa,KAAKzM,gBAAgBrW,KAAKmV,OAAO;;AAGvD,UAAMtW,UAAU,KAAKuiB,SAASphB,GAAG;AACjC,WAAO8iB,aAAa,KAAKzM,gBAAgBxX,SAASsW,OAAO;;EAGnDgN,iBAAiBjiB,QAAc;AACrC,WAAOe,OAAOC,QAAQhB,MAAM,EAAE6iB,OAAO,CAAC9f,QAAgB,CAACmK,KAAKnD,KAAK,MAAoB;AACnF,UAAIA,UAAU,QAAQA,UAAU5B,QAAW;AACzCpF,eAAOmK,GAAG,IAAInD;;AAEhB,aAAOhH;OACN,CAAA,CAAE;;EAGC2d,mBACNrK,QACAI,QACAE,eACAL,QACAwM,cAIC;AAED,QAAI,KAAKpD,UAAU;AACjB,aAAOrM,QAAQnI,QAAQ,KAAK;;AAG9B,QAAIA;AACJ,QAAIqL;AACJ,QAAIC;AACJ,QAAIsM,cAAc;AAChB5X,gBAAU4X,aAAa5X;AACvBqL,eAASuM,aAAavM;AACtBC,gBAAUsM,aAAatM;WAClB;AACLA,gBAAU,IAAInD,QAAiB,CAACxU,KAAKkkB,QAAO;AAC1C7X,kBAAUrM;AACV0X,iBAASwM;MACX,CAAC;;AAIH,UAAMC,SAAS,KAAKnD,aAAarV,IAAG;AACpCkU,wBAAoB,MAAM,MAAK;AAG7BuE,qBAAe,MAAM,KAAKpD,aAAaqD,OAAOF,MAAM,CAAC;IACvD,CAAC;AAED,SAAKjD,sBAAsBpK,wBAAwB;MACjDc;MACAE;MACAR,gBAAgB,KAAKA;MACrBC,eAAe,KAAKD;MACpBE;MACAC;MACApL;MACAqL;MACAC;MACAhX,iBAAiB,KAAKqd,YAAY1T;MAClCyN,oBAAoB,KAAKiG;IAC1B,CAAA;AAID,WAAOrG,QAAQ2M,MAAO5d,OAAU;AAC9B,aAAO8N,QAAQkD,OAAOhR,CAAC;IACzB,CAAC;;;;;;EAnkBc;EAAN,OAAA;AAAA,SAAAyJ,QAAA,mBAAA;aAAAuQ;MAAAjR,SAAAiR,QAAAtQ;MAAAR,YAAM;IAAA,CAAA;EADM;;;8EACN,CAAA;UADlBC;WAAW;MAACD,YAAY;IAAM,CAAC;;;AAwkBhC,SAASgU,iBAAiBhB,UAAkB;AAC1C,WAAS2B,IAAI,GAAGA,IAAI3B,SAASle,QAAQ6f,KAAK;AACxC,UAAMC,MAAM5B,SAAS2B,CAAC;AACtB,QAAIC,OAAO,MAAM;AACf,YAAM,IAAIrlB,aAAY,OAEnB,OAAOC,cAAc,eAAeA,cACnC,+BAA+BolB,GAAG,qBAAqBD,CAAC,EAAE;;;AAIpE;AAEA,SAASzC,oBAAoBpb,GAA8B;AACzD,SAAO,EAAEA,aAAa2U,yBAAyB,EAAE3U,aAAasV;AAChE;ICjjBayI,mBAAAA,YAAU;EAmErB7kB,YACUsX,QACA5X,OACgColB,mBACvBC,UACAC,IACTC,kBAAmC;AALnC,SAAM3N,SAANA;AACA,SAAK5X,QAALA;AACgC,SAAiBolB,oBAAjBA;AACvB,SAAQC,WAARA;AACA,SAAEC,KAAFA;AACT,SAAgBC,mBAAhBA;AApEV,SAAIC,OAAkB;AA4DtB,SAAAC,YAAY,IAAI3S,QAAO;AA8Be,SAAgB4Q,mBAAY;AAQ5B,SAAkBlJ,qBAAY;AAQ9B,SAAUC,aAAY;AAsCpD,SAAeiL,kBAA2B;AA1EhD,UAAMC,UAAUL,GAAGM,cAAcD,SAASE,YAAW;AACrD,SAAKC,kBAAkBH,YAAY,OAAOA,YAAY;AAEtD,QAAI,KAAKG,iBAAiB;AACxB,WAAK3D,eAAevK,OAAO1B,OAAOmJ,UAAWxb,OAAY;AACvD,YAAIA,aAAaoY,eAAe;AAC9B,eAAK8J,WAAU;;MAEnB,CAAC;WACI;AACL,WAAKC,2BAA2B,GAAG;;;;;;;EAgC/BA,2BAA2BC,aAA0B;AAC3D,QAAI,KAAKb,qBAAqB,QAA0C,KAAKU,iBAAiB;AAC5F;;AAEF,SAAKI,oBAAoB,YAAYD,WAAW;;;;EAKlDE,YAAYC,SAAuB;AACjC,QACEtmB,aACAskB,UAAU,KAAKsB,eAAe,MAC7B,KAAKjkB,aAAauI,UACjB,KAAKxI,eACL,KAAKiiB,uBACL,KAAKC,oBACL,KAAKF,aACP;AACA,YAAM,IAAI3jB,aAER,MAAA,8FAA8F;;AAGlG,QAAI,KAAKimB,iBAAiB;AACxB,WAAKC,WAAU;;AAIjB,SAAKN,UAAU5V,KAAK,IAAI;;;;;;;;;;;EAc1B,IACIwW,WAAWC,mBAA8D;AAC3E,QAAIA,qBAAqB,MAAM;AAC7B,WAAKZ,kBAAkB;AACvB,WAAKM,2BAA2B,IAAI;WAC/B;AACL,UAAI5B,UAAUkC,iBAAiB,GAAG;AAChC,aAAKZ,kBAAkBY;aAClB;AACL,aAAKZ,kBAAkBtS,MAAMC,QAAQiT,iBAAiB,IAClDA,oBACA,CAACA,iBAAiB;;AAExB,WAAKN,2BAA2B,GAAG;;;;EAYvCO,QACEC,QACAC,SACAC,UACAC,QACAC,SAAgB;AAEhB,UAAMpmB,UAAU,KAAKA;AAErB,QAAIA,YAAY,MAAM;AACpB,aAAO;;AAGT,QAAI,KAAKslB,iBAAiB;AACxB,UAAIU,WAAW,KAAKC,WAAWC,YAAYC,UAAUC,SAAS;AAC5D,eAAO;;AAGT,UAAI,OAAO,KAAKC,WAAW,YAAY,KAAKA,UAAU,SAAS;AAC7D,eAAO;;;AAIX,UAAM1O,SAAS;MACbqC,oBAAoB,KAAKA;MACzBC,YAAY,KAAKA;MACjB3S,OAAO,KAAKA;MACZwa,MAAM,KAAKA;;AAEb,SAAK1K,OAAOuM,cAAc3jB,SAAS2X,MAAM;AAKzC,WAAO,CAAC,KAAK2N;;;EAIf5C,cAAW;AACT,SAAKf,cAAciB,YAAW;;EAGxB2C,aAAU;AAChB,UAAMvlB,UAAU,KAAKA;AACrB,SAAKglB,OACHhlB,YAAY,QAAQ,KAAK+kB,mBACrB,KAAKA,kBAAkBuB,mBAAmB,KAAKlP,OAAOoL,aAAaxiB,OAAO,CAAC,IAC3E;AAEN,UAAMumB,iBACJ,KAAKvB,SAAS,OACV;;;;;;;;;;;MAWAwB,2BACE,KAAKxB,MACL,KAAKF,GAAGM,cAAcD,QAAQE,YAAW,GACzC,MAAM;;AAEd,SAAKK,oBAAoB,QAAQa,cAAc;;EAGzCb,oBAAoBe,UAAkBC,WAAwB;AACpE,UAAM7B,WAAW,KAAKA;AACtB,UAAMO,gBAAgB,KAAKN,GAAGM;AAC9B,QAAIsB,cAAc,MAAM;AACtB7B,eAAS8B,aAAavB,eAAeqB,UAAUC,SAAS;WACnD;AACL7B,eAAS+B,gBAAgBxB,eAAeqB,QAAQ;;;EAIpD,IAAIzmB,UAAO;AACT,QAAI,KAAKklB,oBAAoB,MAAM;AACjC,aAAO;eACEtB,UAAU,KAAKsB,eAAe,GAAG;AAC1C,aAAO,KAAKA;;AAEd,WAAO,KAAK9N,OAAOyL,cAAc,KAAKqC,iBAAiB;;;MAGrDlC,YAAY,KAAKA,eAAexZ,SAAY,KAAKwZ,aAAa,KAAKxjB;MACnEwB,aAAa,KAAKA;MAClBC,UAAU,KAAKA;MACfgiB,qBAAqB,KAAKA;MAC1BC,kBAAkB,KAAKA;IACxB,CAAA;;EAvRQ,OAAA;AAAA,SAAA5S,OAAA,SAAAuW,mBAAAnJ,mBAAA;AAAA,aAAA,KAAAA,qBAAAiH,aAAA,kBAAU/D,MAAA,GAAA,kBAAAkG,cAAA,GAAA,kBAAA,UAsER,GAAA,kBAAUC,SAAA,GAAA,kBAAAC,UAAA,GAAA,kBAAAC,gBAAA,CAAA;IAAA;EAAA;EAtEZ,OAAA;AAAA,SAAAC,OAAA,kBAAA;YAAAvC;MAAAjU,WAAA,CAAA,CAAA,IAAA,cAAA,EAAA,CAAA;MAAAyW,UAAA;MAAAC,cAAA,SAAAC,wBAAAC,IAAAC,KAAA;AAAA,YAAAD,KAAA,GAAA;;mBAAAC,IAAAxB,QAAAyB,OAAAxB,QAAAwB,OAAAvB,SAAAuB,OAAAtB,UAAAsB,OAAArB,QAAAqB,OAAApB,OA+FQ;UAAA,CA/FR;QAAA;AAAA,YAAAkB,KAAA,GAAA;;;;;;;;;;;;sEA+FQG,gBAAA;QAAAzN,oBAAA,CAAA,GAAA,sBAAA,sBAQAyN,gBAAA;QAAAxN,YAAA,CAAA,GAAA,cAAA,cAAgBwN,gBAQhB;QAAA5B,YAAA;MAAA;MAAAlV,YAAA;MAAAC,UAAA,CAAA,0BAAA,oBAAA;;EAAgB;;;kFA/Gd,CAAA;UAJtB8W;IAAU1X,MAAA,CAAA;MACT2X,UAAU;MACVhX,YAAY;IACb,CAAA;;;;;;;;YAuEIiX;aAAU,UAAU;;;;;;;;;IA3DcvB,QAAM,CAAA;YAA1CwB;aAAY,aAAa;;YAAGC;;IAQpB9mB,aAAW,CAAA;YAAnB8mB;;IAOQ7mB,UAAQ,CAAA;YAAhB6mB;;IAOQ7E,qBAAmB,CAAA;YAA3B6E;;IAOQxgB,OAAK,CAAA;YAAbwgB;;IAOQhG,MAAI,CAAA;YAAZgG;;IAUQ9E,YAAU,CAAA;YAAlB8E;;IAsCqC5E,kBAAgB,CAAA;YAArD4E;aAAM;QAACC,WAAWN;MAAgB,CAAC;;IAQEzN,oBAAkB,CAAA;YAAvD8N;aAAM;QAACC,WAAWN;MAAgB,CAAC;;IAQExN,YAAU,CAAA;YAA/C6N;aAAM;QAACC,WAAWN;MAAgB,CAAC;;IAkDhC5B,YAAU,CAAA;YADbiC;;IAyBD/B,SAAO,CAAA;YAPNiC;MAAahY,MAAA,CAAA,SAAS,CACrB,iBACA,kBACA,mBACA,iBACA,gBAAgB,CACjB;;;;ICvNUiY,yBAAAA,kBAAgB;EAQ3B,IAAIlE,WAAQ;AACV,WAAO,KAAKmE;;EAuCdpoB,YACUsX,QACA+Q,SACAtD,UACSuD,KACGC,MAAiB;AAJ7B,SAAMjR,SAANA;AACA,SAAO+Q,UAAPA;AACA,SAAQtD,WAARA;AACS,SAAGuD,MAAHA;AACG,SAAIC,OAAJA;AAlDd,SAAOC,UAAa,CAAA;AAGpB,SAASJ,YAAG;AAaX,SAAAK,0BAAmE;MAACC,OAAO;IAAK;AA2BtE,SAAAC,iBAAwC,IAAIC,aAAY;AASzE,SAAKC,2BAA2BvR,OAAO1B,OAAOmJ,UAAWxb,OAAY;AACnE,UAAIA,aAAaoY,eAAe;AAC9B,aAAKmN,OAAM;;IAEf,CAAC;;;EAIHC,qBAAkB;AAEhBroB,OAAG,KAAKsoB,MAAMlD,SAASplB,GAAG,IAAI,CAAC,EAC5BgE,KAAKukB,SAAQ,CAAE,EACflK,UAAWpR,OAAK;AACf,WAAKmb,OAAM;AACX,WAAKI,6BAA4B;IACnC,CAAC;;EAGGA,+BAA4B;AAClC,SAAKC,8BAA8BrG,YAAW;AAC9C,UAAMsG,iBAAiB,CAAC,GAAG,KAAKJ,MAAMK,QAAO,GAAI,KAAKd,IAAI,EACvDtc,OAAQsc,UAA6B,CAAC,CAACA,IAAI,EAC3CjlB,IAAKilB,UAASA,KAAKpD,SAAS;AAC/B,SAAKgE,+BAA+B9gB,KAAK+gB,cAAc,EACpD1kB,KAAKukB,SAAQ,CAAE,EACflK,UAAWwJ,UAAQ;AAClB,UAAI,KAAKH,cAAc,KAAKkB,aAAa,KAAKhS,MAAM,EAAEiR,IAAI,GAAG;AAC3D,aAAKO,OAAM;;IAEf,CAAC;;EAGL,IACIS,iBAAiB/nB,MAAuB;AAC1C,UAAMgnB,UAAU1V,MAAMC,QAAQvR,IAAI,IAAIA,OAAOA,KAAK4D,MAAM,GAAG;AAC3D,SAAKojB,UAAUA,QAAQvc,OAAQ5L,OAAM,CAAC,CAACA,CAAC;;;EAI1CwlB,YAAYC,SAAsB;AAChC,SAAKgD,OAAM;;;EAGblG,cAAW;AACT,SAAKiG,yBAAyB/F,YAAW;AACzC,SAAKqG,8BAA8BrG,YAAW;;EAGxCgG,SAAM;AACZ,QAAI,CAAC,KAAKE,SAAS,CAAC,KAAK1R,OAAO6B,UAAW;AAE3CqL,mBAAe,MAAK;AAClB,YAAMgF,iBAAiB,KAAKA,eAAc;AAC1C,WAAKhB,QAAQhmB,QAASnC,OAAK;AACzB,YAAImpB,gBAAgB;AAClB,eAAKzE,SAAS0E,SAAS,KAAKpB,QAAQ/C,eAAejlB,CAAC;eAC/C;AACL,eAAK0kB,SAAS2E,YAAY,KAAKrB,QAAQ/C,eAAejlB,CAAC;;MAE3D,CAAC;AACD,UAAImpB,kBAAkB,KAAKG,0BAA0BjgB,QAAW;AAC9D,aAAKqb,SAAS8B,aACZ,KAAKwB,QAAQ/C,eACb,gBACA,KAAKqE,sBAAsBpd,SAAQ,CAAE;aAElC;AACL,aAAKwY,SAAS+B,gBAAgB,KAAKuB,QAAQ/C,eAAe,cAAc;;AAI1E,UAAI,KAAK8C,cAAcoB,gBAAgB;AACrC,aAAKpB,YAAYoB;AACjB,aAAKlB,IAAIsB,aAAY;AAErB,aAAKjB,eAAekB,KAAKL,cAAc;;IAE3C,CAAC;;EAGKF,aAAahS,QAAc;AACjC,UAAMd,UAA0CsT,qBAC9C,KAAKrB,uBAAuB,IAE1B,KAAKA;;MAEL,KAAKA,wBAAwBC,SAAS;;AAC1C,WAAQH,UAAoB;AAC1B,YAAMroB,UAAUqoB,KAAKroB;AACrB,aAAOA,UAAUoX,OAAO2M,SAAS/jB,SAASsW,OAAO,IAAI;IACvD;;EAGMgT,iBAAc;AACpB,UAAMO,kBAAkB,KAAKT,aAAa,KAAKhS,MAAM;AACrD,WAAQ,KAAKiR,QAAQwB,gBAAgB,KAAKxB,IAAI,KAAM,KAAKS,MAAMhjB,KAAK+jB,eAAe;;;;0DAtJ1E,kBAAgBjJ,MAAA,GAAA,kBAAAoG,UAAA,GAAA,kBAAAD,SAAA,GAAA,kBAAA+C,iBAAA,GAAA,kBAAAnF,YAAA,CAAA,CAAA;IAAA;EAAA;EAAhB,OAAA;AAAA,SAAAuC,OAAA,kBAAA;YAAAe;MAAAvX,WAAA,CAAA,CAAA,IAAA,oBAAA,EAAA,CAAA;MAAAqZ,gBAAA,SAAAC,gCAAA1C,IAAAC,KAAA0C,UAAA;AAAA,YAAA3C,KAAA,GAAA;mCAAgB3C,YACV,CAAA;QAAA;AAAA,YAAA2C,KAAA,GAAA;AAAA,cAAA4C;;;;;;;;;;;;;;;;EAAU;;;wFADA,CAAA;UAL5BxC;IAAU1X,MAAA,CAAA;MACT2X,UAAU;MACVwC,UAAU;MACVxZ,YAAY;IACb,CAAA;;;;;;;;;;;;YAsDIyZ;;;IApD+CtB,OAAK,CAAA;YAAtDuB;MAAgBra,MAAA,CAAA2U,YAAY;QAAC/W,aAAa;MAAI,CAAC;;IAkBvC2a,yBAAuB,CAAA;YAA/BT;;IASQ2B,uBAAqB,CAAA;YAA7B3B;;IAkBkBW,gBAAc,CAAA;YAAhC6B;;IA0CGjB,kBAAgB,CAAA;YADnBvB;;;;AAsEH,SAAS8B,qBACPtT,SAAgD;AAEhD,SAAO,CAAC,CAAEA,QAAiCmK;AAC7C;IC9OsB8J,2BAAkB;AAAA;IAgB3BC,0BAAAA,mBAAiB;EAC5BC,QAAQjrB,OAAckrB,IAAyB;AAC7C,WAAOA,GAAE,EAAGlmB,KAAKkD,WAAW,MAAMlH,GAAG,IAAI,CAAC,CAAC;;;;2DAFlC;IAAA;EAAiB;EAAjB,OAAA;AAAA,SAAA6P,QAAA,mBAAA;aAAAma;MAAA7a,SAAA6a,mBAAAla;MAAAR,YAAiB;IAAA,CAAA;EADL;;;yFACK,CAAA;UAD7BC;WAAW;MAACD,YAAY;IAAM,CAAC;;;IAiBnB6a,qBAAAA,cAAY;EACvBF,QAAQjrB,OAAckrB,IAAyB;AAC7C,WAAOlqB,GAAG,IAAI;;;;sDAFL;IAAA;EAAY;EAAZ,OAAA;AAAA,SAAA6P,QAAA,mBAAA;aAAAsa;MAAAhb,SAAAgb,cAAAra;MAAAR,YAAY;IAAA,CAAA;EADA;;;oFACA,CAAA;UADxBC;WAAW;MAACD,YAAY;IAAM,CAAC;;;IAoBnB8a,wBAAAA,iBAAe;EAG1B9qB,YACUsX,QACR1F,UACQ5Q,UACA+pB,oBACAzY,QAA0B;AAJ1B,SAAMgF,SAANA;AAEA,SAAQtW,WAARA;AACA,SAAkB+pB,qBAAlBA;AACA,SAAMzY,SAANA;;EAGV0Y,kBAAe;AACb,SAAKnJ,eAAe,KAAKvK,OAAO1B,OAC7BlR,KACCuH,OAAQnF,OAAaA,aAAa6U,aAAa,GAC/CrT,UAAU,MAAM,KAAKqiB,QAAO,CAAE,CAAC,EAEhC5L,UAAU,MAAO;IAAA,CAAC;;EAGvB4L,UAAO;AACL,WAAO,KAAKM,cAAc,KAAKjqB,UAAU,KAAKsW,OAAOhS,MAAM;;;EAI7Dsd,cAAW;AACT,QAAI,KAAKf,cAAc;AACrB,WAAKA,aAAaiB,YAAW;;;EAIzBmI,cAAcjqB,UAA+B2E,QAAc;AACjE,UAAMvF,MAAyB,CAAA;AAC/B,eAAWV,SAASiG,QAAQ;AAC1B,UAAIjG,MAAMwrB,aAAa,CAACxrB,MAAM2J,WAAW;AACvC3J,cAAM2J,YAAY8hB,0BAChBzrB,MAAMwrB,WACNlqB,UACA,UAAUtB,MAAME,IAAI,EAAE;;AAI1B,YAAMwrB,0BAA0B1rB,MAAM2J,aAAarI;AACnD,YAAMqqB,sBAAsB3rB,MAAM+K,mBAAmB2gB;AAUrD,UACG1rB,MAAMkL,gBAAgB,CAAClL,MAAMmL,iBAAiBnL,MAAM4rB,YAAY5hB,UAChEhK,MAAM4R,iBAAiB,CAAC5R,MAAMqK,kBAC/B;AACA3J,YAAIgI,KAAK,KAAKmjB,cAAcH,yBAAyB1rB,KAAK,CAAC;;AAE7D,UAAIA,MAAMiB,YAAYjB,MAAMmL,eAAe;AACzCzK,YAAIgI,KAAK,KAAK6iB,cAAcI,qBAAsB3rB,MAAMiB,YAAYjB,MAAMmL,aAAa,CAAG;;;AAG9F,WAAOxC,KAAKjI,GAAG,EAAEsE,KAAKukB,SAAQ,CAAE;;EAG1BsC,cAAcvqB,UAA+BtB,OAAY;AAC/D,WAAO,KAAKqrB,mBAAmBJ,QAAQjrB,OAAO,MAAK;AACjD,UAAI8rB;AACJ,UAAI9rB,MAAMkL,gBAAgBlL,MAAM4rB,YAAY5hB,QAAW;AACrD8hB,0BAAkB,KAAKlZ,OAAO1H,aAAa5J,UAAUtB,KAAK;aACrD;AACL8rB,0BAAkB9qB,GAAG,IAAI;;AAG3B,YAAM+qB,yBAAyBD,gBAAgB9mB,KAC7CoE,SAAUxD,YAAqC;AAC7C,YAAIA,WAAW,MAAM;AACnB,iBAAO5E,GAAG,MAAM;;AAElBhB,cAAMmL,gBAAgBvF,OAAOK;AAC7BjG,cAAM+K,kBAAkBnF,OAAOtE;AAG/B,eAAO,KAAKiqB,cAAc3lB,OAAOtE,YAAYA,UAAUsE,OAAOK,MAAM;OACrE,CAAC;AAEJ,UAAIjG,MAAM4R,iBAAiB,CAAC5R,MAAMqK,kBAAkB;AAClD,cAAM2hB,iBAAiB,KAAKpZ,OAAOhB,cAAc5R,KAAK;AACtD,eAAO2I,KAAK,CAACojB,wBAAwBC,cAAc,CAAC,EAAEhnB,KAAKukB,SAAQ,CAAE;aAChE;AACL,eAAOwC;;IAEX,CAAC;;;;yDA7FQ,SAAe3K,MAAA,GAAA,SAAAjP,QAAA,GAAA,SAAAkE,mBAAA,GAAA,SAAA0U,kBAAA,GAAA,SAAAjZ,kBAAA,CAAA;IAAA;EAAA;EAAf,OAAA;AAAA,SAAAjB,QAAA,mBAAA;aAAAua;MAAAjb,SAAAib,iBAAAta;MAAAR,YAAe;IAAA,CAAA;EADH;;;uFACG,CAAA;UAD3BC;WAAW;MAACD,YAAY;IAAM,CAAC;;;;;;;;;;;;;AC1DzB,IAAM2b,kBAAkB,IAAIjb,eAA+B,EAAE;IAGvDkb,uBAAAA,gBAAc;;EAUzB5rB,YACWC,eACDgX,aACQ4U,kBACCC,MACTtV,UAGJ,CAAA,GAAE;AAPG,SAAavW,gBAAbA;AACD,SAAWgX,cAAXA;AACQ,SAAgB4U,mBAAhBA;AACC,SAAIC,OAAJA;AACT,SAAOtV,UAAPA;AAXF,SAAMuV,SAAG;AACT,SAAUC,aAAyD;AACnE,SAAUC,aAAG;AACb,SAAK5O,QAAsC,CAAA;AAcjD7G,YAAQ0V,8BAA8B;AACtC1V,YAAQ2V,oBAAoB;;EAG9BC,OAAI;AAIF,QAAI,KAAK5V,QAAQ0V,8BAA8B,YAAY;AACzD,WAAKL,iBAAiBQ,4BAA4B,QAAQ;;AAE5D,SAAKxD,2BAA2B,KAAKyD,mBAAkB;AACvD,SAAKC,2BAA2B,KAAKC,oBAAmB;;EAGlDF,qBAAkB;AACxB,WAAO,KAAKrV,YAAYrB,OAAOmJ,UAAWjY,OAAK;AAC7C,UAAIA,aAAa8S,iBAAiB;AAEhC,aAAKyD,MAAM,KAAK0O,MAAM,IAAI,KAAKF,iBAAiBY,kBAAiB;AACjE,aAAKT,aAAallB,EAAE4lB;AACpB,aAAKT,aAAanlB,EAAEoR,gBAAgBpR,EAAEoR,cAAc1C,eAAe;iBAC1D1O,aAAa6U,eAAe;AACrC,aAAKoQ,SAASjlB,EAAEsQ;AAChB,aAAKuV,oBAAoB7lB,GAAG,KAAK7G,cAAc+B,MAAM8E,EAAEgG,iBAAiB,EAAE3L,QAAQ;iBAElF2F,aAAa0S,qBACb1S,EAAE+V,SAASpD,sBAAsBC,0BACjC;AACA,aAAKsS,aAAatiB;AAClB,aAAKuiB,aAAa;AAClB,aAAKU,oBAAoB7lB,GAAG,KAAK7G,cAAc+B,MAAM8E,EAAEzF,GAAG,EAAEF,QAAQ;;IAExE,CAAC;;EAGKqrB,sBAAmB;AACzB,WAAO,KAAKvV,YAAYrB,OAAOmJ,UAAWjY,OAAK;AAC7C,UAAI,EAAEA,aAAa8lB,QAAS;AAE5B,UAAI9lB,EAAE+lB,UAAU;AACd,YAAI,KAAKrW,QAAQ0V,8BAA8B,OAAO;AACpD,eAAKL,iBAAiBiB,iBAAiB,CAAC,GAAG,CAAC,CAAC;mBACpC,KAAKtW,QAAQ0V,8BAA8B,WAAW;AAC/D,eAAKL,iBAAiBiB,iBAAiBhmB,EAAE+lB,QAAQ;;aAG9C;AACL,YAAI/lB,EAAEimB,UAAU,KAAKvW,QAAQ2V,oBAAoB,WAAW;AAC1D,eAAKN,iBAAiBmB,eAAelmB,EAAEimB,MAAM;mBACpC,KAAKvW,QAAQ0V,8BAA8B,YAAY;AAChE,eAAKL,iBAAiBiB,iBAAiB,CAAC,GAAG,CAAC,CAAC;;;IAGnD,CAAC;;EAGKH,oBACNM,aACAF,QAAqB;AAErB,SAAKjB,KAAKrX,kBAAkB,MAAK;AAI/BI,iBAAW,MAAK;AACd,aAAKiX,KAAKoB,IAAI,MAAK;AACjB,eAAKjW,YAAYrB,OAAOrG,KACtB,IAAIqd,OACFK,aACA,KAAKjB,eAAe,aAAa,KAAK3O,MAAM,KAAK4O,UAAU,IAAI,MAC/Dc,MAAM,CACP;QAEL,CAAC;SACA,CAAC;IACN,CAAC;;;EAIHnK,cAAW;AACT,SAAKiG,0BAA0B/F,YAAW;AAC1C,SAAKyJ,0BAA0BzJ,YAAW;;;;;;EAvGnB;;;;MAAdjT,SAAA,gBAAAW;IAAA,CAAA;EAAA;;;sFAAc,CAAA;UAD1BP;;;;;;;;;;;;;SCgEekd,cAAcxnB,WAAmBmL,UAA0B;AACzE,SAAOsc,yBAAyB,CAC9B;IAACC,SAAS9b;IAAQ+b,OAAO;IAAMC,UAAU5nB;EAAM,GAC/C,OAAOnG,cAAc,eAAeA,YAChC;IAAC6tB,SAASG;IAAoBD,UAAU;EAAI,IAC5C,CAAA,GACJ;IAACF,SAASrG;IAAgB7W,YAAYsd;IAAWC,MAAM,CAAC5M,MAAM;EAAC,GAC/D;IAACuM,SAASM;IAAwBL,OAAO;IAAMnd,YAAYyd;EAAoB,GAC/E9c,SAASxN,IAAKuqB,aAAYA,QAAQC,UAAU,CAAC,CAC9C;AACH;AAEM,SAAUL,UAAUnW,QAAc;AACtC,SAAOA,OAAO8G,YAAY9d;AAC5B;AAeA,SAASytB,cACPC,MACA9C,WAAqB;AAErB,SAAO;IAAC+C,OAAOD;IAAMF,YAAY5C;EAAS;AAC5C;AAMO,IAAMsC,qBAAqB,IAAI9c,eAAwB,IAAI;EAChEV,YAAY;EACZH,SAASA,MAAM;AAChB,CAAA;AAED,IAAMqe,+BAA+B;EACnCb,SAASc;EACTb,OAAO;EACPnd,aAAU;AACR,WAAO,MAAK;AACV,UAAI,CAACL,OAAO0d,kBAAkB,GAAG;AAC/BtM,gBAAQS,KACN,yGAC6B;;IAGnC;;;AAqBE,SAAUyM,cAAczoB,QAAc;AAC1C,SAAO,CACL;IAAC0nB,SAAS9b;IAAQ+b,OAAO;IAAMC,UAAU5nB;EAAM,GAC/C,OAAOnG,cAAc,eAAeA,YAAY0uB,+BAA+B,CAAA,CAAE;AAErF;AAqCgB,SAAAG,sBACd7X,UAAoC,CAAA,GAAE;AAEtC,QAAM0U,YAAY,CAChB;IACEmC,SAAS1B;IACTxb,YAAYA,MAAK;AACf,YAAM0b,mBAAmB/b,OAAOwe,gBAAgB;AAChD,YAAMxC,OAAOhc,OAAO0E,MAAM;AAC1B,YAAMyC,cAAcnH,OAAOwF,qBAAqB;AAChD,YAAMrV,gBAAgB6P,OAAOkG,aAAa;AAC1C,aAAO,IAAI4V,eAAe3rB,eAAegX,aAAa4U,kBAAkBC,MAAMtV,OAAO;;EAExF,CAAA;AAEH,SAAOuX,cAAa,GAA6C7C,SAAS;AAC5E;SAEgB0C,uBAAoB;AAClC,QAAM5sB,WAAW8O,OAAOye,QAAQ;AAChC,SAAQC,8BAAmD;AACzD,UAAMC,MAAMztB,SAAS8Q,IAAI4c,cAAc;AAEvC,QAAIF,6BAA6BC,IAAIE,WAAW,CAAC,GAAG;AAClD;;AAGF,UAAMrX,SAAStW,SAAS8Q,IAAIgP,MAAM;AAClC,UAAM8N,gBAAgB5tB,SAAS8Q,IAAI+c,cAAc;AAEjD,QAAI7tB,SAAS8Q,IAAIgd,kBAAkB,MAAC,GAA2C;AAC7ExX,aAAO8K,kBAAiB;;AAG1BphB,aAAS8Q,IAAIid,kBAAkB,MAAMC,YAAY1E,QAAQ,GAAGU,gBAAe;AAC3EhqB,aAAS8Q,IAAI6Z,iBAAiB,MAAMqD,YAAY1E,QAAQ,GAAG8B,KAAI;AAC/D9U,WAAO6K,uBAAuBsM,IAAIQ,eAAe,CAAC,CAAC;AACnD,QAAI,CAACL,cAAcM,QAAQ;AACzBN,oBAAcrf,KAAI;AAClBqf,oBAAc5X,SAAQ;AACtB4X,oBAAc9L,YAAW;;EAE7B;AACF;AAOA,IAAM+L,iBAAiB,IAAIne,eACzB,OAAOlR,cAAc,eAAeA,YAAY,6BAA6B,IAC7E;EACEqQ,SAASA,MAAK;AACZ,WAAO,IAAI2C,QAAO;;AAErB,CAAA;AA2BH,IAAMsc,qBAAqB,IAAIpe,eAC7B,OAAOlR,cAAc,eAAeA,YAAY,uBAAuB,IACvE;EAACwQ,YAAY;EAAQH,SAASA,MAA0C;;AAAA,CAAC;SAuD3Dsf,uCAAoC;AAClD,QAAMjE,YAAY,CAChB;IAACmC,SAASyB;IAAoBvB,UAAQ;;EAAA,GACtC;IACEF,SAAS+B;IACT9B,OAAO;IACPI,MAAM,CAACa,QAAQ;IACfpe,YAAanP,cAAsB;AACjC,YAAMquB,sBAAoCruB,SAAS8Q,IACjDwd,sBACA1a,QAAQnI,QAAO,CAAE;AAGnB,aAAO,MAAK;AACV,eAAO4iB,oBAAoBE,KAAK,MAAK;AACnC,iBAAO,IAAI3a,QAASnI,aAAW;AAC7B,kBAAM6K,SAAStW,SAAS8Q,IAAIgP,MAAM;AAClC,kBAAM8N,gBAAgB5tB,SAAS8Q,IAAI+c,cAAc;AACjD5O,gCAAoB3I,QAAQ,MAAK;AAG/B7K,sBAAQ,IAAI;YACd,CAAC;AAEDzL,qBAAS8Q,IAAIwD,qBAAqB,EAAEqB,qBAAqB,MAAK;AAI5DlK,sBAAQ,IAAI;AACZ,qBAAOmiB,cAAcM,SAASxuB,GAAG,MAAM,IAAIkuB;YAC7C;AACAtX,mBAAO8K,kBAAiB;UAC1B,CAAC;QACH,CAAC;MACH;;EAEH,CAAA;AAEH,SAAO2L,cAAa,GAA4D7C,SAAS;AAC3F;SAwCgBsE,gCAA6B;AAC3C,QAAMtE,YAAY,CAChB;IACEmC,SAAS+B;IACT9B,OAAO;IACPnd,YAAYA,MAAK;AACf,YAAMmH,SAASxH,OAAOgR,MAAM;AAC5B,aAAO,MAAK;AACVxJ,eAAO+K,4BAA2B;MACpC;;EAEH,GACD;IAACgL,SAASyB;IAAoBvB,UAAQ;;EAAA,CAA6B;AAErE,SAAOQ,cAAa,GAAqD7C,SAAS;AACpF;SAoCgBuE,mBAAgB;AAC9B,MAAIvE,YAAwB,CAAA;AAC5B,MAAI,OAAO1rB,cAAc,eAAeA,WAAW;AACjD0rB,gBAAY,CACV;MACEmC,SAASc;MACTb,OAAO;MACPnd,YAAYA,MAAK;AACf,cAAMmH,SAASxH,OAAOgR,MAAM;AAC5B,eAAO,MACLxJ,OAAO1B,OAAOmJ,UAAWjY,OAAY;AAEnCoa,kBAAQpe,QAAQ,iBAAuBgE,EAAE9G,YAAaiD,IAAI,EAAE;AAC5Die,kBAAQwO,IAAIC,eAAe7oB,CAAC,CAAC;AAC7Boa,kBAAQwO,IAAI5oB,CAAC;AACboa,kBAAQ0O,WAAQ;QAElB,CAAC;;IAEN,CAAA;SAEE;AACL1E,gBAAY,CAAA;;AAEd,SAAO6C,cAAa,GAAwC7C,SAAS;AACvE;AAEA,IAAM6D,mBAAmB,IAAIre,eAC3B,OAAOlR,cAAc,eAAeA,YAAY,qBAAqB,EAAE;AAwCnE,SAAUqwB,eAAe9E,oBAA4C;AACzE,QAAMG,YAAY,CAChB;IAACmC,SAAS0B;IAAkBe,aAAahF;EAAe,GACxD;IAACuC,SAAS5C;IAAoBqF,aAAa/E;EAAkB,CAAC;AAEhE,SAAOgD,cAAa,GAAsC7C,SAAS;AACrE;AAwCM,SAAU6E,iBAAiBvZ,SAA4B;AAC3D,QAAM0U,YAAY,CAAC;IAACmC,SAAS5c;IAAsB8c,UAAU/W;EAAO,CAAC;AACrE,SAAOuX,cAAa,GAA+C7C,SAAS;AAC9E;SAoCgB8E,mBAAgB;AAC9B,QAAM9E,YAAY,CAAC;IAACmC,SAASlG;IAAkB8I,UAAUC;EAAoB,CAAC;AAC9E,SAAOnC,cAAa,GAA8C7C,SAAS;AAC7E;AAgDM,SAAUiF,2BACdC,SAA8D;AAE9D,QAAMlF,YAAY,CAChB;IACEmC,SAAShY;IACTkY,UAAU6C;EACX,CAAA;AAEH,SAAOrC,cAAa,GAAkD7C,SAAS;AACjF;SA6DgBmF,4BAAyB;AACvC,QAAMnF,YAAY,CAChBoF,4BACA;IAACjD,SAAS/W;IAAcwZ,aAAaQ;EAA0B,CAAC;AAGlE,SAAOvC,cAAa,GAAiD7C,SAAS;AAChF;AA6BM,SAAUqF,oBACd/Z,SAAuC;AAEvC,QAAM0U,YAAY,CAChB;IAACmC,SAASpZ;IAAwBsZ,UAAUpZ;EAAoB,GAChE;IACEkZ,SAASnZ;IACTqZ,UAAU;MAAC5Y,oBAAoB,CAAC,CAAC6B,SAASga;OAA0Bha;EACrE,CAAA;AAEH,SAAOuX,cAAa,GAA2C7C,SAAS;AAC1E;ACpuBA,IAAMuF,oBAAoB,CAACzf,cAAc6T,YAAYsD,kBAAkBxX,qBAAoB;AAKpF,IAAM+f,uBAAuB,IAAIhgB,eACtC,OAAOlR,cAAc,eAAeA,YAChC,mCACA,sBAAsB;AAOf,IAAAmxB,mBAA+B;EAC1Cva;EACA;IAACiX,SAASrX;IAAeia,UAAUphB;EAAoB;EACvDiS;EACA5K;EACA;IAACmX,SAASrG;IAAgB7W,YAAYsd;IAAWC,MAAM,CAAC5M,MAAM;EAAC;EAC/DtP;;;EAGA,OAAOhS,cAAc,eAAeA,YAChC;IAAC6tB,SAASG;IAAoBD,UAAU;EAAI,IAC5C,CAAA;AAAE;IA4BKqD,qBAAAA,cAAY;EACvB5wB,YAAsD6wB,OAAU;EAAA;;;;;;;;;;;;;;;;;;;EAoBhE,OAAOC,QAAQnrB,QAAgBL,QAAqB;AAClD,WAAO;MACLyrB,UAAUH;MACV1F,WAAW,CACTyF,kBACA,OAAOnxB,cAAc,eAAeA,YAChC8F,QAAQ0rB,gBACNvB,iBAAgB,EAAG3B,aACnB,CAAA,IACF,CAAA,GACJ;QAACT,SAAS9b;QAAQ+b,OAAO;QAAMC,UAAU5nB;MAAM,GAC/C;QACE0nB,SAASqD;QACTvgB,YAAY8gB;QACZvD,MAAM,CAAC,CAAC5M,QAAQ,IAAIwJ,SAAQ,GAAI,IAAI4G,SAAQ,CAAE,CAAC;MAChD,GACD;QAAC7D,SAAS5c;QAAsB8c,UAAUjoB,SAASA,SAAS,CAAA;MAAE,GAC9DA,QAAQ6rB,UAAUC,4BAA2B,IAAKC,4BAA2B,GAC7EC,sBAAqB,GACrBhsB,QAAQylB,qBAAqB8E,eAAevqB,OAAOylB,kBAAkB,EAAE+C,aAAa,CAAA,GACpFxoB,QAAQ8c,oBAAoBmP,yBAAyBjsB,MAAM,IAAI,CAAA,GAC/DA,QAAQksB,wBAAwBnB,0BAAyB,EAAGvC,aAAa,CAAA,GACzExoB,QAAQmsB,wBAAwBlB,oBAAmB,EAAGzC,aAAa,CAAA,GACnE4D,yBAAwB,CAAE;;;;;;;;;;;;;;;;;;;EAqBhC,OAAOC,SAAShsB,QAAc;AAC5B,WAAO;MACLorB,UAAUH;MACV1F,WAAW,CAAC;QAACmC,SAAS9b;QAAQ+b,OAAO;QAAMC,UAAU5nB;MAAM,CAAC;;;EApErD,OAAA;AAAA,SAAA6K,OAAA,SAAAohB,qBAAAhU,mBAAA;AAAA,aAAA,KAAAA,qBAAAgT,eAAA,SAAYF,sBACS,CAAA,CAAA;IAAA;EAAoB;EADzC,OAAA;AAAA,SAAAmB,OAAA,iBAAA;YAAAjB;MAAAxf,SAAA,CAtDcJ,cAAA6T,YAAcsD,kBAAYxX,qBAAkB;MAAAmhB,SAAA,CAAoB9gB,cAAhE6T,YAAcsD,kBAAYxX,qBAAkB;IAAA,CAAA;EAAA;;;EAsD1D;;;oFAAY,CAAA;UAJxBohB;IAAS7hB,MAAA,CAAA;MACRkB,SAASqf;MACTqB,SAASrB;IACV,CAAA;;;;YAEcnG;;YAAY0H;aAAOtB,oBAAoB;;;;SA4EtCY,wBAAqB;AACnC,SAAO;IACLjE,SAAS1B;IACTxb,YAAYA,MAAK;AACf,YAAM0b,mBAAmB/b,OAAOwe,gBAAgB;AAChD,YAAMxC,OAAOhc,OAAO0E,MAAM;AAC1B,YAAMlP,SAAuBwK,OAAOW,oBAAoB;AACxD,YAAMwG,cAAcnH,OAAOwF,qBAAqB;AAChD,YAAMrV,gBAAgB6P,OAAOkG,aAAa;AAC1C,UAAI1Q,OAAO2sB,cAAc;AACvBpG,yBAAiBqG,UAAU5sB,OAAO2sB,YAAY;;AAEhD,aAAO,IAAIrG,eAAe3rB,eAAegX,aAAa4U,kBAAkBC,MAAMxmB,MAAM;;;AAG1F;AAIA,SAAS8rB,8BAA2B;AAClC,SAAO;IAAC/D,SAASlG;IAAkB8I,UAAUC;EAAoB;AACnE;AAIA,SAASmB,8BAA2B;AAClC,SAAO;IAAChE,SAASlG;IAAkB8I,UAAUkC;EAAoB;AACnE;AAEM,SAAUlB,oBAAoB3Z,QAAc;AAChD,OAAK,OAAO9X,cAAc,eAAeA,cAAc8X,QAAQ;AAC7D,UAAM,IAAI/X,aAAY,MAEpB,4KACoE;;AAGxE,SAAO;AACT;AAIA,SAASgyB,yBAAyBjsB,QAA+C;AAC/E,SAAO,CACLA,OAAO8c,sBAAsB,aAAaoN,8BAA6B,EAAG1B,aAAa,CAAA,GACvFxoB,OAAO8c,sBAAsB,oBACzB+M,qCAAoC,EAAGrB,aACvC,CAAA,CAAE;AAEV;IASasE,qBAAqB,IAAI1hB,eACpC,OAAOlR,cAAc,eAAeA,YAAY,uBAAuB,EAAE;AAG3E,SAASkyB,2BAAwB;AAC/B,SAAO;;;IAGL;MAACrE,SAAS+E;MAAoBjiB,YAAYyd;IAAoB;IAC9D;MAACP,SAASM;MAAwBL,OAAO;MAAMwC,aAAasC;IAAkB;EAAC;AAEnF;ACnOM,SAAUC,cAAcnH,WAAgC;AAC5D,SAAOA,UAAU5nB,IACdgvB,cACC,IAAI/wB,WACFuO,OAAOwiB,QAAQ,EAAEC,SAAS,GAAGhxB,MAAM,CAAC;AAE5C;AAWM,SAAUixB,iBAAiBtH,WAAmC;AAClE,SAAOA,UAAU5nB,IACdgvB,cACC,IAAI/wB,WACFuO,OAAOwiB,QAAQ,EAAEG,YAAY,GAAGlxB,MAAM,CAAC;AAE/C;AAUM,SAAUmxB,sBACdxH,WAAwC;AAExC,SAAOA,UAAU5nB,IACdgvB,cACC,IAAI/wB,WACFuO,OAAOwiB,QAAQ,EAAEK,iBAAiB,GAAGpxB,MAAM,CAAC;AAEpD;AAUM,SAAUqxB,mBACd1H,WAAwC;AAExC,SAAOA,UAAU5nB,IACdgvB,cACC,IAAI/wB,WACFuO,OAAOwiB,QAAQ,EAAEO,cAAc,GAAGtxB,MAAM,CAAC;AAEjD;AAUM,SAAUuxB,aAAgBR,UAA0B;AACxD,SAAO,IAAI/wB,WAAWuO,OAAOwiB,QAAQ,EAAE7lB,QAAQ,GAAGlL,MAAM;AAC1D;ICpFawxB,UAAU,IAAIC,QAAQ,SAAA;",
  "names": ["PRIMARY_OUTLET", "RouteTitleKey", "Symbol", "ParamsAsMap", "constructor", "params", "has", "name", "Object", "prototype", "hasOwnProperty", "call", "get", "v", "Array", "isArray", "getAll", "keys", "convertToParamMap", "defaultUrlMatcher", "segments", "segmentGroup", "route", "parts", "path", "split", "length", "pathMatch", "hasChildren", "posParams", "index", "part", "segment", "isParameter", "substring", "consumed", "slice", "shallowEqualArrays", "a", "b", "i", "shallowEqual", "k1", "getDataKeys", "undefined", "k2", "key", "equalArraysOrString", "obj", "getOwnPropertySymbols", "aSorted", "sort", "bSorted", "every", "val", "last", "wrapIntoObservable", "value", "isObservable", "ÉµisPromise", "from", "Promise", "resolve", "of", "pathCompareMap", "equalSegmentGroups", "containsSegmentGroup", "paramCompareMap", "equalParams", "containsParams", "ignored", "containsTree", "container", "containee", "options", "paths", "root", "matrixParams", "queryParams", "fragment", "equalPath", "matrixParamsMatch", "numberOfChildren", "c", "children", "containsSegmentGroupHelper", "containeePaths", "current", "next", "containerPaths", "containeeSegment", "parameters", "UrlTree", "UrlSegmentGroup", "ngDevMode", "ÉµRuntimeError", "queryParamMap", "_queryParamMap", "toString", "DEFAULT_SERIALIZER", "serialize", "parent", "values", "forEach", "serializePaths", "UrlSegment", "parameterMap", "_parameterMap", "serializePath", "equalSegments", "as", "bs", "mapChildrenIntoArray", "fn", "res", "entries", "childOutlet", "child", "concat", "UrlSerializer", "factory", "DefaultUrlSerializer", "providedIn", "Injectable", "args", "useFactory", "parse", "url", "p", "UrlParser", "parseRootSegment", "parseQueryParams", "parseFragment", "tree", "serializeSegment", "query", "serializeQueryParams", "encodeUriFragment", "map", "join", "primary", "k", "push", "encodeUriString", "s", "encodeURIComponent", "replace", "encodeUriQuery", "encodeURI", "encodeUriSegment", "decode", "decodeURIComponent", "decodeQuery", "serializeMatrixParams", "strParams", "filter", "SEGMENT_RE", "matchSegments", "str", "match", "MATRIX_PARAM_SEGMENT_RE", "matchMatrixKeySegments", "QUERY_PARAM_RE", "matchQueryParams", "QUERY_PARAM_VALUE_RE", "matchUrlQueryParamValue", "remaining", "consumeOptional", "peekStartsWith", "parseChildren", "parseQueryParam", "parseSegment", "capture", "parseParens", "parseMatrixParams", "parseParam", "valueMatch", "decodedKey", "decodedVal", "currentVal", "allowPrimary", "outletName", "indexOf", "startsWith", "createRoot", "rootCandidate", "squashSegmentGroup", "newChildren", "childCandidate", "grandChildOutlet", "grandChild", "mergeTrivialChildren", "isUrlTree", "createUrlTreeFromSnapshot", "relativeTo", "commands", "relativeToUrlSegmentGroup", "createSegmentGroupFromRoute", "createUrlTreeFromSegmentGroup", "targetGroup", "createSegmentGroupFromRouteRecursive", "currentRoute", "childOutlets", "childSnapshot", "outlet", "rootSegmentGroup", "nav", "computeNavigation", "toRoot", "position", "findStartingPositionForTargetGroup", "newSegmentGroup", "processChildren", "updateSegmentGroupChildren", "updateSegmentGroup", "isMatrixParams", "command", "outlets", "segmentPath", "isCommandWithOutlets", "oldRoot", "oldSegmentGroup", "qp", "replaceSegment", "newRoot", "oldSegment", "newSegment", "Navigation", "isAbsolute", "numberOfDoubleDots", "cmdWithOutlet", "find", "reduce", "cmd", "cmdIdx", "urlPart", "partIndex", "Position", "target", "NaN", "modifier", "createPositionApplyingDoubleDots", "group", "g", "ci", "dd", "getOutlets", "startIndex", "m", "prefixedWith", "slicedCommands", "commandIndex", "pathIndex", "createNewSegmentGroup", "some", "o", "childrenOfEmptyChild", "currentCommandIndex", "currentPathIndex", "noMatch", "curr", "compare", "createNewSegmentChildren", "stringify", "IMPERATIVE_NAVIGATION", "EventType", "RouterEvent", "id", "NavigationStart", "navigationTrigger", "restoredState", "type", "NavigationEnd", "urlAfterRedirects", "NavigationCancellationCode", "NavigationSkippedCode", "NavigationCancel", "reason", "code", "NavigationSkipped", "NavigationError", "error", "RoutesRecognized", "state", "GuardsCheckStart", "GuardsCheckEnd", "shouldActivate", "ResolveStart", "ResolveEnd", "RouteConfigLoadStart", "RouteConfigLoadEnd", "ChildActivationStart", "snapshot", "routeConfig", "ChildActivationEnd", "ActivationStart", "ActivationEnd", "Scroll", "routerEvent", "anchor", "pos", "BeforeActivateRoutes", "RedirectRequest", "navigationBehaviorOptions", "stringifyEvent", "getOrCreateRouteInjectorIfNeeded", "currentInjector", "providers", "_injector", "createEnvironmentInjector", "validateConfig", "config", "parentPath", "requireStandaloneComponents", "i", "length", "route", "fullPath", "getFullPath", "validateNode", "assertStandalone", "component", "ÉµisNgModule", "ÉµRuntimeError", "isStandalone", "ngDevMode", "Array", "isArray", "redirectTo", "loadComponent", "children", "loadChildren", "outlet", "PRIMARY_OUTLET", "canActivate", "path", "matcher", "charAt", "pathMatch", "exp", "currentRoute", "getOutlet", "sortByMatchingOutlets", "routes", "outletName", "sortedConfig", "filter", "r", "push", "getClosestRouteInjector", "snapshot", "routeConfig", "_injector", "s", "parent", "_loadedInjector", "OutletContext", "injector", "rootInjector", "_", "constructor", "ChildrenOutletContexts", "attachRef", "contexts", "Map", "onChildOutletCreated", "childName", "context", "getOrCreateContext", "set", "onChildOutletDestroyed", "getContext", "onOutletDeactivated", "onOutletReAttached", "get", "EnvironmentInjector", "Éµprov", "factory", "Éµfac", "providedIn", "Injectable", "Tree", "root", "_root", "value", "t", "p", "pathFromRoot", "n", "findNode", "map", "firstChild", "siblings", "findPath", "c", "cc", "node", "child", "unshift", "TreeNode", "toString", "nodeChildrenAsMap", "forEach", "RouterState", "setRouterState", "createEmptyState", "rootComponent", "createEmptyStateSnapshot", "emptyUrl", "BehaviorSubject", "UrlSegment", "emptyParams", "emptyData", "emptyQueryParams", "fragment", "activated", "ActivatedRoute", "ActivatedRouteSnapshot", "RouterStateSnapshot", "urlSubject", "paramsSubject", "queryParamsSubject", "fragmentSubject", "dataSubject", "futureSnapshot", "_futureSnapshot", "title", "pipe", "d", "RouteTitleKey", "of", "undefined", "url", "params", "queryParams", "data", "_routerState", "paramMap", "_paramMap", "convertToParamMap", "queryParamMap", "_queryParamMap", "getInherited", "paramsInheritanceStrategy", "inherited", "resolve", "_resolvedData", "hasStaticTitle", "_resolve", "segment", "join", "matched", "serializeNode", "state", "advanceActivatedRoute", "currentSnapshot", "nextSnapshot", "shallowEqual", "next", "shallowEqualArrays", "equalParamsAndUrlSegments", "a", "b", "equalUrlParams", "equalSegments", "parentsMismatch", "RouterOutlet", "_activatedRoute", "name", "activateEvents", "EventEmitter", "deactivateEvents", "attachEvents", "detachEvents", "parentContexts", "inject", "location", "ViewContainerRef", "changeDetector", "ChangeDetectorRef", "inputBinder", "INPUT_BINDER", "optional", "supportsBindingToComponentInputs", "activatedComponentRef", "ngOnChanges", "changes", "firstChange", "previousValue", "isTrackedInParentContexts", "deactivate", "initializeOutletWithName", "ngOnDestroy", "unsubscribeFromRouteData", "ngOnInit", "attach", "activateWith", "isActivated", "instance", "activatedRoute", "activatedRouteData", "detach", "cmp", "emit", "ref", "insert", "hostView", "bindActivatedRouteToOutletComponent", "destroy", "environmentInjector", "childContexts", "OutletInjector", "createComponent", "index", "markForCheck", "selectors", "inputs", "outputs", "exportAs", "standalone", "features", "Directive", "args", "selector", "Input", "Output", "__ngOutletInjector", "parentInjector", "token", "notFoundValue", "InjectionToken", "RoutedComponentInputBinder", "outletDataSubscriptions", "subscribeToRouteData", "unsubscribe", "delete", "dataSubscription", "combineLatest", "switchMap", "Promise", "subscribe", "mirror", "reflectComponentType", "templateName", "setInput", "createRouterState", "routeReuseStrategy", "curr", "prevState", "createNode", "shouldReuseRoute", "createOrReuseChildren", "shouldAttach", "detachedRouteHandle", "retrieve", "tree", "createActivatedRoute", "RedirectCommand", "navigationBehaviorOptions", "NAVIGATION_CANCELING_ERROR", "redirectingNavigationError", "urlSerializer", "redirect", "isUrlTree", "error", "navigationCancelingError", "serialize", "NavigationCancellationCode", "Redirect", "message", "code", "Error", "cancellationCode", "isRedirectingNavigationCancelingError", "isNavigationCancelingError", "warnedAboutUnsupportedInputBinding", "activateRoutes", "rootContexts", "forwardEvent", "inputBindingEnabled", "ActivateRoutes", "targetRouterState", "currentRouterState", "activate", "futureState", "currState", "futureRoot", "currRoot", "deactivateChildRoutes", "activateChildRoutes", "futureNode", "currNode", "futureChild", "childOutletName", "deactivateRoutes", "Object", "values", "v", "deactivateRouteAndItsChildren", "parentContext", "future", "shouldDetach", "detachAndStoreRouteSubtree", "deactivateRouteAndOutlet", "treeNode", "componentRef", "store", "ActivationEnd", "ChildActivationEnd", "stored", "console", "warn", "CanActivate", "CanDeactivate", "getAllRouteGuards", "getChildRouteGuards", "getCanActivateChild", "canActivateChild", "guards", "getTokenOrFunctionIdentity", "tokenOrFunction", "NOT_FOUND", "Symbol", "result", "ÉµisInjectable", "futurePath", "checks", "canDeactivateChecks", "canActivateChecks", "prevChildren", "getRouteGuards", "concat", "entries", "k", "shouldRun", "shouldRunGuardsAndResolvers", "runGuardsAndResolvers", "mode", "equalPath", "isFunction", "isBoolean", "isCanLoad", "guard", "canLoad", "isCanActivate", "isCanActivateChild", "isCanDeactivate", "canDeactivate", "isCanMatch", "canMatch", "isEmptyError", "e", "EmptyError", "INITIAL_VALUE", "prioritizedGuardValue", "obs", "o", "take", "startWith", "results", "isRedirect", "item", "val", "checkGuards", "mergeMap", "targetSnapshot", "guardsResult", "runCanDeactivateChecks", "runCanActivateChecks", "futureRSS", "currRSS", "from", "check", "runCanDeactivate", "first", "concatMap", "fireChildActivationStart", "fireActivationStart", "runCanActivateChild", "runCanActivate", "ActivationStart", "ChildActivationStart", "futureARS", "canActivateObservables", "defer", "closestInjector", "guardVal", "runInInjectionContext", "wrapIntoObservable", "canActivateChildGuards", "slice", "reverse", "canActivateChildGuardsMapped", "guardsMapped", "currARS", "canDeactivateObservables", "runCanLoadGuards", "segments", "canLoadObservables", "injectionToken", "redirectIfUrlTree", "tap", "runCanMatchGuards", "canMatchObservables", "NoMatch", "segmentGroup", "AbsoluteRedirect", "urlTree", "noMatch$1", "throwError", "namedOutletsRedirect", "redirectTo", "throwError", "ÉµRuntimeError", "ngDevMode", "canLoadFails", "route", "navigationCancelingError", "path", "NavigationCancellationCode", "GuardRejected", "ApplyRedirects", "constructor", "urlSerializer", "urlTree", "lineralizeSegments", "res", "c", "root", "concat", "segments", "numberOfChildren", "of", "children", "PRIMARY_OUTLET", "applyRedirectCommands", "posParams", "currentSnapshot", "injector", "redirectToFn", "queryParams", "fragment", "routeConfig", "url", "outlet", "params", "data", "title", "newRedirect", "runInInjectionContext", "UrlTree", "AbsoluteRedirect", "newTree", "applyRedirectCreateUrlTree", "parse", "newRoot", "createSegmentGroup", "createQueryParams", "redirectToParams", "actualParams", "Object", "entries", "forEach", "k", "v", "copySourceValue", "sourceName", "substring", "group", "updatedSegments", "createSegments", "name", "child", "UrlSegmentGroup", "redirectToSegments", "actualSegments", "map", "s", "findPosParam", "findOrReturn", "redirectToUrlSegment", "pos", "idx", "splice", "noMatch", "matched", "consumedSegments", "remainingSegments", "parameters", "positionalParamSegments", "matchWithChecks", "segmentGroup", "result", "match", "getOrCreateRouteInjectorIfNeeded", "runCanMatchGuards", "pipe", "createWildcardMatchResult", "pathMatch", "hasChildren", "length", "matcher", "defaultUrlMatcher", "consumed", "slice", "last", "split", "slicedSegments", "config", "containsEmptyPathMatchesWithNamedOutlets", "createChildrenForEmptyPaths", "containsEmptyPathMatches", "addEmptyPathsToChildrenIfNeeded", "routes", "r", "emptyPathMatch", "getOutlet", "primarySegment", "some", "noLeftoversInUrl", "NoLeftoversInUrl", "recognize$1", "configLoader", "rootComponentType", "paramsInheritanceStrategy", "Recognizer", "recognize", "MAX_ALLOWED_REDIRECTS", "applyRedirects", "absoluteRedirectCount", "allowRedirects", "noMatchError", "e", "rootSegmentGroup", "rootSnapshot", "rootNode", "TreeNode", "routeState", "RouterStateSnapshot", "tree", "createUrlTreeFromSnapshot", "serialize", "state", "ActivatedRouteSnapshot", "freeze", "processSegmentGroup", "catchError", "NoMatch", "parentRoute", "processChildren", "processSegment", "childOutlets", "keys", "unshift", "push", "from", "concatMap", "childOutlet", "sortedConfig", "sortByMatchingOutlets", "scan", "outletChildren", "defaultIfEmpty", "last$1", "mergeMap", "noMatch$1", "mergedChildren", "mergeEmptyPathMatches", "checkOutletNameUniqueness", "sortActivatedRouteSnapshots", "processSegmentAgainstRoute", "_injector", "first", "x", "isEmptyError", "rawSegment", "undefined", "matchSegmentAgainstRoute", "expandSegmentAgainstRouteUsingRedirect", "getData", "component", "_loadedComponent", "getResolve", "inherited", "getInherited", "newSegments", "matchResult", "switchMap", "getChildConfig", "childConfig", "childInjector", "_loadedInjector", "snapshot", "matchedOnOutlet", "loadChildren", "_loadedRoutes", "runCanLoadGuards", "shouldLoadResult", "tap", "cfg", "nodes", "sort", "a", "b", "value", "localeCompare", "hasEmptyPathConfig", "node", "mergedNodes", "Set", "duplicateEmptyPathNode", "find", "resultNode", "add", "mergedNode", "filter", "n", "has", "names", "routeWithSameOutletName", "p", "toString", "join", "resolve", "serializer", "t", "extractedUrl", "targetSnapshot", "urlAfterRedirects", "resolveData", "guards", "canActivateChecks", "routesWithResolversToRun", "check", "routesNeedingDataUpdates", "newRoute", "flattenRouteTree", "routesProcessed", "runResolve", "parent", "takeLast", "_", "size", "EMPTY", "descendants", "flat", "futureARS", "futureRSS", "_resolve", "hasStaticTitle", "RouteTitleKey", "resolveNode", "resolvedData", "_resolvedData", "getDataKeys", "key", "getResolver", "RedirectCommand", "redirectingNavigationError", "DefaultUrlSerializer", "mapTo", "injectionToken", "closestInjector", "getClosestRouteInjector", "resolver", "getTokenOrFunctionIdentity", "resolverValue", "wrapIntoObservable", "switchTap", "next", "nextResult", "TitleStrategy", "buildTitle", "pageTitle", "getResolvedTitleForRoute", "factory", "inject", "DefaultTitleStrategy", "providedIn", "Injectable", "args", "useFactory", "updateTitle", "setTitle", "Title", "Éµprov", "Éµfac", "ROUTER_CONFIGURATION", "InjectionToken", "ÉµEmptyOutletComponent", "selectors", "standalone", "features", "dependencies", "RouterOutlet", "encapsulation", "Component", "template", "imports", "standardizeConfig", "loadComponent", "ROUTES", "RouterConfigLoader", "componentLoaders", "WeakMap", "childrenLoaders", "compiler", "Compiler", "get", "onLoadStartListener", "loadRunner", "maybeUnwrapDefaultExport", "onLoadEndListener", "assertStandalone", "finalize", "delete", "loader", "ConnectableObservable", "Subject", "refCount", "set", "parentInjector", "moduleFactoryOrRoutes$", "NgModuleFactory", "Array", "isArray", "compileModuleAsync", "factoryOrRoutes", "rawRoutes", "requireStandaloneComponents", "create", "optional", "self", "validateConfig", "isWrappedDefaultExport", "input", "UrlHandlingStrategy", "DefaultUrlHandlingStrategy", "shouldProcessUrl", "extract", "merge", "newUrlPart", "wholeUrl", "CREATE_VIEW_TRANSITION", "VIEW_TRANSITION_OPTIONS", "createViewTransition", "to", "transitionOptions", "document", "DOCUMENT", "NgZone", "runOutsideAngular", "startViewTransition", "skipNextTransition", "Promise", "setTimeout", "resolveViewTransitionStarted", "viewTransitionStarted", "transition", "createRenderPromise", "onViewTransitionCreated", "afterNextRender", "read", "NAVIGATION_ERROR_HANDLER", "NavigationTransitions", "hasRequestedNavigation", "navigationId", "currentNavigation", "currentTransition", "lastSuccessfulNavigation", "events", "transitionAbortSubject", "environmentInjector", "EnvironmentInjector", "UrlSerializer", "rootContexts", "ChildrenOutletContexts", "location", "Location", "inputBindingEnabled", "INPUT_BINDER", "titleStrategy", "options", "urlHandlingStrategy", "navigationErrorHandler", "afterPreactivation", "onLoadStart", "RouteConfigLoadStart", "onLoadEnd", "RouteConfigLoadEnd", "complete", "transitions", "handleNavigationRequest", "request", "id", "setupNavigations", "router", "initialUrlTree", "initialRouterState", "BehaviorSubject", "currentUrlTree", "currentRawUrl", "rawUrl", "extras", "reject", "promise", "source", "IMPERATIVE_NAVIGATION", "restoredState", "currentRouterState", "targetRouterState", "canDeactivateChecks", "guardsResult", "overallTransitionState", "completed", "errored", "cancellationReason", "cancelNavigationTransition", "SupersededByNewNavigation", "initialUrl", "targetBrowserUrl", "browserUrl", "trigger", "previousNavigation", "urlTransition", "navigated", "isUpdatingInternalState", "isUpdatedBrowserUrl", "onSameUrlNavigation", "reason", "NavigationSkipped", "NavigationSkippedCode", "IgnoredSameUrlNavigation", "getValue", "NavigationStart", "finalUrl", "routesRecognized", "RoutesRecognized", "navStart", "createEmptyState", "skipLocationChange", "replaceUrl", "IgnoredByUrlHandlingStrategy", "guardsStart", "GuardsCheckStart", "getAllRouteGuards", "checkGuards", "evt", "guardsEnd", "GuardsCheckEnd", "resolveStart", "ResolveStart", "dataResolved", "NoDataFromResolver", "resolveEnd", "ResolveEnd", "loadComponents", "loaders", "loadedComponent", "combineLatest", "take", "createRouterState", "routeReuseStrategy", "BeforeActivateRoutes", "activateRoutes", "NavigationEnd", "takeUntil", "err", "cancelationReason", "isNavigationCancelingError", "NavigationCancel", "message", "cancellationCode", "isRedirectingNavigationCancelingError", "RedirectRequest", "navigationBehaviorOptions", "navigationError", "NavigationError", "navigationErrorHandlerResult", "errorHandlerResult", "errorHandler", "ee", "resolveNavigationPromiseOnError", "code", "navCancel", "currentBrowserUrl", "isBrowserTriggeredNavigation", "RouteReuseStrategy", "DefaultRouteReuseStrategy", "BaseRouteReuseStrategy", "shouldDetach", "store", "detachedTree", "shouldAttach", "retrieve", "shouldReuseRoute", "future", "curr", "__ngFactoryType__", "StateManager", "HistoryStateManager", "canceledNavigationResolution", "urlUpdateStrategy", "rawUrlTree", "currentPageId", "lastSuccessfulId", "routerState", "stateMemento", "createStateMemento", "getCurrentUrlTree", "getRawUrlTree", "getState", "browserPageId", "ÉµrouterPageId", "getRouterState", "registerNonRouterCurrentEntryChangeListener", "listener", "subscribe", "event", "handleRouterEvent", "setBrowserUrl", "restoreHistory", "isCurrentPathEqualTo", "currentBrowserPageId", "generateNgRouterState", "replaceState", "go", "navigation", "restoringFromCaughtError", "targetPagePosition", "historyGo", "resetState", "resetUrlToCurrentUrlTree", "routerPageId", "NavigationResult", "afterNextNavigation", "action", "COMPLETE", "redirecting", "Redirect", "REDIRECTING", "FAILED", "defaultErrorHandler", "error", "exactMatchOptions", "paths", "matrixParams", "subsetMatchOptions", "Router", "stateManager", "_events", "disposed", "console", "ÉµConsole", "pendingTasks", "ÉµPendingTasks", "navigationTransitions", "componentInputBindingEnabled", "eventsSubscription", "Subscription", "resetConfig", "warn", "subscribeToNavigationEvents", "subscription", "opts", "mergedTree", "info", "scheduleNavigation", "isPublicRouterEvent", "resetRootComponentType", "initialNavigation", "setUpLocationChangeListener", "navigateToSyncWithBrowser", "nonRouterCurrentEntryChangeSubscription", "stateCopy", "parseUrl", "serializeUrl", "getCurrentNavigation", "ngOnDestroy", "dispose", "unsubscribe", "createUrlTree", "commands", "navigationExtras", "relativeTo", "queryParamsHandling", "preserveFragment", "f", "q", "defaultQueryParamsHandling", "removeEmptyProps", "relativeToUrlSegmentGroup", "relativeToSnapshot", "createSegmentGroupFromRoute", "createUrlTreeFromSegmentGroup", "navigateByUrl", "isUrlTree", "navigate", "validateCommands", "isActive", "matchOptions", "containsTree", "reduce", "priorPromise", "rej", "taskId", "queueMicrotask", "remove", "catch", "i", "cmd", "RouterLink", "tabIndexAttribute", "renderer", "el", "locationStrategy", "href", "onChanges", "routerLinkInput", "tagName", "nativeElement", "toLowerCase", "isAnchorElement", "updateHref", "setTabIndexIfNotOnNativeEl", "newTabIndex", "applyAttributeValue", "ngOnChanges", "changes", "routerLink", "commandsOrUrlTree", "onClick", "button", "ctrlKey", "shiftKey", "altKey", "metaKey", "target", "prepareExternalUrl", "sanitizedValue", "ÉµÉµsanitizeUrlOrResourceUrl", "attrName", "attrValue", "setAttribute", "removeAttribute", "RouterLink_Factory", "ActivatedRoute", "Renderer2", "ElementRef", "LocationStrategy", "Éµdir", "hostVars", "hostBindings", "RouterLink_HostBindings", "rf", "ctx", "$event", "booleanAttribute", "Directive", "selector", "Attribute", "HostBinding", "Input", "transform", "HostListener", "RouterLinkActive", "_isActive", "element", "cdr", "link", "classes", "routerLinkActiveOptions", "exact", "isActiveChange", "EventEmitter", "routerEventsSubscription", "update", "ngAfterContentInit", "links", "mergeAll", "subscribeToEachLinkOnChanges", "linkInputChangesSubscription", "allLinkChanges", "toArray", "isLinkActive", "routerLinkActive", "hasActiveLinks", "addClass", "removeClass", "ariaCurrentWhenActive", "markForCheck", "emit", "isActiveMatchOptions", "isActiveCheckFn", "ChangeDetectorRef", "contentQueries", "RouterLinkActive_ContentQueries", "dirIndex", "_t", "exportAs", "Optional", "ContentChildren", "Output", "PreloadingStrategy", "PreloadAllModules", "preload", "fn", "NoPreloading", "RouterPreloader", "preloadingStrategy", "setUpPreloading", "processRoutes", "providers", "createEnvironmentInjector", "injectorForCurrentRoute", "injectorForChildren", "canLoad", "preloadConfig", "loadedChildren$", "recursiveLoadChildren$", "loadComponent$", "ROUTER_SCROLLER", "RouterScroller", "viewportScroller", "zone", "lastId", "lastSource", "restoredId", "scrollPositionRestoration", "anchorScrolling", "init", "setHistoryScrollRestoration", "createScrollEvents", "scrollEventsSubscription", "consumeScrollEvents", "getScrollPosition", "navigationTrigger", "scheduleScrollEvent", "Scroll", "position", "scrollToPosition", "anchor", "scrollToAnchor", "routerEvent", "run", "provideRouter", "makeEnvironmentProviders", "provide", "multi", "useValue", "ROUTER_IS_PROVIDED", "rootRoute", "deps", "APP_BOOTSTRAP_LISTENER", "getBootstrapListener", "feature", "Éµproviders", "routerFeature", "kind", "Éµkind", "routerIsProvidedDevModeCheck", "ENVIRONMENT_INITIALIZER", "provideRoutes", "withInMemoryScrolling", "ViewportScroller", "Injector", "bootstrappedComponentRef", "ref", "ApplicationRef", "components", "bootstrapDone", "BOOTSTRAP_DONE", "INITIAL_NAVIGATION", "ROUTER_PRELOADER", "InjectFlags", "componentTypes", "closed", "withEnabledBlockingInitialNavigation", "APP_INITIALIZER", "locationInitialized", "LOCATION_INITIALIZED", "then", "withDisabledInitialNavigation", "withDebugTracing", "log", "stringifyEvent", "groupEnd", "withPreloading", "useExisting", "withRouterConfig", "withHashLocation", "useClass", "HashLocationStrategy", "withNavigationErrorHandler", "handler", "withComponentInputBinding", "RoutedComponentInputBinder", "withViewTransitions", "skipInitialTransition", "ROUTER_DIRECTIVES", "ROUTER_FORROOT_GUARD", "ROUTER_PROVIDERS", "RouterModule", "guard", "forRoot", "ngModule", "enableTracing", "provideForRootGuard", "SkipSelf", "useHash", "provideHashLocationStrategy", "providePathLocationStrategy", "provideRouterScroller", "provideInitialNavigation", "bindToComponentInputs", "enableViewTransitions", "provideRouterInitializer", "forChild", "RouterModule_Factory", "Éµmod", "exports", "NgModule", "Inject", "scrollOffset", "setOffset", "PathLocationStrategy", "ROUTER_INITIALIZER", "mapToCanMatch", "provider", "canMatch", "mapToCanActivate", "canActivate", "mapToCanActivateChild", "canActivateChild", "mapToCanDeactivate", "canDeactivate", "mapToResolve", "VERSION", "Version"]
}
